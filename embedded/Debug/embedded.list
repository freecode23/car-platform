
embedded.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005380  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003dc  08005510  08005510  00015510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058ec  080058ec  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  080058ec  080058ec  000158ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058f4  080058f4  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058f4  080058f4  000158f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058f8  080058f8  000158f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080058fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          000005ec  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000064c  2000064c  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000e0ac  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001f9a  00000000  00000000  0002e17f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000cb0  00000000  00000000  00030120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009f1  00000000  00000000  00030dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021405  00000000  00000000  000317c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000eaa8  00000000  00000000  00052bc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cba84  00000000  00000000  0006166e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003a94  00000000  00000000  0012d0f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  00130b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080054f8 	.word	0x080054f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080054f8 	.word	0x080054f8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000580:	f001 f924 	bl	80017cc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000584:	f000 f846 	bl	8000614 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000588:	f000 f96e 	bl	8000868 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800058c:	f000 f918 	bl	80007c0 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8000590:	f000 f940 	bl	8000814 <MX_USART3_UART_Init>
	MX_TIM4_Init();
 8000594:	f000 f89e 	bl	80006d4 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Transmit(&huart2, (uint8_t*) "App started.\r\n",
 8000598:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800059c:	220e      	movs	r2, #14
 800059e:	4917      	ldr	r1, [pc, #92]	; (80005fc <main+0x80>)
 80005a0:	4817      	ldr	r0, [pc, #92]	; (8000600 <main+0x84>)
 80005a2:	f003 fa3d 	bl	8003a20 <HAL_UART_Transmit>
			strlen("App started.\r\n"),
			HAL_MAX_DELAY);

	// 1. Timer4 PWM set up.
	if (HAL_TIM_Base_Start_IT(&htim4) != HAL_OK) {
 80005a6:	4817      	ldr	r0, [pc, #92]	; (8000604 <main+0x88>)
 80005a8:	f002 fa00 	bl	80029ac <HAL_TIM_Base_Start_IT>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d008      	beq.n	80005c4 <main+0x48>
		HAL_UART_Transmit(&huart2,
 80005b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005b6:	221f      	movs	r2, #31
 80005b8:	4913      	ldr	r1, [pc, #76]	; (8000608 <main+0x8c>)
 80005ba:	4811      	ldr	r0, [pc, #68]	; (8000600 <main+0x84>)
 80005bc:	f003 fa30 	bl	8003a20 <HAL_UART_Transmit>
				(uint8_t*) "Error initializing base timer\r\n",
				strlen("Error initializing base timer\r\n"),
				HAL_MAX_DELAY);
		Error_Handler();
 80005c0:	f000 fae5 	bl	8000b8e <Error_Handler>
	}
	if (HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4)) {
 80005c4:	210c      	movs	r1, #12
 80005c6:	480f      	ldr	r0, [pc, #60]	; (8000604 <main+0x88>)
 80005c8:	f002 faba 	bl	8002b40 <HAL_TIM_PWM_Start>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d008      	beq.n	80005e4 <main+0x68>
		HAL_UART_Transmit(&huart2,
 80005d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005d6:	221e      	movs	r2, #30
 80005d8:	490c      	ldr	r1, [pc, #48]	; (800060c <main+0x90>)
 80005da:	4809      	ldr	r0, [pc, #36]	; (8000600 <main+0x84>)
 80005dc:	f003 fa20 	bl	8003a20 <HAL_UART_Transmit>
				(uint8_t*) "Error initializing pwm timer\r\n",
				strlen("Error initializing pwm timer\r\n"),
				HAL_MAX_DELAY);
		Error_Handler();
 80005e0:	f000 fad5 	bl	8000b8e <Error_Handler>
	}

	// 2. MQTT and GPS setup.
	sim_huart_init(&huart3, &huart2, &htim4, TIM_CHANNEL_4);
 80005e4:	230c      	movs	r3, #12
 80005e6:	4a07      	ldr	r2, [pc, #28]	; (8000604 <main+0x88>)
 80005e8:	4905      	ldr	r1, [pc, #20]	; (8000600 <main+0x84>)
 80005ea:	4809      	ldr	r0, [pc, #36]	; (8000610 <main+0x94>)
 80005ec:	f000 fad4 	bl	8000b98 <sim_huart_init>
	sim_mqtt_gps_init();
 80005f0:	f000 faf4 	bl	8000bdc <sim_mqtt_gps_init>
	/* USER CODE END 2 */

	/* USER CODE BEGIN WHILE */
	while (1) {

		sim_process_received_data();
 80005f4:	f000 fc7a 	bl	8000eec <sim_process_received_data>
 80005f8:	e7fc      	b.n	80005f4 <main+0x78>
 80005fa:	bf00      	nop
 80005fc:	08005510 	.word	0x08005510
 8000600:	200000c4 	.word	0x200000c4
 8000604:	2000007c 	.word	0x2000007c
 8000608:	08005520 	.word	0x08005520
 800060c:	08005540 	.word	0x08005540
 8000610:	2000010c 	.word	0x2000010c

08000614 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b094      	sub	sp, #80	; 0x50
 8000618:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800061a:	f107 0320 	add.w	r3, r7, #32
 800061e:	2230      	movs	r2, #48	; 0x30
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f004 fae3 	bl	8004bee <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	4b23      	ldr	r3, [pc, #140]	; (80006cc <SystemClock_Config+0xb8>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	4a22      	ldr	r2, [pc, #136]	; (80006cc <SystemClock_Config+0xb8>)
 8000642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000646:	6413      	str	r3, [r2, #64]	; 0x40
 8000648:	4b20      	ldr	r3, [pc, #128]	; (80006cc <SystemClock_Config+0xb8>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000654:	2300      	movs	r3, #0
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	4b1d      	ldr	r3, [pc, #116]	; (80006d0 <SystemClock_Config+0xbc>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a1c      	ldr	r2, [pc, #112]	; (80006d0 <SystemClock_Config+0xbc>)
 800065e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <SystemClock_Config+0xbc>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000670:	2302      	movs	r3, #2
 8000672:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000674:	2301      	movs	r3, #1
 8000676:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000678:	2310      	movs	r3, #16
 800067a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800067c:	2300      	movs	r3, #0
 800067e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000680:	f107 0320 	add.w	r3, r7, #32
 8000684:	4618      	mov	r0, r3
 8000686:	f001 fca9 	bl	8001fdc <HAL_RCC_OscConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x80>
		Error_Handler();
 8000690:	f000 fa7d 	bl	8000b8e <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000694:	230f      	movs	r3, #15
 8000696:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000698:	2300      	movs	r3, #0
 800069a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006aa:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f001 ff0a 	bl	80024cc <HAL_RCC_ClockConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0xae>
		Error_Handler();
 80006be:	f000 fa66 	bl	8000b8e <Error_Handler>
	}
}
 80006c2:	bf00      	nop
 80006c4:	3750      	adds	r7, #80	; 0x50
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40007000 	.word	0x40007000

080006d4 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08e      	sub	sp, #56	; 0x38
 80006d8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80006da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80006e8:	f107 0320 	add.w	r3, r7, #32
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
 8000700:	615a      	str	r2, [r3, #20]
 8000702:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */
	// ARR is 49999
	// Timer 4 clock is 16Mhz
	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8000704:	4b2c      	ldr	r3, [pc, #176]	; (80007b8 <MX_TIM4_Init+0xe4>)
 8000706:	4a2d      	ldr	r2, [pc, #180]	; (80007bc <MX_TIM4_Init+0xe8>)
 8000708:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 4;
 800070a:	4b2b      	ldr	r3, [pc, #172]	; (80007b8 <MX_TIM4_Init+0xe4>)
 800070c:	2204      	movs	r2, #4
 800070e:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000710:	4b29      	ldr	r3, [pc, #164]	; (80007b8 <MX_TIM4_Init+0xe4>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 49999;
 8000716:	4b28      	ldr	r3, [pc, #160]	; (80007b8 <MX_TIM4_Init+0xe4>)
 8000718:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800071c:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800071e:	4b26      	ldr	r3, [pc, #152]	; (80007b8 <MX_TIM4_Init+0xe4>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000724:	4b24      	ldr	r3, [pc, #144]	; (80007b8 <MX_TIM4_Init+0xe4>)
 8000726:	2280      	movs	r2, #128	; 0x80
 8000728:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 800072a:	4823      	ldr	r0, [pc, #140]	; (80007b8 <MX_TIM4_Init+0xe4>)
 800072c:	f002 f8ee 	bl	800290c <HAL_TIM_Base_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_TIM4_Init+0x66>
		Error_Handler();
 8000736:	f000 fa2a 	bl	8000b8e <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800073a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8000740:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000744:	4619      	mov	r1, r3
 8000746:	481c      	ldr	r0, [pc, #112]	; (80007b8 <MX_TIM4_Init+0xe4>)
 8000748:	f002 fc74 	bl	8003034 <HAL_TIM_ConfigClockSource>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM4_Init+0x82>
		Error_Handler();
 8000752:	f000 fa1c 	bl	8000b8e <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8000756:	4818      	ldr	r0, [pc, #96]	; (80007b8 <MX_TIM4_Init+0xe4>)
 8000758:	f002 f998 	bl	8002a8c <HAL_TIM_PWM_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_TIM4_Init+0x92>
		Error_Handler();
 8000762:	f000 fa14 	bl	8000b8e <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000766:	2300      	movs	r3, #0
 8000768:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800076a:	2300      	movs	r3, #0
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 800076e:	f107 0320 	add.w	r3, r7, #32
 8000772:	4619      	mov	r1, r3
 8000774:	4810      	ldr	r0, [pc, #64]	; (80007b8 <MX_TIM4_Init+0xe4>)
 8000776:	f003 f873 	bl	8003860 <HAL_TIMEx_MasterConfigSynchronization>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_TIM4_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8000780:	f000 fa05 	bl	8000b8e <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000784:	2360      	movs	r3, #96	; 0x60
 8000786:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	220c      	movs	r2, #12
 8000798:	4619      	mov	r1, r3
 800079a:	4807      	ldr	r0, [pc, #28]	; (80007b8 <MX_TIM4_Init+0xe4>)
 800079c:	f002 fb88 	bl	8002eb0 <HAL_TIM_PWM_ConfigChannel>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM4_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 80007a6:	f000 f9f2 	bl	8000b8e <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 80007aa:	4803      	ldr	r0, [pc, #12]	; (80007b8 <MX_TIM4_Init+0xe4>)
 80007ac:	f000 fe62 	bl	8001474 <HAL_TIM_MspPostInit>

}
 80007b0:	bf00      	nop
 80007b2:	3738      	adds	r7, #56	; 0x38
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	2000007c 	.word	0x2000007c
 80007bc:	40000800 	.word	0x40000800

080007c0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80007c4:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_USART2_UART_Init+0x4c>)
 80007c6:	4a12      	ldr	r2, [pc, #72]	; (8000810 <MX_USART2_UART_Init+0x50>)
 80007c8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80007ca:	4b10      	ldr	r3, [pc, #64]	; (800080c <MX_USART2_UART_Init+0x4c>)
 80007cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_USART2_UART_Init+0x4c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_USART2_UART_Init+0x4c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <MX_USART2_UART_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_USART2_UART_Init+0x4c>)
 80007e6:	220c      	movs	r2, #12
 80007e8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <MX_USART2_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_USART2_UART_Init+0x4c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80007f6:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_USART2_UART_Init+0x4c>)
 80007f8:	f003 f8c2 	bl	8003980 <HAL_UART_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000802:	f000 f9c4 	bl	8000b8e <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200000c4 	.word	0x200000c4
 8000810:	40004400 	.word	0x40004400

08000814 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_USART3_UART_Init+0x4c>)
 800081a:	4a12      	ldr	r2, [pc, #72]	; (8000864 <MX_USART3_UART_Init+0x50>)
 800081c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <MX_USART3_UART_Init+0x4c>)
 8000820:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000824:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_USART3_UART_Init+0x4c>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_USART3_UART_Init+0x4c>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <MX_USART3_UART_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_USART3_UART_Init+0x4c>)
 800083a:	220c      	movs	r2, #12
 800083c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <MX_USART3_UART_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_USART3_UART_Init+0x4c>)
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <MX_USART3_UART_Init+0x4c>)
 800084c:	f003 f898 	bl	8003980 <HAL_UART_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8000856:	f000 f99a 	bl	8000b8e <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	2000010c 	.word	0x2000010c
 8000864:	40004800 	.word	0x40004800

08000868 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b08c      	sub	sp, #48	; 0x30
 800086c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	61bb      	str	r3, [r7, #24]
 8000882:	4baf      	ldr	r3, [pc, #700]	; (8000b40 <MX_GPIO_Init+0x2d8>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4aae      	ldr	r2, [pc, #696]	; (8000b40 <MX_GPIO_Init+0x2d8>)
 8000888:	f043 0310 	orr.w	r3, r3, #16
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4bac      	ldr	r3, [pc, #688]	; (8000b40 <MX_GPIO_Init+0x2d8>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0310 	and.w	r3, r3, #16
 8000896:	61bb      	str	r3, [r7, #24]
 8000898:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
 800089e:	4ba8      	ldr	r3, [pc, #672]	; (8000b40 <MX_GPIO_Init+0x2d8>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4aa7      	ldr	r2, [pc, #668]	; (8000b40 <MX_GPIO_Init+0x2d8>)
 80008a4:	f043 0304 	orr.w	r3, r3, #4
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4ba5      	ldr	r3, [pc, #660]	; (8000b40 <MX_GPIO_Init+0x2d8>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0304 	and.w	r3, r3, #4
 80008b2:	617b      	str	r3, [r7, #20]
 80008b4:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	4ba1      	ldr	r3, [pc, #644]	; (8000b40 <MX_GPIO_Init+0x2d8>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4aa0      	ldr	r2, [pc, #640]	; (8000b40 <MX_GPIO_Init+0x2d8>)
 80008c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b9e      	ldr	r3, [pc, #632]	; (8000b40 <MX_GPIO_Init+0x2d8>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	4b9a      	ldr	r3, [pc, #616]	; (8000b40 <MX_GPIO_Init+0x2d8>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a99      	ldr	r2, [pc, #612]	; (8000b40 <MX_GPIO_Init+0x2d8>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b97      	ldr	r3, [pc, #604]	; (8000b40 <MX_GPIO_Init+0x2d8>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	4b93      	ldr	r3, [pc, #588]	; (8000b40 <MX_GPIO_Init+0x2d8>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a92      	ldr	r2, [pc, #584]	; (8000b40 <MX_GPIO_Init+0x2d8>)
 80008f8:	f043 0302 	orr.w	r3, r3, #2
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b90      	ldr	r3, [pc, #576]	; (8000b40 <MX_GPIO_Init+0x2d8>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	4b8c      	ldr	r3, [pc, #560]	; (8000b40 <MX_GPIO_Init+0x2d8>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a8b      	ldr	r2, [pc, #556]	; (8000b40 <MX_GPIO_Init+0x2d8>)
 8000914:	f043 0308 	orr.w	r3, r3, #8
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b89      	ldr	r3, [pc, #548]	; (8000b40 <MX_GPIO_Init+0x2d8>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0308 	and.w	r3, r3, #8
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	2108      	movs	r1, #8
 800092a:	4886      	ldr	r0, [pc, #536]	; (8000b44 <MX_GPIO_Init+0x2dc>)
 800092c:	f001 fb24 	bl	8001f78 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 8000930:	2201      	movs	r2, #1
 8000932:	2101      	movs	r1, #1
 8000934:	4884      	ldr	r0, [pc, #528]	; (8000b48 <MX_GPIO_Init+0x2e0>)
 8000936:	f001 fb1f 	bl	8001f78 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | Audio_RST_Pin,
 800093a:	2200      	movs	r2, #0
 800093c:	f247 0110 	movw	r1, #28688	; 0x7010
 8000940:	4882      	ldr	r0, [pc, #520]	; (8000b4c <MX_GPIO_Init+0x2e4>)
 8000942:	f001 fb19 	bl	8001f78 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	2130      	movs	r1, #48	; 0x30
 800094a:	4881      	ldr	r0, [pc, #516]	; (8000b50 <MX_GPIO_Init+0x2e8>)
 800094c:	f001 fb14 	bl	8001f78 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000950:	2308      	movs	r3, #8
 8000952:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000954:	2301      	movs	r3, #1
 8000956:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	2300      	movs	r3, #0
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	4877      	ldr	r0, [pc, #476]	; (8000b44 <MX_GPIO_Init+0x2dc>)
 8000968:	f001 f96a 	bl	8001c40 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800096c:	2301      	movs	r3, #1
 800096e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000970:	2301      	movs	r3, #1
 8000972:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2300      	movs	r3, #0
 800097a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800097c:	f107 031c 	add.w	r3, r7, #28
 8000980:	4619      	mov	r1, r3
 8000982:	4871      	ldr	r0, [pc, #452]	; (8000b48 <MX_GPIO_Init+0x2e0>)
 8000984:	f001 f95c 	bl	8001c40 <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000988:	2308      	movs	r3, #8
 800098a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098c:	2302      	movs	r3, #2
 800098e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2300      	movs	r3, #0
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000998:	2305      	movs	r3, #5
 800099a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	4619      	mov	r1, r3
 80009a2:	4869      	ldr	r0, [pc, #420]	; (8000b48 <MX_GPIO_Init+0x2e0>)
 80009a4:	f001 f94c 	bl	8001c40 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80009a8:	2301      	movs	r3, #1
 80009aa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009b0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	4619      	mov	r1, r3
 80009bc:	4865      	ldr	r0, [pc, #404]	; (8000b54 <MX_GPIO_Init+0x2ec>)
 80009be:	f001 f93f 	bl	8001c40 <HAL_GPIO_Init>

	/*Configure GPIO pin : I2S3_WS_Pin */
	GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80009c2:	2310      	movs	r3, #16
 80009c4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	2302      	movs	r3, #2
 80009c8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	2300      	movs	r3, #0
 80009d0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009d2:	2306      	movs	r3, #6
 80009d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	485d      	ldr	r0, [pc, #372]	; (8000b54 <MX_GPIO_Init+0x2ec>)
 80009de:	f001 f92f 	bl	8001c40 <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
	GPIO_InitStruct.Pin = SPI1_SCK_Pin | SPI1_MISO_Pin | SPI1_MOSI_Pin;
 80009e2:	23e0      	movs	r3, #224	; 0xe0
 80009e4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e6:	2302      	movs	r3, #2
 80009e8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2300      	movs	r3, #0
 80009f0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009f2:	2305      	movs	r3, #5
 80009f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	4855      	ldr	r0, [pc, #340]	; (8000b54 <MX_GPIO_Init+0x2ec>)
 80009fe:	f001 f91f 	bl	8001c40 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a02:	2304      	movs	r3, #4
 8000a04:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a06:	2300      	movs	r3, #0
 8000a08:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	484e      	ldr	r0, [pc, #312]	; (8000b50 <MX_GPIO_Init+0x2e8>)
 8000a16:	f001 f913 	bl	8001c40 <HAL_GPIO_Init>

	/*Configure GPIO pin : CLK_IN_Pin */
	GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a1e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a20:	2302      	movs	r3, #2
 8000a22:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a2c:	2305      	movs	r3, #5
 8000a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	4619      	mov	r1, r3
 8000a36:	4846      	ldr	r0, [pc, #280]	; (8000b50 <MX_GPIO_Init+0x2e8>)
 8000a38:	f001 f902 	bl	8001c40 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | Audio_RST_Pin;
 8000a3c:	f247 0310 	movw	r3, #28688	; 0x7010
 8000a40:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4619      	mov	r1, r3
 8000a54:	483d      	ldr	r0, [pc, #244]	; (8000b4c <MX_GPIO_Init+0x2e4>)
 8000a56:	f001 f8f3 	bl	8001c40 <HAL_GPIO_Init>

	/*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
	GPIO_InitStruct.Pin = I2S3_MCK_Pin | I2S3_SCK_Pin | I2S3_SD_Pin;
 8000a5a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000a5e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a60:	2302      	movs	r3, #2
 8000a62:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a6c:	2306      	movs	r3, #6
 8000a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a70:	f107 031c 	add.w	r3, r7, #28
 8000a74:	4619      	mov	r1, r3
 8000a76:	4834      	ldr	r0, [pc, #208]	; (8000b48 <MX_GPIO_Init+0x2e0>)
 8000a78:	f001 f8e2 	bl	8001c40 <HAL_GPIO_Init>

	/*Configure GPIO pin : VBUS_FS_Pin */
	GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000a7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a80:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a82:	2300      	movs	r3, #0
 8000a84:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4830      	ldr	r0, [pc, #192]	; (8000b54 <MX_GPIO_Init+0x2ec>)
 8000a92:	f001 f8d5 	bl	8001c40 <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
	GPIO_InitStruct.Pin = OTG_FS_ID_Pin | OTG_FS_DM_Pin | OTG_FS_DP_Pin;
 8000a96:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a9a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000aa8:	230a      	movs	r3, #10
 8000aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aac:	f107 031c 	add.w	r3, r7, #28
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4828      	ldr	r0, [pc, #160]	; (8000b54 <MX_GPIO_Init+0x2ec>)
 8000ab4:	f001 f8c4 	bl	8001c40 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ab8:	2320      	movs	r3, #32
 8000aba:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000abc:	2300      	movs	r3, #0
 8000abe:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 031c 	add.w	r3, r7, #28
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4820      	ldr	r0, [pc, #128]	; (8000b4c <MX_GPIO_Init+0x2e4>)
 8000acc:	f001 f8b8 	bl	8001c40 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB4 PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 8000ad0:	2330      	movs	r3, #48	; 0x30
 8000ad2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	481a      	ldr	r0, [pc, #104]	; (8000b50 <MX_GPIO_Init+0x2e8>)
 8000ae8:	f001 f8aa 	bl	8001c40 <HAL_GPIO_Init>

	/*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
	GPIO_InitStruct.Pin = Audio_SCL_Pin | Audio_SDA_Pin;
 8000aec:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000af0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000af2:	2312      	movs	r3, #18
 8000af4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000afe:	2304      	movs	r3, #4
 8000b00:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b02:	f107 031c 	add.w	r3, r7, #28
 8000b06:	4619      	mov	r1, r3
 8000b08:	4811      	ldr	r0, [pc, #68]	; (8000b50 <MX_GPIO_Init+0x2e8>)
 8000b0a:	f001 f899 	bl	8001c40 <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b12:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b16:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b1c:	f107 031c 	add.w	r3, r7, #28
 8000b20:	4619      	mov	r1, r3
 8000b22:	4808      	ldr	r0, [pc, #32]	; (8000b44 <MX_GPIO_Init+0x2dc>)
 8000b24:	f001 f88c 	bl	8001c40 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	2006      	movs	r0, #6
 8000b2e:	f000 ffbe 	bl	8001aae <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b32:	2006      	movs	r0, #6
 8000b34:	f000 ffd7 	bl	8001ae6 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000b38:	bf00      	nop
 8000b3a:	3730      	adds	r7, #48	; 0x30
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40021000 	.word	0x40021000
 8000b48:	40020800 	.word	0x40020800
 8000b4c:	40020c00 	.word	0x40020c00
 8000b50:	40020400 	.word	0x40020400
 8000b54:	40020000 	.word	0x40020000

08000b58 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 4 */

/**
 * Call back function everytime we receive a single byte in UART.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]

	// Received a byte from SIM7600 module.
	if (huart == &huart3) {
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <HAL_UART_RxCpltCallback+0x1c>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d101      	bne.n	8000b6c <HAL_UART_RxCpltCallback+0x14>
		sim_handle_byte();
 8000b68:	f000 f956 	bl	8000e18 <sim_handle_byte>
	}
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	2000010c 	.word	0x2000010c

08000b78 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin) // Check if the interrupt comes from the button pin
	{
	}
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b92:	b672      	cpsid	i
}
 8000b94:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b96:	e7fe      	b.n	8000b96 <Error_Handler+0x8>

08000b98 <sim_huart_init>:
/**
 * Enable the stm32 to send message to sim module and to log the command or sensor messages to UART.
 */
void sim_huart_init(UART_HandleTypeDef *p_huart_sim,
		UART_HandleTypeDef *p_huart_log, TIM_HandleTypeDef *p_pwm_timer,
		uint32_t p_tim_channel) {
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
 8000ba4:	603b      	str	r3, [r7, #0]
	huart_sim = p_huart_sim;
 8000ba6:	4a09      	ldr	r2, [pc, #36]	; (8000bcc <sim_huart_init+0x34>)
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	6013      	str	r3, [r2, #0]
	huart_log = p_huart_log;
 8000bac:	4a08      	ldr	r2, [pc, #32]	; (8000bd0 <sim_huart_init+0x38>)
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	6013      	str	r3, [r2, #0]
	pwm_timer = p_pwm_timer;
 8000bb2:	4a08      	ldr	r2, [pc, #32]	; (8000bd4 <sim_huart_init+0x3c>)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6013      	str	r3, [r2, #0]
	tim_channel = p_tim_channel;
 8000bb8:	4a07      	ldr	r2, [pc, #28]	; (8000bd8 <sim_huart_init+0x40>)
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	6013      	str	r3, [r2, #0]
}
 8000bbe:	bf00      	nop
 8000bc0:	3714      	adds	r7, #20
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	200004ec 	.word	0x200004ec
 8000bd0:	200004f0 	.word	0x200004f0
 8000bd4:	200004f4 	.word	0x200004f4
 8000bd8:	200004f8 	.word	0x200004f8

08000bdc <sim_mqtt_gps_init>:

/**
 * Initialize MQTT publisher and subscriber
 * set to receive GPS info from SIM_7600.
 */
void sim_mqtt_gps_init(void) {
 8000bdc:	b590      	push	{r4, r7, lr}
 8000bde:	f6ad 0ddc 	subw	sp, sp, #2268	; 0x8dc
 8000be2:	af00      	add	r7, sp, #0

	uint8_t response_at_ok = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	f887 38d7 	strb.w	r3, [r7, #2263]	; 0x8d7
	uint32_t prev_tick = HAL_GetTick();
 8000bea:	f000 fe55 	bl	8001898 <HAL_GetTick>
 8000bee:	f8c7 08d0 	str.w	r0, [r7, #2256]	; 0x8d0
	uint8_t response_at_cmd[2000] = { };
 8000bf2:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8000bf6:	f5a3 63fb 	sub.w	r3, r3, #2008	; 0x7d8
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	3304      	adds	r3, #4
 8000c00:	f240 72cc 	movw	r2, #1996	; 0x7cc
 8000c04:	2100      	movs	r1, #0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f003 fff1 	bl	8004bee <memset>

	// 0. Reset connection.
	while (!response_at_ok && prev_tick + timeout > HAL_GetTick()) {
 8000c0c:	e012      	b.n	8000c34 <sim_mqtt_gps_init+0x58>
		send_AT_cmd("AT+CRESET\r\n");
 8000c0e:	4863      	ldr	r0, [pc, #396]	; (8000d9c <sim_mqtt_gps_init+0x1c0>)
 8000c10:	f000 fa62 	bl	80010d8 <send_AT_cmd>
		if (strstr((char*) response_at_cmd, "SMS DONE")) {
 8000c14:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000c18:	4961      	ldr	r1, [pc, #388]	; (8000da0 <sim_mqtt_gps_init+0x1c4>)
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f003 ffd1 	bl	8004bc2 <strstr>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d002      	beq.n	8000c2c <sim_mqtt_gps_init+0x50>
			response_at_ok = 1;
 8000c26:	2301      	movs	r3, #1
 8000c28:	f887 38d7 	strb.w	r3, [r7, #2263]	; 0x8d7
		}
		HAL_Delay(1000);
 8000c2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c30:	f000 fe3e 	bl	80018b0 <HAL_Delay>
	while (!response_at_ok && prev_tick + timeout > HAL_GetTick()) {
 8000c34:	f897 38d7 	ldrb.w	r3, [r7, #2263]	; 0x8d7
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d109      	bne.n	8000c50 <sim_mqtt_gps_init+0x74>
 8000c3c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000c40:	f8d7 38d0 	ldr.w	r3, [r7, #2256]	; 0x8d0
 8000c44:	18d4      	adds	r4, r2, r3
 8000c46:	f000 fe27 	bl	8001898 <HAL_GetTick>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	429c      	cmp	r4, r3
 8000c4e:	d8de      	bhi.n	8000c0e <sim_mqtt_gps_init+0x32>
	}

	// 1. Check for OK response for AT
	response_at_ok = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	f887 38d7 	strb.w	r3, [r7, #2263]	; 0x8d7
	prev_tick = HAL_GetTick();
 8000c56:	f000 fe1f 	bl	8001898 <HAL_GetTick>
 8000c5a:	f8c7 08d0 	str.w	r0, [r7, #2256]	; 0x8d0
	while (!response_at_ok && prev_tick + timeout > HAL_GetTick()) {
 8000c5e:	e012      	b.n	8000c86 <sim_mqtt_gps_init+0xaa>
		send_AT_cmd("AT\r\n");
 8000c60:	4850      	ldr	r0, [pc, #320]	; (8000da4 <sim_mqtt_gps_init+0x1c8>)
 8000c62:	f000 fa39 	bl	80010d8 <send_AT_cmd>
		if (strstr((char*) response_at_cmd, "OK")) {
 8000c66:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000c6a:	494f      	ldr	r1, [pc, #316]	; (8000da8 <sim_mqtt_gps_init+0x1cc>)
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f003 ffa8 	bl	8004bc2 <strstr>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d002      	beq.n	8000c7e <sim_mqtt_gps_init+0xa2>
			response_at_ok = 1;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	f887 38d7 	strb.w	r3, [r7, #2263]	; 0x8d7
		}
		HAL_Delay(1000);
 8000c7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c82:	f000 fe15 	bl	80018b0 <HAL_Delay>
	while (!response_at_ok && prev_tick + timeout > HAL_GetTick()) {
 8000c86:	f897 38d7 	ldrb.w	r3, [r7, #2263]	; 0x8d7
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d109      	bne.n	8000ca2 <sim_mqtt_gps_init+0xc6>
 8000c8e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000c92:	f8d7 38d0 	ldr.w	r3, [r7, #2256]	; 0x8d0
 8000c96:	18d4      	adds	r4, r2, r3
 8000c98:	f000 fdfe 	bl	8001898 <HAL_GetTick>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	429c      	cmp	r4, r3
 8000ca0:	d8de      	bhi.n	8000c60 <sim_mqtt_gps_init+0x84>
	}

	// 2. Check the certificate list
	send_AT_cmd("AT+CCERTLIST\r\n");
 8000ca2:	4842      	ldr	r0, [pc, #264]	; (8000dac <sim_mqtt_gps_init+0x1d0>)
 8000ca4:	f000 fa18 	bl	80010d8 <send_AT_cmd>

	// 3. Configure SSL with certificates.
	send_AT_cmd("AT+CSSLCFG=\"sslversion\",0,4\r\n");
 8000ca8:	4841      	ldr	r0, [pc, #260]	; (8000db0 <sim_mqtt_gps_init+0x1d4>)
 8000caa:	f000 fa15 	bl	80010d8 <send_AT_cmd>
	send_AT_cmd("AT+CSSLCFG=\"authmode\",0,2\r\n");
 8000cae:	4841      	ldr	r0, [pc, #260]	; (8000db4 <sim_mqtt_gps_init+0x1d8>)
 8000cb0:	f000 fa12 	bl	80010d8 <send_AT_cmd>
	send_AT_cmd("AT+CSSLCFG=\"cacert\",0,\"aws1_ca.pem\"\r\n");
 8000cb4:	4840      	ldr	r0, [pc, #256]	; (8000db8 <sim_mqtt_gps_init+0x1dc>)
 8000cb6:	f000 fa0f 	bl	80010d8 <send_AT_cmd>
	send_AT_cmd("AT+CSSLCFG=\"clientcert\",0,\"aws1_cert.pem\"\r\n");
 8000cba:	4840      	ldr	r0, [pc, #256]	; (8000dbc <sim_mqtt_gps_init+0x1e0>)
 8000cbc:	f000 fa0c 	bl	80010d8 <send_AT_cmd>
	send_AT_cmd("AT+CSSLCFG=\"clientkey\",0,\"aws1_private.pem\"\r\n");
 8000cc0:	483f      	ldr	r0, [pc, #252]	; (8000dc0 <sim_mqtt_gps_init+0x1e4>)
 8000cc2:	f000 fa09 	bl	80010d8 <send_AT_cmd>

	// 4. Generate client and will topic
	send_AT_cmd("AT+CMQTTSTART\r\n");
 8000cc6:	483f      	ldr	r0, [pc, #252]	; (8000dc4 <sim_mqtt_gps_init+0x1e8>)
 8000cc8:	f000 fa06 	bl	80010d8 <send_AT_cmd>
	send_AT_cmd("AT+CMQTTACCQ=0,\"SIMCom_client01\",1\r\n");
 8000ccc:	483e      	ldr	r0, [pc, #248]	; (8000dc8 <sim_mqtt_gps_init+0x1ec>)
 8000cce:	f000 fa03 	bl	80010d8 <send_AT_cmd>
	send_AT_cmd("AT+CMQTTSSLCFG=0,0\r\n");
 8000cd2:	483e      	ldr	r0, [pc, #248]	; (8000dcc <sim_mqtt_gps_init+0x1f0>)
 8000cd4:	f000 fa00 	bl	80010d8 <send_AT_cmd>

	// 5. Set the Will Topic
	char at_cmd[256];
	sprintf(at_cmd, "AT+CMQTTWILLTOPIC=0,%d\r\n", strlen(topic_will));
 8000cd8:	463b      	mov	r3, r7
 8000cda:	220a      	movs	r2, #10
 8000cdc:	493c      	ldr	r1, [pc, #240]	; (8000dd0 <sim_mqtt_gps_init+0x1f4>)
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f003 ff3c 	bl	8004b5c <siprintf>
	send_AT_cmd(at_cmd);
 8000ce4:	463b      	mov	r3, r7
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 f9f6 	bl	80010d8 <send_AT_cmd>
	send_AT_cmd(topic_will);
 8000cec:	4839      	ldr	r0, [pc, #228]	; (8000dd4 <sim_mqtt_gps_init+0x1f8>)
 8000cee:	f000 f9f3 	bl	80010d8 <send_AT_cmd>

	// 6. Set the Will Message
	sprintf(at_cmd, "AT+CMQTTWILLMSG=0,%d,1\r\n", strlen(will_message));
 8000cf2:	4b39      	ldr	r3, [pc, #228]	; (8000dd8 <sim_mqtt_gps_init+0x1fc>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fa6a 	bl	80001d0 <strlen>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	463b      	mov	r3, r7
 8000d00:	4936      	ldr	r1, [pc, #216]	; (8000ddc <sim_mqtt_gps_init+0x200>)
 8000d02:	4618      	mov	r0, r3
 8000d04:	f003 ff2a 	bl	8004b5c <siprintf>
	send_AT_cmd(at_cmd);
 8000d08:	463b      	mov	r3, r7
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 f9e4 	bl	80010d8 <send_AT_cmd>
	send_AT_cmd(will_message);
 8000d10:	4b31      	ldr	r3, [pc, #196]	; (8000dd8 <sim_mqtt_gps_init+0x1fc>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f000 f9df 	bl	80010d8 <send_AT_cmd>

	// 7. Connect to aws.
	sprintf(at_cmd, "AT+CMQTTCONNECT=0,\"%s:%d\",60,1\r\n", host, port);
 8000d1a:	f242 23b3 	movw	r3, #8883	; 0x22b3
 8000d1e:	4638      	mov	r0, r7
 8000d20:	4a2f      	ldr	r2, [pc, #188]	; (8000de0 <sim_mqtt_gps_init+0x204>)
 8000d22:	4930      	ldr	r1, [pc, #192]	; (8000de4 <sim_mqtt_gps_init+0x208>)
 8000d24:	f003 ff1a 	bl	8004b5c <siprintf>
	send_AT_cmd(at_cmd);
 8000d28:	463b      	mov	r3, r7
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 f9d4 	bl	80010d8 <send_AT_cmd>

	// 8. Subscribe to "topic/cmd"
	sprintf(at_cmd, "AT+CMQTTSUBTOPIC=0,%d,1\r\n", strlen(topic_cmd));
 8000d30:	463b      	mov	r3, r7
 8000d32:	2209      	movs	r2, #9
 8000d34:	492c      	ldr	r1, [pc, #176]	; (8000de8 <sim_mqtt_gps_init+0x20c>)
 8000d36:	4618      	mov	r0, r3
 8000d38:	f003 ff10 	bl	8004b5c <siprintf>
	send_AT_cmd(at_cmd);
 8000d3c:	463b      	mov	r3, r7
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 f9ca 	bl	80010d8 <send_AT_cmd>
	sprintf(at_cmd, "%s\r\n", topic_cmd);
 8000d44:	463b      	mov	r3, r7
 8000d46:	4a29      	ldr	r2, [pc, #164]	; (8000dec <sim_mqtt_gps_init+0x210>)
 8000d48:	4929      	ldr	r1, [pc, #164]	; (8000df0 <sim_mqtt_gps_init+0x214>)
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f003 ff06 	bl	8004b5c <siprintf>
	send_AT_cmd(at_cmd);
 8000d50:	463b      	mov	r3, r7
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 f9c0 	bl	80010d8 <send_AT_cmd>
	send_AT_cmd("AT+CMQTTSUB=0\r\n");
 8000d58:	4826      	ldr	r0, [pc, #152]	; (8000df4 <sim_mqtt_gps_init+0x218>)
 8000d5a:	f000 f9bd 	bl	80010d8 <send_AT_cmd>

	// 9. GPS
	send_AT_cmd("AT+CGPS=0\r\n");
 8000d5e:	4826      	ldr	r0, [pc, #152]	; (8000df8 <sim_mqtt_gps_init+0x21c>)
 8000d60:	f000 f9ba 	bl	80010d8 <send_AT_cmd>

	//Configure GNSS support mode
	send_AT_cmd("AT+CGNSSMODE=15,1\r\n");
 8000d64:	4825      	ldr	r0, [pc, #148]	; (8000dfc <sim_mqtt_gps_init+0x220>)
 8000d66:	f000 f9b7 	bl	80010d8 <send_AT_cmd>

	// Configure NMEA sentence type
	send_AT_cmd("AT+CGPSNMEA=1\r\n");
 8000d6a:	4825      	ldr	r0, [pc, #148]	; (8000e00 <sim_mqtt_gps_init+0x224>)
 8000d6c:	f000 f9b4 	bl	80010d8 <send_AT_cmd>

	// Set NMEA output rate to 10Hz
	send_AT_cmd("AT+CGPSNMEARATE=1\r\n");
 8000d70:	4824      	ldr	r0, [pc, #144]	; (8000e04 <sim_mqtt_gps_init+0x228>)
 8000d72:	f000 f9b1 	bl	80010d8 <send_AT_cmd>
	send_AT_cmd("AT+CGPS=1\r\n");
 8000d76:	4824      	ldr	r0, [pc, #144]	; (8000e08 <sim_mqtt_gps_init+0x22c>)
 8000d78:	f000 f9ae 	bl	80010d8 <send_AT_cmd>

	// NMEA Output to AT port
	send_AT_cmd("AT+CGPSINFOCFG=2,1\r\n");
 8000d7c:	4823      	ldr	r0, [pc, #140]	; (8000e0c <sim_mqtt_gps_init+0x230>)
 8000d7e:	f000 f9ab 	bl	80010d8 <send_AT_cmd>

	// 10. Ready to receive command from AWS byte by byte.
	HAL_UART_Receive_IT(huart_sim, &received_byte, 1);
 8000d82:	4b23      	ldr	r3, [pc, #140]	; (8000e10 <sim_mqtt_gps_init+0x234>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2201      	movs	r2, #1
 8000d88:	4922      	ldr	r1, [pc, #136]	; (8000e14 <sim_mqtt_gps_init+0x238>)
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f002 ff6a 	bl	8003c64 <HAL_UART_Receive_IT>
}
 8000d90:	bf00      	nop
 8000d92:	f607 07dc 	addw	r7, r7, #2268	; 0x8dc
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd90      	pop	{r4, r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	08005574 	.word	0x08005574
 8000da0:	08005580 	.word	0x08005580
 8000da4:	0800558c 	.word	0x0800558c
 8000da8:	08005594 	.word	0x08005594
 8000dac:	08005598 	.word	0x08005598
 8000db0:	080055a8 	.word	0x080055a8
 8000db4:	080055c8 	.word	0x080055c8
 8000db8:	080055e4 	.word	0x080055e4
 8000dbc:	0800560c 	.word	0x0800560c
 8000dc0:	08005638 	.word	0x08005638
 8000dc4:	08005668 	.word	0x08005668
 8000dc8:	08005678 	.word	0x08005678
 8000dcc:	080056a0 	.word	0x080056a0
 8000dd0:	080056b8 	.word	0x080056b8
 8000dd4:	08005878 	.word	0x08005878
 8000dd8:	20000000 	.word	0x20000000
 8000ddc:	080056d4 	.word	0x080056d4
 8000de0:	08005844 	.word	0x08005844
 8000de4:	080056f0 	.word	0x080056f0
 8000de8:	08005714 	.word	0x08005714
 8000dec:	08005884 	.word	0x08005884
 8000df0:	08005730 	.word	0x08005730
 8000df4:	08005738 	.word	0x08005738
 8000df8:	08005748 	.word	0x08005748
 8000dfc:	08005754 	.word	0x08005754
 8000e00:	08005768 	.word	0x08005768
 8000e04:	08005778 	.word	0x08005778
 8000e08:	0800578c 	.word	0x0800578c
 8000e0c:	08005798 	.word	0x08005798
 8000e10:	200004ec 	.word	0x200004ec
 8000e14:	20000154 	.word	0x20000154

08000e18 <sim_handle_byte>:

/**
 * sim_handle_byte will decide what to do to a byte received from the sim module.
 * the byte can either belong to a gpgga string or a command.
 */
void sim_handle_byte() {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0

	// Check if we are just starting to receive gpgga or a command.
	if (received_byte == '$') {
 8000e1c:	4b29      	ldr	r3, [pc, #164]	; (8000ec4 <sim_handle_byte+0xac>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b24      	cmp	r3, #36	; 0x24
 8000e22:	d103      	bne.n	8000e2c <sim_handle_byte+0x14>
		receiving_gpgga = 1;
 8000e24:	4b28      	ldr	r3, [pc, #160]	; (8000ec8 <sim_handle_byte+0xb0>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	701a      	strb	r2, [r3, #0]
 8000e2a:	e006      	b.n	8000e3a <sim_handle_byte+0x22>

	} else if (received_byte == '{') {
 8000e2c:	4b25      	ldr	r3, [pc, #148]	; (8000ec4 <sim_handle_byte+0xac>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b7b      	cmp	r3, #123	; 0x7b
 8000e32:	d102      	bne.n	8000e3a <sim_handle_byte+0x22>
		receiving_cmd = 1;
 8000e34:	4b25      	ldr	r3, [pc, #148]	; (8000ecc <sim_handle_byte+0xb4>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	701a      	strb	r2, [r3, #0]
	}

	if (receiving_cmd == 1) {
 8000e3a:	4b24      	ldr	r3, [pc, #144]	; (8000ecc <sim_handle_byte+0xb4>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d118      	bne.n	8000e76 <sim_handle_byte+0x5e>
		if (received_byte == '}') {
 8000e44:	4b1f      	ldr	r3, [pc, #124]	; (8000ec4 <sim_handle_byte+0xac>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b7d      	cmp	r3, #125	; 0x7d
 8000e4a:	d108      	bne.n	8000e5e <sim_handle_byte+0x46>
			// Command completed.
			cmd_received = 1;
 8000e4c:	4b20      	ldr	r3, [pc, #128]	; (8000ed0 <sim_handle_byte+0xb8>)
 8000e4e:	2201      	movs	r2, #1
 8000e50:	701a      	strb	r2, [r3, #0]
			receiving_cmd = 0;
 8000e52:	4b1e      	ldr	r3, [pc, #120]	; (8000ecc <sim_handle_byte+0xb4>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	701a      	strb	r2, [r3, #0]
			extract_cmd();
 8000e58:	f000 fa44 	bl	80012e4 <extract_cmd>
 8000e5c:	e028      	b.n	8000eb0 <sim_handle_byte+0x98>
		} else {
			// Command not yet completed.
			cmd_buffer[cmd_buffer_index++] = received_byte;
 8000e5e:	4b1d      	ldr	r3, [pc, #116]	; (8000ed4 <sim_handle_byte+0xbc>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	1c5a      	adds	r2, r3, #1
 8000e64:	b2d1      	uxtb	r1, r2
 8000e66:	4a1b      	ldr	r2, [pc, #108]	; (8000ed4 <sim_handle_byte+0xbc>)
 8000e68:	7011      	strb	r1, [r2, #0]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <sim_handle_byte+0xac>)
 8000e6e:	7819      	ldrb	r1, [r3, #0]
 8000e70:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <sim_handle_byte+0xc0>)
 8000e72:	5499      	strb	r1, [r3, r2]
 8000e74:	e01c      	b.n	8000eb0 <sim_handle_byte+0x98>
		}

	} else if (receiving_gpgga == 1) {
 8000e76:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <sim_handle_byte+0xb0>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d117      	bne.n	8000eb0 <sim_handle_byte+0x98>
		if (received_byte == '\n') {
 8000e80:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <sim_handle_byte+0xac>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b0a      	cmp	r3, #10
 8000e86:	d108      	bne.n	8000e9a <sim_handle_byte+0x82>
			// GPGGA string completed.
			gpgga_received = 1;
 8000e88:	4b14      	ldr	r3, [pc, #80]	; (8000edc <sim_handle_byte+0xc4>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	701a      	strb	r2, [r3, #0]
			receiving_gpgga = 0;
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <sim_handle_byte+0xb0>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]
			extract_gpgga();
 8000e94:	f000 fa80 	bl	8001398 <extract_gpgga>
 8000e98:	e00a      	b.n	8000eb0 <sim_handle_byte+0x98>
		} else {
			// string not yet completed.
			gpgga_buffer[gpgga_buffer_index++] = received_byte;
 8000e9a:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <sim_handle_byte+0xc8>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	1c5a      	adds	r2, r3, #1
 8000ea0:	b2d1      	uxtb	r1, r2
 8000ea2:	4a0f      	ldr	r2, [pc, #60]	; (8000ee0 <sim_handle_byte+0xc8>)
 8000ea4:	7011      	strb	r1, [r2, #0]
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <sim_handle_byte+0xac>)
 8000eaa:	7819      	ldrb	r1, [r3, #0]
 8000eac:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <sim_handle_byte+0xcc>)
 8000eae:	5499      	strb	r1, [r3, r2]
		}
	}
	HAL_UART_Receive_IT(huart_sim, &received_byte, 1);
 8000eb0:	4b0d      	ldr	r3, [pc, #52]	; (8000ee8 <sim_handle_byte+0xd0>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	4903      	ldr	r1, [pc, #12]	; (8000ec4 <sim_handle_byte+0xac>)
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f002 fed3 	bl	8003c64 <HAL_UART_Receive_IT>
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000154 	.word	0x20000154
 8000ec8:	200004ea 	.word	0x200004ea
 8000ecc:	2000028a 	.word	0x2000028a
 8000ed0:	20000289 	.word	0x20000289
 8000ed4:	20000220 	.word	0x20000220
 8000ed8:	20000158 	.word	0x20000158
 8000edc:	200004e9 	.word	0x200004e9
 8000ee0:	200003b8 	.word	0x200003b8
 8000ee4:	2000028c 	.word	0x2000028c
 8000ee8:	200004ec 	.word	0x200004ec

08000eec <sim_process_received_data>:

/**
 * Process the data after all bytes have been received.
 */
void sim_process_received_data(void) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0

	// 1. Run motor command.
	if (cmd_received) {
 8000ef0:	4b6a      	ldr	r3, [pc, #424]	; (800109c <sim_process_received_data+0x1b0>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	f000 80b9 	beq.w	800106e <sim_process_received_data+0x182>
		// Reset flag.
		cmd_received = 0;
 8000efc:	4b67      	ldr	r3, [pc, #412]	; (800109c <sim_process_received_data+0x1b0>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(huart_log, (uint8_t*) cmd_msg, cmd_msg_len,
 8000f02:	4b67      	ldr	r3, [pc, #412]	; (80010a0 <sim_process_received_data+0x1b4>)
 8000f04:	6818      	ldr	r0, [r3, #0]
 8000f06:	4b67      	ldr	r3, [pc, #412]	; (80010a4 <sim_process_received_data+0x1b8>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	b29a      	uxth	r2, r3
 8000f0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f10:	4965      	ldr	r1, [pc, #404]	; (80010a8 <sim_process_received_data+0x1bc>)
 8000f12:	f002 fd85 	bl	8003a20 <HAL_UART_Transmit>
		HAL_MAX_DELAY);

		if (strstr((char*) cmd_msg, "forward")) {
 8000f16:	4965      	ldr	r1, [pc, #404]	; (80010ac <sim_process_received_data+0x1c0>)
 8000f18:	4863      	ldr	r0, [pc, #396]	; (80010a8 <sim_process_received_data+0x1bc>)
 8000f1a:	f003 fe52 	bl	8004bc2 <strstr>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d031      	beq.n	8000f88 <sim_process_received_data+0x9c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8000f24:	2200      	movs	r2, #0
 8000f26:	2110      	movs	r1, #16
 8000f28:	4861      	ldr	r0, [pc, #388]	; (80010b0 <sim_process_received_data+0x1c4>)
 8000f2a:	f001 f825 	bl	8001f78 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000f2e:	2201      	movs	r2, #1
 8000f30:	2120      	movs	r1, #32
 8000f32:	485f      	ldr	r0, [pc, #380]	; (80010b0 <sim_process_received_data+0x1c4>)
 8000f34:	f001 f820 	bl	8001f78 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(pwm_timer, tim_channel, 40000);
 8000f38:	4b5e      	ldr	r3, [pc, #376]	; (80010b4 <sim_process_received_data+0x1c8>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d106      	bne.n	8000f4e <sim_process_received_data+0x62>
 8000f40:	4b5d      	ldr	r3, [pc, #372]	; (80010b8 <sim_process_received_data+0x1cc>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000f4a:	635a      	str	r2, [r3, #52]	; 0x34
 8000f4c:	e089      	b.n	8001062 <sim_process_received_data+0x176>
 8000f4e:	4b59      	ldr	r3, [pc, #356]	; (80010b4 <sim_process_received_data+0x1c8>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2b04      	cmp	r3, #4
 8000f54:	d106      	bne.n	8000f64 <sim_process_received_data+0x78>
 8000f56:	4b58      	ldr	r3, [pc, #352]	; (80010b8 <sim_process_received_data+0x1cc>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8000f60:	6393      	str	r3, [r2, #56]	; 0x38
 8000f62:	e07e      	b.n	8001062 <sim_process_received_data+0x176>
 8000f64:	4b53      	ldr	r3, [pc, #332]	; (80010b4 <sim_process_received_data+0x1c8>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b08      	cmp	r3, #8
 8000f6a:	d106      	bne.n	8000f7a <sim_process_received_data+0x8e>
 8000f6c:	4b52      	ldr	r3, [pc, #328]	; (80010b8 <sim_process_received_data+0x1cc>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	f649 4340 	movw	r3, #40000	; 0x9c40
 8000f76:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000f78:	e073      	b.n	8001062 <sim_process_received_data+0x176>
 8000f7a:	4b4f      	ldr	r3, [pc, #316]	; (80010b8 <sim_process_received_data+0x1cc>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	f649 4340 	movw	r3, #40000	; 0x9c40
 8000f84:	6413      	str	r3, [r2, #64]	; 0x40
 8000f86:	e06c      	b.n	8001062 <sim_process_received_data+0x176>

		} else if (strstr((char*) cmd_msg, "backward")) {
 8000f88:	494c      	ldr	r1, [pc, #304]	; (80010bc <sim_process_received_data+0x1d0>)
 8000f8a:	4847      	ldr	r0, [pc, #284]	; (80010a8 <sim_process_received_data+0x1bc>)
 8000f8c:	f003 fe19 	bl	8004bc2 <strstr>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d031      	beq.n	8000ffa <sim_process_received_data+0x10e>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8000f96:	2201      	movs	r2, #1
 8000f98:	2110      	movs	r1, #16
 8000f9a:	4845      	ldr	r0, [pc, #276]	; (80010b0 <sim_process_received_data+0x1c4>)
 8000f9c:	f000 ffec 	bl	8001f78 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2120      	movs	r1, #32
 8000fa4:	4842      	ldr	r0, [pc, #264]	; (80010b0 <sim_process_received_data+0x1c4>)
 8000fa6:	f000 ffe7 	bl	8001f78 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(pwm_timer, tim_channel, 10000);
 8000faa:	4b42      	ldr	r3, [pc, #264]	; (80010b4 <sim_process_received_data+0x1c8>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d106      	bne.n	8000fc0 <sim_process_received_data+0xd4>
 8000fb2:	4b41      	ldr	r3, [pc, #260]	; (80010b8 <sim_process_received_data+0x1cc>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f242 7210 	movw	r2, #10000	; 0x2710
 8000fbc:	635a      	str	r2, [r3, #52]	; 0x34
 8000fbe:	e050      	b.n	8001062 <sim_process_received_data+0x176>
 8000fc0:	4b3c      	ldr	r3, [pc, #240]	; (80010b4 <sim_process_received_data+0x1c8>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2b04      	cmp	r3, #4
 8000fc6:	d106      	bne.n	8000fd6 <sim_process_received_data+0xea>
 8000fc8:	4b3b      	ldr	r3, [pc, #236]	; (80010b8 <sim_process_received_data+0x1cc>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	f242 7310 	movw	r3, #10000	; 0x2710
 8000fd2:	6393      	str	r3, [r2, #56]	; 0x38
 8000fd4:	e045      	b.n	8001062 <sim_process_received_data+0x176>
 8000fd6:	4b37      	ldr	r3, [pc, #220]	; (80010b4 <sim_process_received_data+0x1c8>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2b08      	cmp	r3, #8
 8000fdc:	d106      	bne.n	8000fec <sim_process_received_data+0x100>
 8000fde:	4b36      	ldr	r3, [pc, #216]	; (80010b8 <sim_process_received_data+0x1cc>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	f242 7310 	movw	r3, #10000	; 0x2710
 8000fe8:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000fea:	e03a      	b.n	8001062 <sim_process_received_data+0x176>
 8000fec:	4b32      	ldr	r3, [pc, #200]	; (80010b8 <sim_process_received_data+0x1cc>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	f242 7310 	movw	r3, #10000	; 0x2710
 8000ff6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff8:	e033      	b.n	8001062 <sim_process_received_data+0x176>

		} else if (strstr((char*) cmd_msg, "stop")) {
 8000ffa:	4931      	ldr	r1, [pc, #196]	; (80010c0 <sim_process_received_data+0x1d4>)
 8000ffc:	482a      	ldr	r0, [pc, #168]	; (80010a8 <sim_process_received_data+0x1bc>)
 8000ffe:	f003 fde0 	bl	8004bc2 <strstr>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d02c      	beq.n	8001062 <sim_process_received_data+0x176>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8001008:	2200      	movs	r2, #0
 800100a:	2110      	movs	r1, #16
 800100c:	4828      	ldr	r0, [pc, #160]	; (80010b0 <sim_process_received_data+0x1c4>)
 800100e:	f000 ffb3 	bl	8001f78 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8001012:	2200      	movs	r2, #0
 8001014:	2120      	movs	r1, #32
 8001016:	4826      	ldr	r0, [pc, #152]	; (80010b0 <sim_process_received_data+0x1c4>)
 8001018:	f000 ffae 	bl	8001f78 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(pwm_timer, tim_channel, 0);
 800101c:	4b25      	ldr	r3, [pc, #148]	; (80010b4 <sim_process_received_data+0x1c8>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d105      	bne.n	8001030 <sim_process_received_data+0x144>
 8001024:	4b24      	ldr	r3, [pc, #144]	; (80010b8 <sim_process_received_data+0x1cc>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2200      	movs	r2, #0
 800102c:	635a      	str	r2, [r3, #52]	; 0x34
 800102e:	e018      	b.n	8001062 <sim_process_received_data+0x176>
 8001030:	4b20      	ldr	r3, [pc, #128]	; (80010b4 <sim_process_received_data+0x1c8>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b04      	cmp	r3, #4
 8001036:	d105      	bne.n	8001044 <sim_process_received_data+0x158>
 8001038:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <sim_process_received_data+0x1cc>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	2300      	movs	r3, #0
 8001040:	6393      	str	r3, [r2, #56]	; 0x38
 8001042:	e00e      	b.n	8001062 <sim_process_received_data+0x176>
 8001044:	4b1b      	ldr	r3, [pc, #108]	; (80010b4 <sim_process_received_data+0x1c8>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2b08      	cmp	r3, #8
 800104a:	d105      	bne.n	8001058 <sim_process_received_data+0x16c>
 800104c:	4b1a      	ldr	r3, [pc, #104]	; (80010b8 <sim_process_received_data+0x1cc>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	2300      	movs	r3, #0
 8001054:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001056:	e004      	b.n	8001062 <sim_process_received_data+0x176>
 8001058:	4b17      	ldr	r3, [pc, #92]	; (80010b8 <sim_process_received_data+0x1cc>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	2300      	movs	r3, #0
 8001060:	6413      	str	r3, [r2, #64]	; 0x40

		}

		// Reset buffer.
		cmd_buffer_index = 0;
 8001062:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <sim_process_received_data+0x1d8>)
 8001064:	2200      	movs	r2, #0
 8001066:	701a      	strb	r2, [r3, #0]
		cmd_msg_len = 0;
 8001068:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <sim_process_received_data+0x1b8>)
 800106a:	2200      	movs	r2, #0
 800106c:	701a      	strb	r2, [r3, #0]
	}

	// 2. Publish GPGGA message to MQTT.
	if (gpgga_received) {
 800106e:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <sim_process_received_data+0x1dc>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	b2db      	uxtb	r3, r3
 8001074:	2b00      	cmp	r3, #0
 8001076:	d00e      	beq.n	8001096 <sim_process_received_data+0x1aa>
		// Reset flag.
		gpgga_received = 0;
 8001078:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <sim_process_received_data+0x1dc>)
 800107a:	2200      	movs	r2, #0
 800107c:	701a      	strb	r2, [r3, #0]

		publish_mqtt_msg(gpgga_msg, gpgga_msg_len);
 800107e:	4b13      	ldr	r3, [pc, #76]	; (80010cc <sim_process_received_data+0x1e0>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	4619      	mov	r1, r3
 8001084:	4812      	ldr	r0, [pc, #72]	; (80010d0 <sim_process_received_data+0x1e4>)
 8001086:	f000 f887 	bl	8001198 <publish_mqtt_msg>

		// Reset buffer.
		gpgga_buffer_index = 0;
 800108a:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <sim_process_received_data+0x1e8>)
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]
		gpgga_msg_len = 0;
 8001090:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <sim_process_received_data+0x1e0>)
 8001092:	2200      	movs	r2, #0
 8001094:	701a      	strb	r2, [r3, #0]
	}
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000289 	.word	0x20000289
 80010a0:	200004f0 	.word	0x200004f0
 80010a4:	20000288 	.word	0x20000288
 80010a8:	20000224 	.word	0x20000224
 80010ac:	080057b0 	.word	0x080057b0
 80010b0:	40020400 	.word	0x40020400
 80010b4:	200004f8 	.word	0x200004f8
 80010b8:	200004f4 	.word	0x200004f4
 80010bc:	080057b8 	.word	0x080057b8
 80010c0:	080057c4 	.word	0x080057c4
 80010c4:	20000220 	.word	0x20000220
 80010c8:	200004e9 	.word	0x200004e9
 80010cc:	200004e8 	.word	0x200004e8
 80010d0:	200003bc 	.word	0x200003bc
 80010d4:	200003b8 	.word	0x200003b8

080010d8 <send_AT_cmd>:


/**
 * Send an AT command to SIM module, and log the command and response to UART.
 */
static void send_AT_cmd(const char *cmd) {
 80010d8:	b590      	push	{r4, r7, lr}
 80010da:	f5ad 5d9c 	sub.w	sp, sp, #4992	; 0x1380
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80010e6:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 80010ea:	6018      	str	r0, [r3, #0]

	// Send the AT command to SIM7600.
	HAL_UART_Transmit(huart_sim, (uint8_t*) cmd, strlen(cmd), 2000);
 80010ec:	4b27      	ldr	r3, [pc, #156]	; (800118c <send_AT_cmd+0xb4>)
 80010ee:	681c      	ldr	r4, [r3, #0]
 80010f0:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80010f4:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 80010f8:	6818      	ldr	r0, [r3, #0]
 80010fa:	f7ff f869 	bl	80001d0 <strlen>
 80010fe:	4603      	mov	r3, r0
 8001100:	b29a      	uxth	r2, r3
 8001102:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8001106:	f5a3 7163 	sub.w	r1, r3, #908	; 0x38c
 800110a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800110e:	6809      	ldr	r1, [r1, #0]
 8001110:	4620      	mov	r0, r4
 8001112:	f002 fc85 	bl	8003a20 <HAL_UART_Transmit>

	uint8_t response_at_cmd[2000] = { };
 8001116:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800111a:	f103 0310 	add.w	r3, r3, #16
 800111e:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	3304      	adds	r3, #4
 8001128:	f240 72cc 	movw	r2, #1996	; 0x7cc
 800112c:	2100      	movs	r1, #0
 800112e:	4618      	mov	r0, r3
 8001130:	f003 fd5d 	bl	8004bee <memset>
	HAL_UART_Receive(huart_sim, (uint8_t*) response_at_cmd,
 8001134:	4b15      	ldr	r3, [pc, #84]	; (800118c <send_AT_cmd+0xb4>)
 8001136:	6818      	ldr	r0, [r3, #0]
 8001138:	f507 613c 	add.w	r1, r7, #3008	; 0xbc0
 800113c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001140:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001144:	f002 fcf7 	bl	8003b36 <HAL_UART_Receive>
			sizeof(response_at_cmd), 2000);

	// Log the response received by the SIM module.
	char status_msg[3000];
	sprintf(status_msg, "-->Command and res:\n%s\r\n", response_at_cmd);
 8001148:	f507 623c 	add.w	r2, r7, #3008	; 0xbc0
 800114c:	f107 0310 	add.w	r3, r7, #16
 8001150:	3b08      	subs	r3, #8
 8001152:	490f      	ldr	r1, [pc, #60]	; (8001190 <send_AT_cmd+0xb8>)
 8001154:	4618      	mov	r0, r3
 8001156:	f003 fd01 	bl	8004b5c <siprintf>
	HAL_UART_Transmit(huart_log, (uint8_t*) status_msg, strlen(status_msg),
 800115a:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <send_AT_cmd+0xbc>)
 800115c:	681c      	ldr	r4, [r3, #0]
 800115e:	f107 0310 	add.w	r3, r7, #16
 8001162:	3b08      	subs	r3, #8
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff f833 	bl	80001d0 <strlen>
 800116a:	4603      	mov	r3, r0
 800116c:	b29a      	uxth	r2, r3
 800116e:	f107 0110 	add.w	r1, r7, #16
 8001172:	3908      	subs	r1, #8
 8001174:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001178:	4620      	mov	r0, r4
 800117a:	f002 fc51 	bl	8003a20 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
}
 800117e:	bf00      	nop
 8001180:	f507 579c 	add.w	r7, r7, #4992	; 0x1380
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	bd90      	pop	{r4, r7, pc}
 800118a:	bf00      	nop
 800118c:	200004ec 	.word	0x200004ec
 8001190:	080057cc 	.word	0x080057cc
 8001194:	200004f0 	.word	0x200004f0

08001198 <publish_mqtt_msg>:

/**
 * Publish message to mqtt topic.
 * The topic is currently default to topic/sensor.
 */
static void publish_mqtt_msg(char *msg, uint8_t msg_length) {
 8001198:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800119c:	b0c7      	sub	sp, #284	; 0x11c
 800119e:	af00      	add	r7, sp, #0
 80011a0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80011a4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80011a8:	6018      	str	r0, [r3, #0]
 80011aa:	460a      	mov	r2, r1
 80011ac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80011b0:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 80011b4:	701a      	strb	r2, [r3, #0]
 80011b6:	466b      	mov	r3, sp
 80011b8:	461e      	mov	r6, r3

	// Create JSON message with GPGGA data
	uint8_t json_msg_len = msg_length + strlen("{\n\"message\":\"\"\n}");
 80011ba:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80011be:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	3310      	adds	r3, #16
 80011c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	char json_msg[json_msg_len];
 80011ca:	f897 1117 	ldrb.w	r1, [r7, #279]	; 0x117
 80011ce:	460b      	mov	r3, r1
 80011d0:	3b01      	subs	r3, #1
 80011d2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80011d6:	b2cb      	uxtb	r3, r1
 80011d8:	2200      	movs	r2, #0
 80011da:	4698      	mov	r8, r3
 80011dc:	4691      	mov	r9, r2
 80011de:	f04f 0200 	mov.w	r2, #0
 80011e2:	f04f 0300 	mov.w	r3, #0
 80011e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80011ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80011ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80011f2:	b2cb      	uxtb	r3, r1
 80011f4:	2200      	movs	r2, #0
 80011f6:	461c      	mov	r4, r3
 80011f8:	4615      	mov	r5, r2
 80011fa:	f04f 0200 	mov.w	r2, #0
 80011fe:	f04f 0300 	mov.w	r3, #0
 8001202:	00eb      	lsls	r3, r5, #3
 8001204:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001208:	00e2      	lsls	r2, r4, #3
 800120a:	460b      	mov	r3, r1
 800120c:	3307      	adds	r3, #7
 800120e:	08db      	lsrs	r3, r3, #3
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	ebad 0d03 	sub.w	sp, sp, r3
 8001216:	466b      	mov	r3, sp
 8001218:	3300      	adds	r3, #0
 800121a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(json_msg, "{\n\"message\":\"%s\"\n}", msg);
 800121e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001222:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	4928      	ldr	r1, [pc, #160]	; (80012cc <publish_mqtt_msg+0x134>)
 800122a:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800122e:	f003 fc95 	bl	8004b5c <siprintf>

	// Tell SIM that we will be sending a a message under this topic.
	char at_cmd[256];
	sprintf(at_cmd, "AT+CMQTTTOPIC=0,%d\r\n", strlen(topic_sensor));
 8001232:	f107 030c 	add.w	r3, r7, #12
 8001236:	220c      	movs	r2, #12
 8001238:	4925      	ldr	r1, [pc, #148]	; (80012d0 <publish_mqtt_msg+0x138>)
 800123a:	4618      	mov	r0, r3
 800123c:	f003 fc8e 	bl	8004b5c <siprintf>
	send_AT_cmd(at_cmd);
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff47 	bl	80010d8 <send_AT_cmd>
	sprintf(at_cmd, "%s\r\n", topic_sensor);
 800124a:	f107 030c 	add.w	r3, r7, #12
 800124e:	4a21      	ldr	r2, [pc, #132]	; (80012d4 <publish_mqtt_msg+0x13c>)
 8001250:	4921      	ldr	r1, [pc, #132]	; (80012d8 <publish_mqtt_msg+0x140>)
 8001252:	4618      	mov	r0, r3
 8001254:	f003 fc82 	bl	8004b5c <siprintf>
	send_AT_cmd(at_cmd);
 8001258:	f107 030c 	add.w	r3, r7, #12
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff3b 	bl	80010d8 <send_AT_cmd>

	// Define the payload.
	sprintf(at_cmd, "AT+CMQTTPAYLOAD=0,%d\r\n", strlen(msg));
 8001262:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001266:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800126a:	6818      	ldr	r0, [r3, #0]
 800126c:	f7fe ffb0 	bl	80001d0 <strlen>
 8001270:	4602      	mov	r2, r0
 8001272:	f107 030c 	add.w	r3, r7, #12
 8001276:	4919      	ldr	r1, [pc, #100]	; (80012dc <publish_mqtt_msg+0x144>)
 8001278:	4618      	mov	r0, r3
 800127a:	f003 fc6f 	bl	8004b5c <siprintf>
	send_AT_cmd(at_cmd);
 800127e:	f107 030c 	add.w	r3, r7, #12
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff ff28 	bl	80010d8 <send_AT_cmd>
	send_AT_cmd(msg);
 8001288:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800128c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001290:	6818      	ldr	r0, [r3, #0]
 8001292:	f7ff ff21 	bl	80010d8 <send_AT_cmd>

	// Publish the message.
	sprintf(at_cmd, "AT+CMQTTPUB=0,1,%d\r\n", strlen(msg));
 8001296:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800129a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800129e:	6818      	ldr	r0, [r3, #0]
 80012a0:	f7fe ff96 	bl	80001d0 <strlen>
 80012a4:	4602      	mov	r2, r0
 80012a6:	f107 030c 	add.w	r3, r7, #12
 80012aa:	490d      	ldr	r1, [pc, #52]	; (80012e0 <publish_mqtt_msg+0x148>)
 80012ac:	4618      	mov	r0, r3
 80012ae:	f003 fc55 	bl	8004b5c <siprintf>
	send_AT_cmd(at_cmd);
 80012b2:	f107 030c 	add.w	r3, r7, #12
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff ff0e 	bl	80010d8 <send_AT_cmd>
 80012bc:	46b5      	mov	sp, r6
}
 80012be:	bf00      	nop
 80012c0:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80012c4:	46bd      	mov	sp, r7
 80012c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80012ca:	bf00      	nop
 80012cc:	080057e8 	.word	0x080057e8
 80012d0:	080057fc 	.word	0x080057fc
 80012d4:	08005890 	.word	0x08005890
 80012d8:	08005730 	.word	0x08005730
 80012dc:	08005814 	.word	0x08005814
 80012e0:	0800582c 	.word	0x0800582c

080012e4 <extract_cmd>:


/**
 * Extract only the relevant string from all the command bytes received.
 */
static void extract_cmd(void) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0

	cmd_buffer[cmd_buffer_index++] = '\0';
 80012ea:	4b27      	ldr	r3, [pc, #156]	; (8001388 <extract_cmd+0xa4>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	1c5a      	adds	r2, r3, #1
 80012f0:	b2d1      	uxtb	r1, r2
 80012f2:	4a25      	ldr	r2, [pc, #148]	; (8001388 <extract_cmd+0xa4>)
 80012f4:	7011      	strb	r1, [r2, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	4b24      	ldr	r3, [pc, #144]	; (800138c <extract_cmd+0xa8>)
 80012fa:	2100      	movs	r1, #0
 80012fc:	5499      	strb	r1, [r3, r2]

	// Find the command string e.g. "forward", "backward", etc.
	// Get the start and and index of the message
	// end index is the index of the last quote
	uint8_t end_i = cmd_buffer_index - 2;
 80012fe:	4b22      	ldr	r3, [pc, #136]	; (8001388 <extract_cmd+0xa4>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	3b02      	subs	r3, #2
 8001304:	71bb      	strb	r3, [r7, #6]
	uint8_t start_i = end_i - 1;
 8001306:	79bb      	ldrb	r3, [r7, #6]
 8001308:	3b01      	subs	r3, #1
 800130a:	71fb      	strb	r3, [r7, #7]
	for (; start_i > 0; start_i--) {
 800130c:	e00c      	b.n	8001328 <extract_cmd+0x44>
		// if character is not a quote, skip.
		if (cmd_buffer[start_i] != '"') {
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	4a1e      	ldr	r2, [pc, #120]	; (800138c <extract_cmd+0xa8>)
 8001312:	5cd3      	ldrb	r3, [r2, r3]
 8001314:	2b22      	cmp	r3, #34	; 0x22
 8001316:	d103      	bne.n	8001320 <extract_cmd+0x3c>
			continue;
		}
		// start_i now points to the first character.
		start_i += 1;
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	3301      	adds	r3, #1
 800131c:	71fb      	strb	r3, [r7, #7]
		break;
 800131e:	e006      	b.n	800132e <extract_cmd+0x4a>
			continue;
 8001320:	bf00      	nop
	for (; start_i > 0; start_i--) {
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	3b01      	subs	r3, #1
 8001326:	71fb      	strb	r3, [r7, #7]
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1ef      	bne.n	800130e <extract_cmd+0x2a>
	}

	// Copy the message from buffer to final array.
	cmd_msg_len = end_i - start_i;
 800132e:	79ba      	ldrb	r2, [r7, #6]
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4b16      	ldr	r3, [pc, #88]	; (8001390 <extract_cmd+0xac>)
 8001338:	701a      	strb	r2, [r3, #0]
	if (cmd_msg_len > sizeof(cmd_msg) - 1) {
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <extract_cmd+0xac>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b63      	cmp	r3, #99	; 0x63
 8001340:	d902      	bls.n	8001348 <extract_cmd+0x64>
		cmd_msg_len = sizeof(cmd_msg) - 1; // Prevent buffer overflow
 8001342:	4b13      	ldr	r3, [pc, #76]	; (8001390 <extract_cmd+0xac>)
 8001344:	2263      	movs	r2, #99	; 0x63
 8001346:	701a      	strb	r2, [r3, #0]
	}

	strncpy(cmd_msg, (char*) cmd_buffer + start_i, cmd_msg_len);
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	4a10      	ldr	r2, [pc, #64]	; (800138c <extract_cmd+0xa8>)
 800134c:	4413      	add	r3, r2
 800134e:	4a10      	ldr	r2, [pc, #64]	; (8001390 <extract_cmd+0xac>)
 8001350:	7812      	ldrb	r2, [r2, #0]
 8001352:	4619      	mov	r1, r3
 8001354:	480f      	ldr	r0, [pc, #60]	; (8001394 <extract_cmd+0xb0>)
 8001356:	f003 fc21 	bl	8004b9c <strncpy>
	cmd_msg[cmd_msg_len] = '\n';
 800135a:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <extract_cmd+0xac>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	461a      	mov	r2, r3
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <extract_cmd+0xb0>)
 8001362:	210a      	movs	r1, #10
 8001364:	5499      	strb	r1, [r3, r2]
	cmd_msg[cmd_msg_len + 1] = '\0';
 8001366:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <extract_cmd+0xac>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	3301      	adds	r3, #1
 800136c:	4a09      	ldr	r2, [pc, #36]	; (8001394 <extract_cmd+0xb0>)
 800136e:	2100      	movs	r1, #0
 8001370:	54d1      	strb	r1, [r2, r3]
	cmd_msg_len++;
 8001372:	4b07      	ldr	r3, [pc, #28]	; (8001390 <extract_cmd+0xac>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	3301      	adds	r3, #1
 8001378:	b2da      	uxtb	r2, r3
 800137a:	4b05      	ldr	r3, [pc, #20]	; (8001390 <extract_cmd+0xac>)
 800137c:	701a      	strb	r2, [r3, #0]

}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000220 	.word	0x20000220
 800138c:	20000158 	.word	0x20000158
 8001390:	20000288 	.word	0x20000288
 8001394:	20000224 	.word	0x20000224

08001398 <extract_gpgga>:

/**
 * Extract only the relevant string from all the gpgga bytes received.
 */
static void extract_gpgga(void) {
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0

	// Copy the message from buffer to final array.
	gpgga_msg_len = gpgga_buffer_index;
 800139c:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <extract_gpgga+0x2c>)
 800139e:	781a      	ldrb	r2, [r3, #0]
 80013a0:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <extract_gpgga+0x30>)
 80013a2:	701a      	strb	r2, [r3, #0]
	strncpy(gpgga_msg, (char*) gpgga_buffer, gpgga_msg_len);
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <extract_gpgga+0x30>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	461a      	mov	r2, r3
 80013aa:	4908      	ldr	r1, [pc, #32]	; (80013cc <extract_gpgga+0x34>)
 80013ac:	4808      	ldr	r0, [pc, #32]	; (80013d0 <extract_gpgga+0x38>)
 80013ae:	f003 fbf5 	bl	8004b9c <strncpy>
	gpgga_msg[gpgga_msg_len] = '\0';
 80013b2:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <extract_gpgga+0x30>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	461a      	mov	r2, r3
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <extract_gpgga+0x38>)
 80013ba:	2100      	movs	r1, #0
 80013bc:	5499      	strb	r1, [r3, r2]

}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	200003b8 	.word	0x200003b8
 80013c8:	200004e8 	.word	0x200004e8
 80013cc:	2000028c 	.word	0x2000028c
 80013d0:	200003bc 	.word	0x200003bc

080013d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <HAL_MspInit+0x4c>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	4a0f      	ldr	r2, [pc, #60]	; (8001420 <HAL_MspInit+0x4c>)
 80013e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ea:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <HAL_MspInit+0x4c>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	603b      	str	r3, [r7, #0]
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <HAL_MspInit+0x4c>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	4a08      	ldr	r2, [pc, #32]	; (8001420 <HAL_MspInit+0x4c>)
 8001400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001404:	6413      	str	r3, [r2, #64]	; 0x40
 8001406:	4b06      	ldr	r3, [pc, #24]	; (8001420 <HAL_MspInit+0x4c>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140e:	603b      	str	r3, [r7, #0]
 8001410:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001412:	2007      	movs	r0, #7
 8001414:	f000 fb40 	bl	8001a98 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40023800 	.word	0x40023800

08001424 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a0e      	ldr	r2, [pc, #56]	; (800146c <HAL_TIM_Base_MspInit+0x48>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d115      	bne.n	8001462 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	4b0d      	ldr	r3, [pc, #52]	; (8001470 <HAL_TIM_Base_MspInit+0x4c>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	4a0c      	ldr	r2, [pc, #48]	; (8001470 <HAL_TIM_Base_MspInit+0x4c>)
 8001440:	f043 0304 	orr.w	r3, r3, #4
 8001444:	6413      	str	r3, [r2, #64]	; 0x40
 8001446:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <HAL_TIM_Base_MspInit+0x4c>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	f003 0304 	and.w	r3, r3, #4
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001452:	2200      	movs	r2, #0
 8001454:	2100      	movs	r1, #0
 8001456:	201e      	movs	r0, #30
 8001458:	f000 fb29 	bl	8001aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800145c:	201e      	movs	r0, #30
 800145e:	f000 fb42 	bl	8001ae6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001462:	bf00      	nop
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40000800 	.word	0x40000800
 8001470:	40023800 	.word	0x40023800

08001474 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b088      	sub	sp, #32
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147c:	f107 030c 	add.w	r3, r7, #12
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a12      	ldr	r2, [pc, #72]	; (80014dc <HAL_TIM_MspPostInit+0x68>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d11e      	bne.n	80014d4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	60bb      	str	r3, [r7, #8]
 800149a:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <HAL_TIM_MspPostInit+0x6c>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a10      	ldr	r2, [pc, #64]	; (80014e0 <HAL_TIM_MspPostInit+0x6c>)
 80014a0:	f043 0308 	orr.w	r3, r3, #8
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <HAL_TIM_MspPostInit+0x6c>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	2302      	movs	r3, #2
 80014ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	2300      	movs	r3, #0
 80014c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80014c4:	2302      	movs	r3, #2
 80014c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014c8:	f107 030c 	add.w	r3, r7, #12
 80014cc:	4619      	mov	r1, r3
 80014ce:	4805      	ldr	r0, [pc, #20]	; (80014e4 <HAL_TIM_MspPostInit+0x70>)
 80014d0:	f000 fbb6 	bl	8001c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80014d4:	bf00      	nop
 80014d6:	3720      	adds	r7, #32
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40000800 	.word	0x40000800
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40020c00 	.word	0x40020c00

080014e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08c      	sub	sp, #48	; 0x30
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f0:	f107 031c 	add.w	r3, r7, #28
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a4a      	ldr	r2, [pc, #296]	; (8001630 <HAL_UART_MspInit+0x148>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d134      	bne.n	8001574 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	61bb      	str	r3, [r7, #24]
 800150e:	4b49      	ldr	r3, [pc, #292]	; (8001634 <HAL_UART_MspInit+0x14c>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	4a48      	ldr	r2, [pc, #288]	; (8001634 <HAL_UART_MspInit+0x14c>)
 8001514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001518:	6413      	str	r3, [r2, #64]	; 0x40
 800151a:	4b46      	ldr	r3, [pc, #280]	; (8001634 <HAL_UART_MspInit+0x14c>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001522:	61bb      	str	r3, [r7, #24]
 8001524:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	617b      	str	r3, [r7, #20]
 800152a:	4b42      	ldr	r3, [pc, #264]	; (8001634 <HAL_UART_MspInit+0x14c>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4a41      	ldr	r2, [pc, #260]	; (8001634 <HAL_UART_MspInit+0x14c>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4b3f      	ldr	r3, [pc, #252]	; (8001634 <HAL_UART_MspInit+0x14c>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001542:	230c      	movs	r3, #12
 8001544:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	2302      	movs	r3, #2
 8001548:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154e:	2303      	movs	r3, #3
 8001550:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001552:	2307      	movs	r3, #7
 8001554:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001556:	f107 031c 	add.w	r3, r7, #28
 800155a:	4619      	mov	r1, r3
 800155c:	4836      	ldr	r0, [pc, #216]	; (8001638 <HAL_UART_MspInit+0x150>)
 800155e:	f000 fb6f 	bl	8001c40 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001562:	2200      	movs	r2, #0
 8001564:	2100      	movs	r1, #0
 8001566:	2026      	movs	r0, #38	; 0x26
 8001568:	f000 faa1 	bl	8001aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800156c:	2026      	movs	r0, #38	; 0x26
 800156e:	f000 faba 	bl	8001ae6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001572:	e058      	b.n	8001626 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART3)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a30      	ldr	r2, [pc, #192]	; (800163c <HAL_UART_MspInit+0x154>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d153      	bne.n	8001626 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART3_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]
 8001582:	4b2c      	ldr	r3, [pc, #176]	; (8001634 <HAL_UART_MspInit+0x14c>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	4a2b      	ldr	r2, [pc, #172]	; (8001634 <HAL_UART_MspInit+0x14c>)
 8001588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800158c:	6413      	str	r3, [r2, #64]	; 0x40
 800158e:	4b29      	ldr	r3, [pc, #164]	; (8001634 <HAL_UART_MspInit+0x14c>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	4b25      	ldr	r3, [pc, #148]	; (8001634 <HAL_UART_MspInit+0x14c>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a24      	ldr	r2, [pc, #144]	; (8001634 <HAL_UART_MspInit+0x14c>)
 80015a4:	f043 0302 	orr.w	r3, r3, #2
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b22      	ldr	r3, [pc, #136]	; (8001634 <HAL_UART_MspInit+0x14c>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	4b1e      	ldr	r3, [pc, #120]	; (8001634 <HAL_UART_MspInit+0x14c>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a1d      	ldr	r2, [pc, #116]	; (8001634 <HAL_UART_MspInit+0x14c>)
 80015c0:	f043 0308 	orr.w	r3, r3, #8
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b1b      	ldr	r3, [pc, #108]	; (8001634 <HAL_UART_MspInit+0x14c>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0308 	and.w	r3, r3, #8
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80015d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d8:	2302      	movs	r3, #2
 80015da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e0:	2303      	movs	r3, #3
 80015e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015e4:	2307      	movs	r3, #7
 80015e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e8:	f107 031c 	add.w	r3, r7, #28
 80015ec:	4619      	mov	r1, r3
 80015ee:	4814      	ldr	r0, [pc, #80]	; (8001640 <HAL_UART_MspInit+0x158>)
 80015f0:	f000 fb26 	bl	8001c40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	2302      	movs	r3, #2
 80015fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001602:	2303      	movs	r3, #3
 8001604:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001606:	2307      	movs	r3, #7
 8001608:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800160a:	f107 031c 	add.w	r3, r7, #28
 800160e:	4619      	mov	r1, r3
 8001610:	480c      	ldr	r0, [pc, #48]	; (8001644 <HAL_UART_MspInit+0x15c>)
 8001612:	f000 fb15 	bl	8001c40 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	2100      	movs	r1, #0
 800161a:	2027      	movs	r0, #39	; 0x27
 800161c:	f000 fa47 	bl	8001aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001620:	2027      	movs	r0, #39	; 0x27
 8001622:	f000 fa60 	bl	8001ae6 <HAL_NVIC_EnableIRQ>
}
 8001626:	bf00      	nop
 8001628:	3730      	adds	r7, #48	; 0x30
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40004400 	.word	0x40004400
 8001634:	40023800 	.word	0x40023800
 8001638:	40020000 	.word	0x40020000
 800163c:	40004800 	.word	0x40004800
 8001640:	40020400 	.word	0x40020400
 8001644:	40020c00 	.word	0x40020c00

08001648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800164c:	e7fe      	b.n	800164c <NMI_Handler+0x4>

0800164e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001652:	e7fe      	b.n	8001652 <HardFault_Handler+0x4>

08001654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001658:	e7fe      	b.n	8001658 <MemManage_Handler+0x4>

0800165a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800165e:	e7fe      	b.n	800165e <BusFault_Handler+0x4>

08001660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001664:	e7fe      	b.n	8001664 <UsageFault_Handler+0x4>

08001666 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001694:	f000 f8ec 	bl	8001870 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}

0800169c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80016a0:	2001      	movs	r0, #1
 80016a2:	f000 fc83 	bl	8001fac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
	...

080016ac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <TIM4_IRQHandler+0x10>)
 80016b2:	f001 fb0d 	bl	8002cd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	2000007c 	.word	0x2000007c

080016c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016c4:	4802      	ldr	r0, [pc, #8]	; (80016d0 <USART2_IRQHandler+0x10>)
 80016c6:	f002 faf3 	bl	8003cb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	200000c4 	.word	0x200000c4

080016d4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80016d8:	4802      	ldr	r0, [pc, #8]	; (80016e4 <USART3_IRQHandler+0x10>)
 80016da:	f002 fae9 	bl	8003cb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	2000010c 	.word	0x2000010c

080016e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f0:	4a14      	ldr	r2, [pc, #80]	; (8001744 <_sbrk+0x5c>)
 80016f2:	4b15      	ldr	r3, [pc, #84]	; (8001748 <_sbrk+0x60>)
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016fc:	4b13      	ldr	r3, [pc, #76]	; (800174c <_sbrk+0x64>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d102      	bne.n	800170a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001704:	4b11      	ldr	r3, [pc, #68]	; (800174c <_sbrk+0x64>)
 8001706:	4a12      	ldr	r2, [pc, #72]	; (8001750 <_sbrk+0x68>)
 8001708:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800170a:	4b10      	ldr	r3, [pc, #64]	; (800174c <_sbrk+0x64>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	429a      	cmp	r2, r3
 8001716:	d207      	bcs.n	8001728 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001718:	f003 fa72 	bl	8004c00 <__errno>
 800171c:	4603      	mov	r3, r0
 800171e:	220c      	movs	r2, #12
 8001720:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001726:	e009      	b.n	800173c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <_sbrk+0x64>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800172e:	4b07      	ldr	r3, [pc, #28]	; (800174c <_sbrk+0x64>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4413      	add	r3, r2
 8001736:	4a05      	ldr	r2, [pc, #20]	; (800174c <_sbrk+0x64>)
 8001738:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800173a:	68fb      	ldr	r3, [r7, #12]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20020000 	.word	0x20020000
 8001748:	00000400 	.word	0x00000400
 800174c:	200004fc 	.word	0x200004fc
 8001750:	20000650 	.word	0x20000650

08001754 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <SystemInit+0x20>)
 800175a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800175e:	4a05      	ldr	r2, [pc, #20]	; (8001774 <SystemInit+0x20>)
 8001760:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001764:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001778:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017b0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800177c:	f7ff ffea 	bl	8001754 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001780:	480c      	ldr	r0, [pc, #48]	; (80017b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001782:	490d      	ldr	r1, [pc, #52]	; (80017b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001784:	4a0d      	ldr	r2, [pc, #52]	; (80017bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001786:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001788:	e002      	b.n	8001790 <LoopCopyDataInit>

0800178a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800178a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800178c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800178e:	3304      	adds	r3, #4

08001790 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001790:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001792:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001794:	d3f9      	bcc.n	800178a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001796:	4a0a      	ldr	r2, [pc, #40]	; (80017c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001798:	4c0a      	ldr	r4, [pc, #40]	; (80017c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800179a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800179c:	e001      	b.n	80017a2 <LoopFillZerobss>

0800179e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800179e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a0:	3204      	adds	r2, #4

080017a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017a4:	d3fb      	bcc.n	800179e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017a6:	f003 fa31 	bl	8004c0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017aa:	f7fe fee7 	bl	800057c <main>
  bx  lr    
 80017ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017b8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80017bc:	080058fc 	.word	0x080058fc
  ldr r2, =_sbss
 80017c0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80017c4:	2000064c 	.word	0x2000064c

080017c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017c8:	e7fe      	b.n	80017c8 <ADC_IRQHandler>
	...

080017cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017d0:	4b0e      	ldr	r3, [pc, #56]	; (800180c <HAL_Init+0x40>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a0d      	ldr	r2, [pc, #52]	; (800180c <HAL_Init+0x40>)
 80017d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017dc:	4b0b      	ldr	r3, [pc, #44]	; (800180c <HAL_Init+0x40>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a0a      	ldr	r2, [pc, #40]	; (800180c <HAL_Init+0x40>)
 80017e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e8:	4b08      	ldr	r3, [pc, #32]	; (800180c <HAL_Init+0x40>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a07      	ldr	r2, [pc, #28]	; (800180c <HAL_Init+0x40>)
 80017ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f4:	2003      	movs	r0, #3
 80017f6:	f000 f94f 	bl	8001a98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017fa:	2000      	movs	r0, #0
 80017fc:	f000 f808 	bl	8001810 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001800:	f7ff fde8 	bl	80013d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40023c00 	.word	0x40023c00

08001810 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001818:	4b12      	ldr	r3, [pc, #72]	; (8001864 <HAL_InitTick+0x54>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	4b12      	ldr	r3, [pc, #72]	; (8001868 <HAL_InitTick+0x58>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	4619      	mov	r1, r3
 8001822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001826:	fbb3 f3f1 	udiv	r3, r3, r1
 800182a:	fbb2 f3f3 	udiv	r3, r2, r3
 800182e:	4618      	mov	r0, r3
 8001830:	f000 f967 	bl	8001b02 <HAL_SYSTICK_Config>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e00e      	b.n	800185c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2b0f      	cmp	r3, #15
 8001842:	d80a      	bhi.n	800185a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001844:	2200      	movs	r2, #0
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800184c:	f000 f92f 	bl	8001aae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001850:	4a06      	ldr	r2, [pc, #24]	; (800186c <HAL_InitTick+0x5c>)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001856:	2300      	movs	r3, #0
 8001858:	e000      	b.n	800185c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
}
 800185c:	4618      	mov	r0, r3
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20000004 	.word	0x20000004
 8001868:	2000000c 	.word	0x2000000c
 800186c:	20000008 	.word	0x20000008

08001870 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <HAL_IncTick+0x20>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	461a      	mov	r2, r3
 800187a:	4b06      	ldr	r3, [pc, #24]	; (8001894 <HAL_IncTick+0x24>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4413      	add	r3, r2
 8001880:	4a04      	ldr	r2, [pc, #16]	; (8001894 <HAL_IncTick+0x24>)
 8001882:	6013      	str	r3, [r2, #0]
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	2000000c 	.word	0x2000000c
 8001894:	20000500 	.word	0x20000500

08001898 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return uwTick;
 800189c:	4b03      	ldr	r3, [pc, #12]	; (80018ac <HAL_GetTick+0x14>)
 800189e:	681b      	ldr	r3, [r3, #0]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	20000500 	.word	0x20000500

080018b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018b8:	f7ff ffee 	bl	8001898 <HAL_GetTick>
 80018bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018c8:	d005      	beq.n	80018d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ca:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <HAL_Delay+0x44>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	461a      	mov	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4413      	add	r3, r2
 80018d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018d6:	bf00      	nop
 80018d8:	f7ff ffde 	bl	8001898 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d8f7      	bhi.n	80018d8 <HAL_Delay+0x28>
  {
  }
}
 80018e8:	bf00      	nop
 80018ea:	bf00      	nop
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	2000000c 	.word	0x2000000c

080018f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001908:	4b0c      	ldr	r3, [pc, #48]	; (800193c <__NVIC_SetPriorityGrouping+0x44>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800190e:	68ba      	ldr	r2, [r7, #8]
 8001910:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001914:	4013      	ands	r3, r2
 8001916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001920:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800192a:	4a04      	ldr	r2, [pc, #16]	; (800193c <__NVIC_SetPriorityGrouping+0x44>)
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	60d3      	str	r3, [r2, #12]
}
 8001930:	bf00      	nop
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001944:	4b04      	ldr	r3, [pc, #16]	; (8001958 <__NVIC_GetPriorityGrouping+0x18>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	0a1b      	lsrs	r3, r3, #8
 800194a:	f003 0307 	and.w	r3, r3, #7
}
 800194e:	4618      	mov	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196a:	2b00      	cmp	r3, #0
 800196c:	db0b      	blt.n	8001986 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	f003 021f 	and.w	r2, r3, #31
 8001974:	4907      	ldr	r1, [pc, #28]	; (8001994 <__NVIC_EnableIRQ+0x38>)
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	095b      	lsrs	r3, r3, #5
 800197c:	2001      	movs	r0, #1
 800197e:	fa00 f202 	lsl.w	r2, r0, r2
 8001982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	e000e100 	.word	0xe000e100

08001998 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	6039      	str	r1, [r7, #0]
 80019a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	db0a      	blt.n	80019c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	490c      	ldr	r1, [pc, #48]	; (80019e4 <__NVIC_SetPriority+0x4c>)
 80019b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b6:	0112      	lsls	r2, r2, #4
 80019b8:	b2d2      	uxtb	r2, r2
 80019ba:	440b      	add	r3, r1
 80019bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c0:	e00a      	b.n	80019d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	4908      	ldr	r1, [pc, #32]	; (80019e8 <__NVIC_SetPriority+0x50>)
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	f003 030f 	and.w	r3, r3, #15
 80019ce:	3b04      	subs	r3, #4
 80019d0:	0112      	lsls	r2, r2, #4
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	440b      	add	r3, r1
 80019d6:	761a      	strb	r2, [r3, #24]
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	e000e100 	.word	0xe000e100
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b089      	sub	sp, #36	; 0x24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f1c3 0307 	rsb	r3, r3, #7
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	bf28      	it	cs
 8001a0a:	2304      	movcs	r3, #4
 8001a0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	3304      	adds	r3, #4
 8001a12:	2b06      	cmp	r3, #6
 8001a14:	d902      	bls.n	8001a1c <NVIC_EncodePriority+0x30>
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3b03      	subs	r3, #3
 8001a1a:	e000      	b.n	8001a1e <NVIC_EncodePriority+0x32>
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43da      	mvns	r2, r3
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	401a      	ands	r2, r3
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3e:	43d9      	mvns	r1, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a44:	4313      	orrs	r3, r2
         );
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3724      	adds	r7, #36	; 0x24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
	...

08001a54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a64:	d301      	bcc.n	8001a6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a66:	2301      	movs	r3, #1
 8001a68:	e00f      	b.n	8001a8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a6a:	4a0a      	ldr	r2, [pc, #40]	; (8001a94 <SysTick_Config+0x40>)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a72:	210f      	movs	r1, #15
 8001a74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a78:	f7ff ff8e 	bl	8001998 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a7c:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <SysTick_Config+0x40>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a82:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <SysTick_Config+0x40>)
 8001a84:	2207      	movs	r2, #7
 8001a86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	e000e010 	.word	0xe000e010

08001a98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff ff29 	bl	80018f8 <__NVIC_SetPriorityGrouping>
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b086      	sub	sp, #24
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
 8001aba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac0:	f7ff ff3e 	bl	8001940 <__NVIC_GetPriorityGrouping>
 8001ac4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	68b9      	ldr	r1, [r7, #8]
 8001aca:	6978      	ldr	r0, [r7, #20]
 8001acc:	f7ff ff8e 	bl	80019ec <NVIC_EncodePriority>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff ff5d 	bl	8001998 <__NVIC_SetPriority>
}
 8001ade:	bf00      	nop
 8001ae0:	3718      	adds	r7, #24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	4603      	mov	r3, r0
 8001aee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff ff31 	bl	800195c <__NVIC_EnableIRQ>
}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff ffa2 	bl	8001a54 <SysTick_Config>
 8001b10:	4603      	mov	r3, r0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b084      	sub	sp, #16
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b26:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b28:	f7ff feb6 	bl	8001898 <HAL_GetTick>
 8001b2c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d008      	beq.n	8001b4c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2280      	movs	r2, #128	; 0x80
 8001b3e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e052      	b.n	8001bf2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 0216 	bic.w	r2, r2, #22
 8001b5a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	695a      	ldr	r2, [r3, #20]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b6a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d103      	bne.n	8001b7c <HAL_DMA_Abort+0x62>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d007      	beq.n	8001b8c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 0208 	bic.w	r2, r2, #8
 8001b8a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 0201 	bic.w	r2, r2, #1
 8001b9a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b9c:	e013      	b.n	8001bc6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b9e:	f7ff fe7b 	bl	8001898 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b05      	cmp	r3, #5
 8001baa:	d90c      	bls.n	8001bc6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2220      	movs	r2, #32
 8001bb0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2203      	movs	r2, #3
 8001bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e015      	b.n	8001bf2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1e4      	bne.n	8001b9e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd8:	223f      	movs	r2, #63	; 0x3f
 8001bda:	409a      	lsls	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d004      	beq.n	8001c18 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2280      	movs	r2, #128	; 0x80
 8001c12:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e00c      	b.n	8001c32 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2205      	movs	r2, #5
 8001c1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f022 0201 	bic.w	r2, r2, #1
 8001c2e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b089      	sub	sp, #36	; 0x24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c52:	2300      	movs	r3, #0
 8001c54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c56:	2300      	movs	r3, #0
 8001c58:	61fb      	str	r3, [r7, #28]
 8001c5a:	e16b      	b.n	8001f34 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	f040 815a 	bne.w	8001f2e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f003 0303 	and.w	r3, r3, #3
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d005      	beq.n	8001c92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d130      	bne.n	8001cf4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	2203      	movs	r2, #3
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	68da      	ldr	r2, [r3, #12]
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cc8:	2201      	movs	r2, #1
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	091b      	lsrs	r3, r3, #4
 8001cde:	f003 0201 	and.w	r2, r3, #1
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 0303 	and.w	r3, r3, #3
 8001cfc:	2b03      	cmp	r3, #3
 8001cfe:	d017      	beq.n	8001d30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	2203      	movs	r2, #3
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	43db      	mvns	r3, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4013      	ands	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 0303 	and.w	r3, r3, #3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d123      	bne.n	8001d84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	08da      	lsrs	r2, r3, #3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3208      	adds	r2, #8
 8001d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	220f      	movs	r2, #15
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	691a      	ldr	r2, [r3, #16]
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	08da      	lsrs	r2, r3, #3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	3208      	adds	r2, #8
 8001d7e:	69b9      	ldr	r1, [r7, #24]
 8001d80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	2203      	movs	r2, #3
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 0203 	and.w	r2, r3, #3
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f000 80b4 	beq.w	8001f2e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	4b60      	ldr	r3, [pc, #384]	; (8001f4c <HAL_GPIO_Init+0x30c>)
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	4a5f      	ldr	r2, [pc, #380]	; (8001f4c <HAL_GPIO_Init+0x30c>)
 8001dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001dd6:	4b5d      	ldr	r3, [pc, #372]	; (8001f4c <HAL_GPIO_Init+0x30c>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001de2:	4a5b      	ldr	r2, [pc, #364]	; (8001f50 <HAL_GPIO_Init+0x310>)
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	089b      	lsrs	r3, r3, #2
 8001de8:	3302      	adds	r3, #2
 8001dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	220f      	movs	r2, #15
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4013      	ands	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a52      	ldr	r2, [pc, #328]	; (8001f54 <HAL_GPIO_Init+0x314>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d02b      	beq.n	8001e66 <HAL_GPIO_Init+0x226>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a51      	ldr	r2, [pc, #324]	; (8001f58 <HAL_GPIO_Init+0x318>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d025      	beq.n	8001e62 <HAL_GPIO_Init+0x222>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a50      	ldr	r2, [pc, #320]	; (8001f5c <HAL_GPIO_Init+0x31c>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d01f      	beq.n	8001e5e <HAL_GPIO_Init+0x21e>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a4f      	ldr	r2, [pc, #316]	; (8001f60 <HAL_GPIO_Init+0x320>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d019      	beq.n	8001e5a <HAL_GPIO_Init+0x21a>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a4e      	ldr	r2, [pc, #312]	; (8001f64 <HAL_GPIO_Init+0x324>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d013      	beq.n	8001e56 <HAL_GPIO_Init+0x216>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a4d      	ldr	r2, [pc, #308]	; (8001f68 <HAL_GPIO_Init+0x328>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d00d      	beq.n	8001e52 <HAL_GPIO_Init+0x212>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a4c      	ldr	r2, [pc, #304]	; (8001f6c <HAL_GPIO_Init+0x32c>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d007      	beq.n	8001e4e <HAL_GPIO_Init+0x20e>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a4b      	ldr	r2, [pc, #300]	; (8001f70 <HAL_GPIO_Init+0x330>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d101      	bne.n	8001e4a <HAL_GPIO_Init+0x20a>
 8001e46:	2307      	movs	r3, #7
 8001e48:	e00e      	b.n	8001e68 <HAL_GPIO_Init+0x228>
 8001e4a:	2308      	movs	r3, #8
 8001e4c:	e00c      	b.n	8001e68 <HAL_GPIO_Init+0x228>
 8001e4e:	2306      	movs	r3, #6
 8001e50:	e00a      	b.n	8001e68 <HAL_GPIO_Init+0x228>
 8001e52:	2305      	movs	r3, #5
 8001e54:	e008      	b.n	8001e68 <HAL_GPIO_Init+0x228>
 8001e56:	2304      	movs	r3, #4
 8001e58:	e006      	b.n	8001e68 <HAL_GPIO_Init+0x228>
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e004      	b.n	8001e68 <HAL_GPIO_Init+0x228>
 8001e5e:	2302      	movs	r3, #2
 8001e60:	e002      	b.n	8001e68 <HAL_GPIO_Init+0x228>
 8001e62:	2301      	movs	r3, #1
 8001e64:	e000      	b.n	8001e68 <HAL_GPIO_Init+0x228>
 8001e66:	2300      	movs	r3, #0
 8001e68:	69fa      	ldr	r2, [r7, #28]
 8001e6a:	f002 0203 	and.w	r2, r2, #3
 8001e6e:	0092      	lsls	r2, r2, #2
 8001e70:	4093      	lsls	r3, r2
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e78:	4935      	ldr	r1, [pc, #212]	; (8001f50 <HAL_GPIO_Init+0x310>)
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	089b      	lsrs	r3, r3, #2
 8001e7e:	3302      	adds	r3, #2
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e86:	4b3b      	ldr	r3, [pc, #236]	; (8001f74 <HAL_GPIO_Init+0x334>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4013      	ands	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eaa:	4a32      	ldr	r2, [pc, #200]	; (8001f74 <HAL_GPIO_Init+0x334>)
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001eb0:	4b30      	ldr	r3, [pc, #192]	; (8001f74 <HAL_GPIO_Init+0x334>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ed4:	4a27      	ldr	r2, [pc, #156]	; (8001f74 <HAL_GPIO_Init+0x334>)
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001eda:	4b26      	ldr	r3, [pc, #152]	; (8001f74 <HAL_GPIO_Init+0x334>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001efe:	4a1d      	ldr	r2, [pc, #116]	; (8001f74 <HAL_GPIO_Init+0x334>)
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f04:	4b1b      	ldr	r3, [pc, #108]	; (8001f74 <HAL_GPIO_Init+0x334>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f28:	4a12      	ldr	r2, [pc, #72]	; (8001f74 <HAL_GPIO_Init+0x334>)
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	3301      	adds	r3, #1
 8001f32:	61fb      	str	r3, [r7, #28]
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	2b0f      	cmp	r3, #15
 8001f38:	f67f ae90 	bls.w	8001c5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f3c:	bf00      	nop
 8001f3e:	bf00      	nop
 8001f40:	3724      	adds	r7, #36	; 0x24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40013800 	.word	0x40013800
 8001f54:	40020000 	.word	0x40020000
 8001f58:	40020400 	.word	0x40020400
 8001f5c:	40020800 	.word	0x40020800
 8001f60:	40020c00 	.word	0x40020c00
 8001f64:	40021000 	.word	0x40021000
 8001f68:	40021400 	.word	0x40021400
 8001f6c:	40021800 	.word	0x40021800
 8001f70:	40021c00 	.word	0x40021c00
 8001f74:	40013c00 	.word	0x40013c00

08001f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	460b      	mov	r3, r1
 8001f82:	807b      	strh	r3, [r7, #2]
 8001f84:	4613      	mov	r3, r2
 8001f86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f88:	787b      	ldrb	r3, [r7, #1]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f8e:	887a      	ldrh	r2, [r7, #2]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f94:	e003      	b.n	8001f9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f96:	887b      	ldrh	r3, [r7, #2]
 8001f98:	041a      	lsls	r2, r3, #16
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	619a      	str	r2, [r3, #24]
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
	...

08001fac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001fb6:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fb8:	695a      	ldr	r2, [r3, #20]
 8001fba:	88fb      	ldrh	r3, [r7, #6]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d006      	beq.n	8001fd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fc2:	4a05      	ldr	r2, [pc, #20]	; (8001fd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fc4:	88fb      	ldrh	r3, [r7, #6]
 8001fc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fc8:	88fb      	ldrh	r3, [r7, #6]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe fdd4 	bl	8000b78 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fd0:	bf00      	nop
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40013c00 	.word	0x40013c00

08001fdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e267      	b.n	80024be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d075      	beq.n	80020e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ffa:	4b88      	ldr	r3, [pc, #544]	; (800221c <HAL_RCC_OscConfig+0x240>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f003 030c 	and.w	r3, r3, #12
 8002002:	2b04      	cmp	r3, #4
 8002004:	d00c      	beq.n	8002020 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002006:	4b85      	ldr	r3, [pc, #532]	; (800221c <HAL_RCC_OscConfig+0x240>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800200e:	2b08      	cmp	r3, #8
 8002010:	d112      	bne.n	8002038 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002012:	4b82      	ldr	r3, [pc, #520]	; (800221c <HAL_RCC_OscConfig+0x240>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800201a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800201e:	d10b      	bne.n	8002038 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002020:	4b7e      	ldr	r3, [pc, #504]	; (800221c <HAL_RCC_OscConfig+0x240>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d05b      	beq.n	80020e4 <HAL_RCC_OscConfig+0x108>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d157      	bne.n	80020e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e242      	b.n	80024be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002040:	d106      	bne.n	8002050 <HAL_RCC_OscConfig+0x74>
 8002042:	4b76      	ldr	r3, [pc, #472]	; (800221c <HAL_RCC_OscConfig+0x240>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a75      	ldr	r2, [pc, #468]	; (800221c <HAL_RCC_OscConfig+0x240>)
 8002048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	e01d      	b.n	800208c <HAL_RCC_OscConfig+0xb0>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002058:	d10c      	bne.n	8002074 <HAL_RCC_OscConfig+0x98>
 800205a:	4b70      	ldr	r3, [pc, #448]	; (800221c <HAL_RCC_OscConfig+0x240>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a6f      	ldr	r2, [pc, #444]	; (800221c <HAL_RCC_OscConfig+0x240>)
 8002060:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002064:	6013      	str	r3, [r2, #0]
 8002066:	4b6d      	ldr	r3, [pc, #436]	; (800221c <HAL_RCC_OscConfig+0x240>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a6c      	ldr	r2, [pc, #432]	; (800221c <HAL_RCC_OscConfig+0x240>)
 800206c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	e00b      	b.n	800208c <HAL_RCC_OscConfig+0xb0>
 8002074:	4b69      	ldr	r3, [pc, #420]	; (800221c <HAL_RCC_OscConfig+0x240>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a68      	ldr	r2, [pc, #416]	; (800221c <HAL_RCC_OscConfig+0x240>)
 800207a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800207e:	6013      	str	r3, [r2, #0]
 8002080:	4b66      	ldr	r3, [pc, #408]	; (800221c <HAL_RCC_OscConfig+0x240>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a65      	ldr	r2, [pc, #404]	; (800221c <HAL_RCC_OscConfig+0x240>)
 8002086:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800208a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d013      	beq.n	80020bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002094:	f7ff fc00 	bl	8001898 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800209c:	f7ff fbfc 	bl	8001898 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b64      	cmp	r3, #100	; 0x64
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e207      	b.n	80024be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ae:	4b5b      	ldr	r3, [pc, #364]	; (800221c <HAL_RCC_OscConfig+0x240>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0f0      	beq.n	800209c <HAL_RCC_OscConfig+0xc0>
 80020ba:	e014      	b.n	80020e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020bc:	f7ff fbec 	bl	8001898 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020c4:	f7ff fbe8 	bl	8001898 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b64      	cmp	r3, #100	; 0x64
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e1f3      	b.n	80024be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020d6:	4b51      	ldr	r3, [pc, #324]	; (800221c <HAL_RCC_OscConfig+0x240>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f0      	bne.n	80020c4 <HAL_RCC_OscConfig+0xe8>
 80020e2:	e000      	b.n	80020e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d063      	beq.n	80021ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020f2:	4b4a      	ldr	r3, [pc, #296]	; (800221c <HAL_RCC_OscConfig+0x240>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 030c 	and.w	r3, r3, #12
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00b      	beq.n	8002116 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020fe:	4b47      	ldr	r3, [pc, #284]	; (800221c <HAL_RCC_OscConfig+0x240>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002106:	2b08      	cmp	r3, #8
 8002108:	d11c      	bne.n	8002144 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800210a:	4b44      	ldr	r3, [pc, #272]	; (800221c <HAL_RCC_OscConfig+0x240>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d116      	bne.n	8002144 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002116:	4b41      	ldr	r3, [pc, #260]	; (800221c <HAL_RCC_OscConfig+0x240>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d005      	beq.n	800212e <HAL_RCC_OscConfig+0x152>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d001      	beq.n	800212e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e1c7      	b.n	80024be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800212e:	4b3b      	ldr	r3, [pc, #236]	; (800221c <HAL_RCC_OscConfig+0x240>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	4937      	ldr	r1, [pc, #220]	; (800221c <HAL_RCC_OscConfig+0x240>)
 800213e:	4313      	orrs	r3, r2
 8002140:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002142:	e03a      	b.n	80021ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d020      	beq.n	800218e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800214c:	4b34      	ldr	r3, [pc, #208]	; (8002220 <HAL_RCC_OscConfig+0x244>)
 800214e:	2201      	movs	r2, #1
 8002150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002152:	f7ff fba1 	bl	8001898 <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800215a:	f7ff fb9d 	bl	8001898 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e1a8      	b.n	80024be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800216c:	4b2b      	ldr	r3, [pc, #172]	; (800221c <HAL_RCC_OscConfig+0x240>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0f0      	beq.n	800215a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002178:	4b28      	ldr	r3, [pc, #160]	; (800221c <HAL_RCC_OscConfig+0x240>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	4925      	ldr	r1, [pc, #148]	; (800221c <HAL_RCC_OscConfig+0x240>)
 8002188:	4313      	orrs	r3, r2
 800218a:	600b      	str	r3, [r1, #0]
 800218c:	e015      	b.n	80021ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800218e:	4b24      	ldr	r3, [pc, #144]	; (8002220 <HAL_RCC_OscConfig+0x244>)
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002194:	f7ff fb80 	bl	8001898 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800219c:	f7ff fb7c 	bl	8001898 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e187      	b.n	80024be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ae:	4b1b      	ldr	r3, [pc, #108]	; (800221c <HAL_RCC_OscConfig+0x240>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f0      	bne.n	800219c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0308 	and.w	r3, r3, #8
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d036      	beq.n	8002234 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d016      	beq.n	80021fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ce:	4b15      	ldr	r3, [pc, #84]	; (8002224 <HAL_RCC_OscConfig+0x248>)
 80021d0:	2201      	movs	r2, #1
 80021d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d4:	f7ff fb60 	bl	8001898 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021dc:	f7ff fb5c 	bl	8001898 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e167      	b.n	80024be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ee:	4b0b      	ldr	r3, [pc, #44]	; (800221c <HAL_RCC_OscConfig+0x240>)
 80021f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d0f0      	beq.n	80021dc <HAL_RCC_OscConfig+0x200>
 80021fa:	e01b      	b.n	8002234 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021fc:	4b09      	ldr	r3, [pc, #36]	; (8002224 <HAL_RCC_OscConfig+0x248>)
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002202:	f7ff fb49 	bl	8001898 <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002208:	e00e      	b.n	8002228 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800220a:	f7ff fb45 	bl	8001898 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d907      	bls.n	8002228 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e150      	b.n	80024be <HAL_RCC_OscConfig+0x4e2>
 800221c:	40023800 	.word	0x40023800
 8002220:	42470000 	.word	0x42470000
 8002224:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002228:	4b88      	ldr	r3, [pc, #544]	; (800244c <HAL_RCC_OscConfig+0x470>)
 800222a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1ea      	bne.n	800220a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 8097 	beq.w	8002370 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002242:	2300      	movs	r3, #0
 8002244:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002246:	4b81      	ldr	r3, [pc, #516]	; (800244c <HAL_RCC_OscConfig+0x470>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10f      	bne.n	8002272 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	60bb      	str	r3, [r7, #8]
 8002256:	4b7d      	ldr	r3, [pc, #500]	; (800244c <HAL_RCC_OscConfig+0x470>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	4a7c      	ldr	r2, [pc, #496]	; (800244c <HAL_RCC_OscConfig+0x470>)
 800225c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002260:	6413      	str	r3, [r2, #64]	; 0x40
 8002262:	4b7a      	ldr	r3, [pc, #488]	; (800244c <HAL_RCC_OscConfig+0x470>)
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226a:	60bb      	str	r3, [r7, #8]
 800226c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800226e:	2301      	movs	r3, #1
 8002270:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002272:	4b77      	ldr	r3, [pc, #476]	; (8002450 <HAL_RCC_OscConfig+0x474>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227a:	2b00      	cmp	r3, #0
 800227c:	d118      	bne.n	80022b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800227e:	4b74      	ldr	r3, [pc, #464]	; (8002450 <HAL_RCC_OscConfig+0x474>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a73      	ldr	r2, [pc, #460]	; (8002450 <HAL_RCC_OscConfig+0x474>)
 8002284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002288:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800228a:	f7ff fb05 	bl	8001898 <HAL_GetTick>
 800228e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002290:	e008      	b.n	80022a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002292:	f7ff fb01 	bl	8001898 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e10c      	b.n	80024be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a4:	4b6a      	ldr	r3, [pc, #424]	; (8002450 <HAL_RCC_OscConfig+0x474>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d0f0      	beq.n	8002292 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d106      	bne.n	80022c6 <HAL_RCC_OscConfig+0x2ea>
 80022b8:	4b64      	ldr	r3, [pc, #400]	; (800244c <HAL_RCC_OscConfig+0x470>)
 80022ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022bc:	4a63      	ldr	r2, [pc, #396]	; (800244c <HAL_RCC_OscConfig+0x470>)
 80022be:	f043 0301 	orr.w	r3, r3, #1
 80022c2:	6713      	str	r3, [r2, #112]	; 0x70
 80022c4:	e01c      	b.n	8002300 <HAL_RCC_OscConfig+0x324>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	2b05      	cmp	r3, #5
 80022cc:	d10c      	bne.n	80022e8 <HAL_RCC_OscConfig+0x30c>
 80022ce:	4b5f      	ldr	r3, [pc, #380]	; (800244c <HAL_RCC_OscConfig+0x470>)
 80022d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d2:	4a5e      	ldr	r2, [pc, #376]	; (800244c <HAL_RCC_OscConfig+0x470>)
 80022d4:	f043 0304 	orr.w	r3, r3, #4
 80022d8:	6713      	str	r3, [r2, #112]	; 0x70
 80022da:	4b5c      	ldr	r3, [pc, #368]	; (800244c <HAL_RCC_OscConfig+0x470>)
 80022dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022de:	4a5b      	ldr	r2, [pc, #364]	; (800244c <HAL_RCC_OscConfig+0x470>)
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	6713      	str	r3, [r2, #112]	; 0x70
 80022e6:	e00b      	b.n	8002300 <HAL_RCC_OscConfig+0x324>
 80022e8:	4b58      	ldr	r3, [pc, #352]	; (800244c <HAL_RCC_OscConfig+0x470>)
 80022ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ec:	4a57      	ldr	r2, [pc, #348]	; (800244c <HAL_RCC_OscConfig+0x470>)
 80022ee:	f023 0301 	bic.w	r3, r3, #1
 80022f2:	6713      	str	r3, [r2, #112]	; 0x70
 80022f4:	4b55      	ldr	r3, [pc, #340]	; (800244c <HAL_RCC_OscConfig+0x470>)
 80022f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f8:	4a54      	ldr	r2, [pc, #336]	; (800244c <HAL_RCC_OscConfig+0x470>)
 80022fa:	f023 0304 	bic.w	r3, r3, #4
 80022fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d015      	beq.n	8002334 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002308:	f7ff fac6 	bl	8001898 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800230e:	e00a      	b.n	8002326 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002310:	f7ff fac2 	bl	8001898 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	f241 3288 	movw	r2, #5000	; 0x1388
 800231e:	4293      	cmp	r3, r2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e0cb      	b.n	80024be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002326:	4b49      	ldr	r3, [pc, #292]	; (800244c <HAL_RCC_OscConfig+0x470>)
 8002328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0ee      	beq.n	8002310 <HAL_RCC_OscConfig+0x334>
 8002332:	e014      	b.n	800235e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002334:	f7ff fab0 	bl	8001898 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800233a:	e00a      	b.n	8002352 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800233c:	f7ff faac 	bl	8001898 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	f241 3288 	movw	r2, #5000	; 0x1388
 800234a:	4293      	cmp	r3, r2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e0b5      	b.n	80024be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002352:	4b3e      	ldr	r3, [pc, #248]	; (800244c <HAL_RCC_OscConfig+0x470>)
 8002354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1ee      	bne.n	800233c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800235e:	7dfb      	ldrb	r3, [r7, #23]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d105      	bne.n	8002370 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002364:	4b39      	ldr	r3, [pc, #228]	; (800244c <HAL_RCC_OscConfig+0x470>)
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	4a38      	ldr	r2, [pc, #224]	; (800244c <HAL_RCC_OscConfig+0x470>)
 800236a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800236e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 80a1 	beq.w	80024bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800237a:	4b34      	ldr	r3, [pc, #208]	; (800244c <HAL_RCC_OscConfig+0x470>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 030c 	and.w	r3, r3, #12
 8002382:	2b08      	cmp	r3, #8
 8002384:	d05c      	beq.n	8002440 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	2b02      	cmp	r3, #2
 800238c:	d141      	bne.n	8002412 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800238e:	4b31      	ldr	r3, [pc, #196]	; (8002454 <HAL_RCC_OscConfig+0x478>)
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002394:	f7ff fa80 	bl	8001898 <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800239c:	f7ff fa7c 	bl	8001898 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e087      	b.n	80024be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ae:	4b27      	ldr	r3, [pc, #156]	; (800244c <HAL_RCC_OscConfig+0x470>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f0      	bne.n	800239c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	69da      	ldr	r2, [r3, #28]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	019b      	lsls	r3, r3, #6
 80023ca:	431a      	orrs	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d0:	085b      	lsrs	r3, r3, #1
 80023d2:	3b01      	subs	r3, #1
 80023d4:	041b      	lsls	r3, r3, #16
 80023d6:	431a      	orrs	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023dc:	061b      	lsls	r3, r3, #24
 80023de:	491b      	ldr	r1, [pc, #108]	; (800244c <HAL_RCC_OscConfig+0x470>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023e4:	4b1b      	ldr	r3, [pc, #108]	; (8002454 <HAL_RCC_OscConfig+0x478>)
 80023e6:	2201      	movs	r2, #1
 80023e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ea:	f7ff fa55 	bl	8001898 <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023f0:	e008      	b.n	8002404 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023f2:	f7ff fa51 	bl	8001898 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e05c      	b.n	80024be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002404:	4b11      	ldr	r3, [pc, #68]	; (800244c <HAL_RCC_OscConfig+0x470>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d0f0      	beq.n	80023f2 <HAL_RCC_OscConfig+0x416>
 8002410:	e054      	b.n	80024bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002412:	4b10      	ldr	r3, [pc, #64]	; (8002454 <HAL_RCC_OscConfig+0x478>)
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002418:	f7ff fa3e 	bl	8001898 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002420:	f7ff fa3a 	bl	8001898 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e045      	b.n	80024be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002432:	4b06      	ldr	r3, [pc, #24]	; (800244c <HAL_RCC_OscConfig+0x470>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0x444>
 800243e:	e03d      	b.n	80024bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d107      	bne.n	8002458 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e038      	b.n	80024be <HAL_RCC_OscConfig+0x4e2>
 800244c:	40023800 	.word	0x40023800
 8002450:	40007000 	.word	0x40007000
 8002454:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002458:	4b1b      	ldr	r3, [pc, #108]	; (80024c8 <HAL_RCC_OscConfig+0x4ec>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d028      	beq.n	80024b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002470:	429a      	cmp	r2, r3
 8002472:	d121      	bne.n	80024b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800247e:	429a      	cmp	r2, r3
 8002480:	d11a      	bne.n	80024b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002488:	4013      	ands	r3, r2
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800248e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002490:	4293      	cmp	r3, r2
 8002492:	d111      	bne.n	80024b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249e:	085b      	lsrs	r3, r3, #1
 80024a0:	3b01      	subs	r3, #1
 80024a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d107      	bne.n	80024b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d001      	beq.n	80024bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e000      	b.n	80024be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40023800 	.word	0x40023800

080024cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d101      	bne.n	80024e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e0cc      	b.n	800267a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024e0:	4b68      	ldr	r3, [pc, #416]	; (8002684 <HAL_RCC_ClockConfig+0x1b8>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d90c      	bls.n	8002508 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ee:	4b65      	ldr	r3, [pc, #404]	; (8002684 <HAL_RCC_ClockConfig+0x1b8>)
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f6:	4b63      	ldr	r3, [pc, #396]	; (8002684 <HAL_RCC_ClockConfig+0x1b8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	429a      	cmp	r2, r3
 8002502:	d001      	beq.n	8002508 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e0b8      	b.n	800267a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d020      	beq.n	8002556 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	2b00      	cmp	r3, #0
 800251e:	d005      	beq.n	800252c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002520:	4b59      	ldr	r3, [pc, #356]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	4a58      	ldr	r2, [pc, #352]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 8002526:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800252a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0308 	and.w	r3, r3, #8
 8002534:	2b00      	cmp	r3, #0
 8002536:	d005      	beq.n	8002544 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002538:	4b53      	ldr	r3, [pc, #332]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	4a52      	ldr	r2, [pc, #328]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 800253e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002542:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002544:	4b50      	ldr	r3, [pc, #320]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	494d      	ldr	r1, [pc, #308]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 8002552:	4313      	orrs	r3, r2
 8002554:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	d044      	beq.n	80025ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d107      	bne.n	800257a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256a:	4b47      	ldr	r3, [pc, #284]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d119      	bne.n	80025aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e07f      	b.n	800267a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b02      	cmp	r3, #2
 8002580:	d003      	beq.n	800258a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002586:	2b03      	cmp	r3, #3
 8002588:	d107      	bne.n	800259a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800258a:	4b3f      	ldr	r3, [pc, #252]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d109      	bne.n	80025aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e06f      	b.n	800267a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800259a:	4b3b      	ldr	r3, [pc, #236]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e067      	b.n	800267a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025aa:	4b37      	ldr	r3, [pc, #220]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f023 0203 	bic.w	r2, r3, #3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	4934      	ldr	r1, [pc, #208]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025bc:	f7ff f96c 	bl	8001898 <HAL_GetTick>
 80025c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c2:	e00a      	b.n	80025da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c4:	f7ff f968 	bl	8001898 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e04f      	b.n	800267a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025da:	4b2b      	ldr	r3, [pc, #172]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 020c 	and.w	r2, r3, #12
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d1eb      	bne.n	80025c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025ec:	4b25      	ldr	r3, [pc, #148]	; (8002684 <HAL_RCC_ClockConfig+0x1b8>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d20c      	bcs.n	8002614 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fa:	4b22      	ldr	r3, [pc, #136]	; (8002684 <HAL_RCC_ClockConfig+0x1b8>)
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002602:	4b20      	ldr	r3, [pc, #128]	; (8002684 <HAL_RCC_ClockConfig+0x1b8>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	429a      	cmp	r2, r3
 800260e:	d001      	beq.n	8002614 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e032      	b.n	800267a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	2b00      	cmp	r3, #0
 800261e:	d008      	beq.n	8002632 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002620:	4b19      	ldr	r3, [pc, #100]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	4916      	ldr	r1, [pc, #88]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 800262e:	4313      	orrs	r3, r2
 8002630:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0308 	and.w	r3, r3, #8
 800263a:	2b00      	cmp	r3, #0
 800263c:	d009      	beq.n	8002652 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800263e:	4b12      	ldr	r3, [pc, #72]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	490e      	ldr	r1, [pc, #56]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 800264e:	4313      	orrs	r3, r2
 8002650:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002652:	f000 f821 	bl	8002698 <HAL_RCC_GetSysClockFreq>
 8002656:	4602      	mov	r2, r0
 8002658:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	091b      	lsrs	r3, r3, #4
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	490a      	ldr	r1, [pc, #40]	; (800268c <HAL_RCC_ClockConfig+0x1c0>)
 8002664:	5ccb      	ldrb	r3, [r1, r3]
 8002666:	fa22 f303 	lsr.w	r3, r2, r3
 800266a:	4a09      	ldr	r2, [pc, #36]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 800266c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800266e:	4b09      	ldr	r3, [pc, #36]	; (8002694 <HAL_RCC_ClockConfig+0x1c8>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff f8cc 	bl	8001810 <HAL_InitTick>

  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40023c00 	.word	0x40023c00
 8002688:	40023800 	.word	0x40023800
 800268c:	080058a0 	.word	0x080058a0
 8002690:	20000004 	.word	0x20000004
 8002694:	20000008 	.word	0x20000008

08002698 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002698:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800269c:	b094      	sub	sp, #80	; 0x50
 800269e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	647b      	str	r3, [r7, #68]	; 0x44
 80026a4:	2300      	movs	r3, #0
 80026a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026a8:	2300      	movs	r3, #0
 80026aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80026ac:	2300      	movs	r3, #0
 80026ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026b0:	4b79      	ldr	r3, [pc, #484]	; (8002898 <HAL_RCC_GetSysClockFreq+0x200>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f003 030c 	and.w	r3, r3, #12
 80026b8:	2b08      	cmp	r3, #8
 80026ba:	d00d      	beq.n	80026d8 <HAL_RCC_GetSysClockFreq+0x40>
 80026bc:	2b08      	cmp	r3, #8
 80026be:	f200 80e1 	bhi.w	8002884 <HAL_RCC_GetSysClockFreq+0x1ec>
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d002      	beq.n	80026cc <HAL_RCC_GetSysClockFreq+0x34>
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	d003      	beq.n	80026d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80026ca:	e0db      	b.n	8002884 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026cc:	4b73      	ldr	r3, [pc, #460]	; (800289c <HAL_RCC_GetSysClockFreq+0x204>)
 80026ce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80026d0:	e0db      	b.n	800288a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026d2:	4b73      	ldr	r3, [pc, #460]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80026d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026d6:	e0d8      	b.n	800288a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026d8:	4b6f      	ldr	r3, [pc, #444]	; (8002898 <HAL_RCC_GetSysClockFreq+0x200>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026e0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026e2:	4b6d      	ldr	r3, [pc, #436]	; (8002898 <HAL_RCC_GetSysClockFreq+0x200>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d063      	beq.n	80027b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026ee:	4b6a      	ldr	r3, [pc, #424]	; (8002898 <HAL_RCC_GetSysClockFreq+0x200>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	099b      	lsrs	r3, r3, #6
 80026f4:	2200      	movs	r2, #0
 80026f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80026f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80026fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002700:	633b      	str	r3, [r7, #48]	; 0x30
 8002702:	2300      	movs	r3, #0
 8002704:	637b      	str	r3, [r7, #52]	; 0x34
 8002706:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800270a:	4622      	mov	r2, r4
 800270c:	462b      	mov	r3, r5
 800270e:	f04f 0000 	mov.w	r0, #0
 8002712:	f04f 0100 	mov.w	r1, #0
 8002716:	0159      	lsls	r1, r3, #5
 8002718:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800271c:	0150      	lsls	r0, r2, #5
 800271e:	4602      	mov	r2, r0
 8002720:	460b      	mov	r3, r1
 8002722:	4621      	mov	r1, r4
 8002724:	1a51      	subs	r1, r2, r1
 8002726:	6139      	str	r1, [r7, #16]
 8002728:	4629      	mov	r1, r5
 800272a:	eb63 0301 	sbc.w	r3, r3, r1
 800272e:	617b      	str	r3, [r7, #20]
 8002730:	f04f 0200 	mov.w	r2, #0
 8002734:	f04f 0300 	mov.w	r3, #0
 8002738:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800273c:	4659      	mov	r1, fp
 800273e:	018b      	lsls	r3, r1, #6
 8002740:	4651      	mov	r1, sl
 8002742:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002746:	4651      	mov	r1, sl
 8002748:	018a      	lsls	r2, r1, #6
 800274a:	4651      	mov	r1, sl
 800274c:	ebb2 0801 	subs.w	r8, r2, r1
 8002750:	4659      	mov	r1, fp
 8002752:	eb63 0901 	sbc.w	r9, r3, r1
 8002756:	f04f 0200 	mov.w	r2, #0
 800275a:	f04f 0300 	mov.w	r3, #0
 800275e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002762:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002766:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800276a:	4690      	mov	r8, r2
 800276c:	4699      	mov	r9, r3
 800276e:	4623      	mov	r3, r4
 8002770:	eb18 0303 	adds.w	r3, r8, r3
 8002774:	60bb      	str	r3, [r7, #8]
 8002776:	462b      	mov	r3, r5
 8002778:	eb49 0303 	adc.w	r3, r9, r3
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	f04f 0200 	mov.w	r2, #0
 8002782:	f04f 0300 	mov.w	r3, #0
 8002786:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800278a:	4629      	mov	r1, r5
 800278c:	024b      	lsls	r3, r1, #9
 800278e:	4621      	mov	r1, r4
 8002790:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002794:	4621      	mov	r1, r4
 8002796:	024a      	lsls	r2, r1, #9
 8002798:	4610      	mov	r0, r2
 800279a:	4619      	mov	r1, r3
 800279c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800279e:	2200      	movs	r2, #0
 80027a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80027a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027a8:	f7fd fd6a 	bl	8000280 <__aeabi_uldivmod>
 80027ac:	4602      	mov	r2, r0
 80027ae:	460b      	mov	r3, r1
 80027b0:	4613      	mov	r3, r2
 80027b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027b4:	e058      	b.n	8002868 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027b6:	4b38      	ldr	r3, [pc, #224]	; (8002898 <HAL_RCC_GetSysClockFreq+0x200>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	099b      	lsrs	r3, r3, #6
 80027bc:	2200      	movs	r2, #0
 80027be:	4618      	mov	r0, r3
 80027c0:	4611      	mov	r1, r2
 80027c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027c6:	623b      	str	r3, [r7, #32]
 80027c8:	2300      	movs	r3, #0
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24
 80027cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80027d0:	4642      	mov	r2, r8
 80027d2:	464b      	mov	r3, r9
 80027d4:	f04f 0000 	mov.w	r0, #0
 80027d8:	f04f 0100 	mov.w	r1, #0
 80027dc:	0159      	lsls	r1, r3, #5
 80027de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027e2:	0150      	lsls	r0, r2, #5
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	4641      	mov	r1, r8
 80027ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80027ee:	4649      	mov	r1, r9
 80027f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80027f4:	f04f 0200 	mov.w	r2, #0
 80027f8:	f04f 0300 	mov.w	r3, #0
 80027fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002800:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002804:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002808:	ebb2 040a 	subs.w	r4, r2, sl
 800280c:	eb63 050b 	sbc.w	r5, r3, fp
 8002810:	f04f 0200 	mov.w	r2, #0
 8002814:	f04f 0300 	mov.w	r3, #0
 8002818:	00eb      	lsls	r3, r5, #3
 800281a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800281e:	00e2      	lsls	r2, r4, #3
 8002820:	4614      	mov	r4, r2
 8002822:	461d      	mov	r5, r3
 8002824:	4643      	mov	r3, r8
 8002826:	18e3      	adds	r3, r4, r3
 8002828:	603b      	str	r3, [r7, #0]
 800282a:	464b      	mov	r3, r9
 800282c:	eb45 0303 	adc.w	r3, r5, r3
 8002830:	607b      	str	r3, [r7, #4]
 8002832:	f04f 0200 	mov.w	r2, #0
 8002836:	f04f 0300 	mov.w	r3, #0
 800283a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800283e:	4629      	mov	r1, r5
 8002840:	028b      	lsls	r3, r1, #10
 8002842:	4621      	mov	r1, r4
 8002844:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002848:	4621      	mov	r1, r4
 800284a:	028a      	lsls	r2, r1, #10
 800284c:	4610      	mov	r0, r2
 800284e:	4619      	mov	r1, r3
 8002850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002852:	2200      	movs	r2, #0
 8002854:	61bb      	str	r3, [r7, #24]
 8002856:	61fa      	str	r2, [r7, #28]
 8002858:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800285c:	f7fd fd10 	bl	8000280 <__aeabi_uldivmod>
 8002860:	4602      	mov	r2, r0
 8002862:	460b      	mov	r3, r1
 8002864:	4613      	mov	r3, r2
 8002866:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002868:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <HAL_RCC_GetSysClockFreq+0x200>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	0c1b      	lsrs	r3, r3, #16
 800286e:	f003 0303 	and.w	r3, r3, #3
 8002872:	3301      	adds	r3, #1
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002878:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800287a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800287c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002880:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002882:	e002      	b.n	800288a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002884:	4b05      	ldr	r3, [pc, #20]	; (800289c <HAL_RCC_GetSysClockFreq+0x204>)
 8002886:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002888:	bf00      	nop
    }
  }
  return sysclockfreq;
 800288a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800288c:	4618      	mov	r0, r3
 800288e:	3750      	adds	r7, #80	; 0x50
 8002890:	46bd      	mov	sp, r7
 8002892:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002896:	bf00      	nop
 8002898:	40023800 	.word	0x40023800
 800289c:	00f42400 	.word	0x00f42400
 80028a0:	007a1200 	.word	0x007a1200

080028a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028a8:	4b03      	ldr	r3, [pc, #12]	; (80028b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80028aa:	681b      	ldr	r3, [r3, #0]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	20000004 	.word	0x20000004

080028bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028c0:	f7ff fff0 	bl	80028a4 <HAL_RCC_GetHCLKFreq>
 80028c4:	4602      	mov	r2, r0
 80028c6:	4b05      	ldr	r3, [pc, #20]	; (80028dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	0a9b      	lsrs	r3, r3, #10
 80028cc:	f003 0307 	and.w	r3, r3, #7
 80028d0:	4903      	ldr	r1, [pc, #12]	; (80028e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028d2:	5ccb      	ldrb	r3, [r1, r3]
 80028d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028d8:	4618      	mov	r0, r3
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40023800 	.word	0x40023800
 80028e0:	080058b0 	.word	0x080058b0

080028e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028e8:	f7ff ffdc 	bl	80028a4 <HAL_RCC_GetHCLKFreq>
 80028ec:	4602      	mov	r2, r0
 80028ee:	4b05      	ldr	r3, [pc, #20]	; (8002904 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	0b5b      	lsrs	r3, r3, #13
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	4903      	ldr	r1, [pc, #12]	; (8002908 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028fa:	5ccb      	ldrb	r3, [r1, r3]
 80028fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002900:	4618      	mov	r0, r3
 8002902:	bd80      	pop	{r7, pc}
 8002904:	40023800 	.word	0x40023800
 8002908:	080058b0 	.word	0x080058b0

0800290c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e041      	b.n	80029a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d106      	bne.n	8002938 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7fe fd76 	bl	8001424 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2202      	movs	r2, #2
 800293c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	3304      	adds	r3, #4
 8002948:	4619      	mov	r1, r3
 800294a:	4610      	mov	r0, r2
 800294c:	f000 fc6c 	bl	8003228 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
	...

080029ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d001      	beq.n	80029c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e04e      	b.n	8002a62 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2202      	movs	r2, #2
 80029c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68da      	ldr	r2, [r3, #12]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f042 0201 	orr.w	r2, r2, #1
 80029da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a23      	ldr	r2, [pc, #140]	; (8002a70 <HAL_TIM_Base_Start_IT+0xc4>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d022      	beq.n	8002a2c <HAL_TIM_Base_Start_IT+0x80>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ee:	d01d      	beq.n	8002a2c <HAL_TIM_Base_Start_IT+0x80>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a1f      	ldr	r2, [pc, #124]	; (8002a74 <HAL_TIM_Base_Start_IT+0xc8>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d018      	beq.n	8002a2c <HAL_TIM_Base_Start_IT+0x80>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a1e      	ldr	r2, [pc, #120]	; (8002a78 <HAL_TIM_Base_Start_IT+0xcc>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d013      	beq.n	8002a2c <HAL_TIM_Base_Start_IT+0x80>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a1c      	ldr	r2, [pc, #112]	; (8002a7c <HAL_TIM_Base_Start_IT+0xd0>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d00e      	beq.n	8002a2c <HAL_TIM_Base_Start_IT+0x80>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a1b      	ldr	r2, [pc, #108]	; (8002a80 <HAL_TIM_Base_Start_IT+0xd4>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d009      	beq.n	8002a2c <HAL_TIM_Base_Start_IT+0x80>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a19      	ldr	r2, [pc, #100]	; (8002a84 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d004      	beq.n	8002a2c <HAL_TIM_Base_Start_IT+0x80>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a18      	ldr	r2, [pc, #96]	; (8002a88 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d111      	bne.n	8002a50 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 0307 	and.w	r3, r3, #7
 8002a36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2b06      	cmp	r3, #6
 8002a3c:	d010      	beq.n	8002a60 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f042 0201 	orr.w	r2, r2, #1
 8002a4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a4e:	e007      	b.n	8002a60 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f042 0201 	orr.w	r2, r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	40010000 	.word	0x40010000
 8002a74:	40000400 	.word	0x40000400
 8002a78:	40000800 	.word	0x40000800
 8002a7c:	40000c00 	.word	0x40000c00
 8002a80:	40010400 	.word	0x40010400
 8002a84:	40014000 	.word	0x40014000
 8002a88:	40001800 	.word	0x40001800

08002a8c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e041      	b.n	8002b22 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d106      	bne.n	8002ab8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f839 	bl	8002b2a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2202      	movs	r2, #2
 8002abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	3304      	adds	r3, #4
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4610      	mov	r0, r2
 8002acc:	f000 fbac 	bl	8003228 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b083      	sub	sp, #12
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b32:	bf00      	nop
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
	...

08002b40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d109      	bne.n	8002b64 <HAL_TIM_PWM_Start+0x24>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	bf14      	ite	ne
 8002b5c:	2301      	movne	r3, #1
 8002b5e:	2300      	moveq	r3, #0
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	e022      	b.n	8002baa <HAL_TIM_PWM_Start+0x6a>
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d109      	bne.n	8002b7e <HAL_TIM_PWM_Start+0x3e>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	bf14      	ite	ne
 8002b76:	2301      	movne	r3, #1
 8002b78:	2300      	moveq	r3, #0
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	e015      	b.n	8002baa <HAL_TIM_PWM_Start+0x6a>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d109      	bne.n	8002b98 <HAL_TIM_PWM_Start+0x58>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	bf14      	ite	ne
 8002b90:	2301      	movne	r3, #1
 8002b92:	2300      	moveq	r3, #0
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	e008      	b.n	8002baa <HAL_TIM_PWM_Start+0x6a>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	bf14      	ite	ne
 8002ba4:	2301      	movne	r3, #1
 8002ba6:	2300      	moveq	r3, #0
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e07c      	b.n	8002cac <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d104      	bne.n	8002bc2 <HAL_TIM_PWM_Start+0x82>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2202      	movs	r2, #2
 8002bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bc0:	e013      	b.n	8002bea <HAL_TIM_PWM_Start+0xaa>
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	2b04      	cmp	r3, #4
 8002bc6:	d104      	bne.n	8002bd2 <HAL_TIM_PWM_Start+0x92>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2202      	movs	r2, #2
 8002bcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bd0:	e00b      	b.n	8002bea <HAL_TIM_PWM_Start+0xaa>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	2b08      	cmp	r3, #8
 8002bd6:	d104      	bne.n	8002be2 <HAL_TIM_PWM_Start+0xa2>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002be0:	e003      	b.n	8002bea <HAL_TIM_PWM_Start+0xaa>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2202      	movs	r2, #2
 8002be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	6839      	ldr	r1, [r7, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 fe0e 	bl	8003814 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a2d      	ldr	r2, [pc, #180]	; (8002cb4 <HAL_TIM_PWM_Start+0x174>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d004      	beq.n	8002c0c <HAL_TIM_PWM_Start+0xcc>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a2c      	ldr	r2, [pc, #176]	; (8002cb8 <HAL_TIM_PWM_Start+0x178>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d101      	bne.n	8002c10 <HAL_TIM_PWM_Start+0xd0>
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e000      	b.n	8002c12 <HAL_TIM_PWM_Start+0xd2>
 8002c10:	2300      	movs	r3, #0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d007      	beq.n	8002c26 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a22      	ldr	r2, [pc, #136]	; (8002cb4 <HAL_TIM_PWM_Start+0x174>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d022      	beq.n	8002c76 <HAL_TIM_PWM_Start+0x136>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c38:	d01d      	beq.n	8002c76 <HAL_TIM_PWM_Start+0x136>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a1f      	ldr	r2, [pc, #124]	; (8002cbc <HAL_TIM_PWM_Start+0x17c>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d018      	beq.n	8002c76 <HAL_TIM_PWM_Start+0x136>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a1d      	ldr	r2, [pc, #116]	; (8002cc0 <HAL_TIM_PWM_Start+0x180>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d013      	beq.n	8002c76 <HAL_TIM_PWM_Start+0x136>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a1c      	ldr	r2, [pc, #112]	; (8002cc4 <HAL_TIM_PWM_Start+0x184>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d00e      	beq.n	8002c76 <HAL_TIM_PWM_Start+0x136>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a16      	ldr	r2, [pc, #88]	; (8002cb8 <HAL_TIM_PWM_Start+0x178>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d009      	beq.n	8002c76 <HAL_TIM_PWM_Start+0x136>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a18      	ldr	r2, [pc, #96]	; (8002cc8 <HAL_TIM_PWM_Start+0x188>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d004      	beq.n	8002c76 <HAL_TIM_PWM_Start+0x136>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a16      	ldr	r2, [pc, #88]	; (8002ccc <HAL_TIM_PWM_Start+0x18c>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d111      	bne.n	8002c9a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2b06      	cmp	r3, #6
 8002c86:	d010      	beq.n	8002caa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f042 0201 	orr.w	r2, r2, #1
 8002c96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c98:	e007      	b.n	8002caa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f042 0201 	orr.w	r2, r2, #1
 8002ca8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40010000 	.word	0x40010000
 8002cb8:	40010400 	.word	0x40010400
 8002cbc:	40000400 	.word	0x40000400
 8002cc0:	40000800 	.word	0x40000800
 8002cc4:	40000c00 	.word	0x40000c00
 8002cc8:	40014000 	.word	0x40014000
 8002ccc:	40001800 	.word	0x40001800

08002cd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d020      	beq.n	8002d34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d01b      	beq.n	8002d34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f06f 0202 	mvn.w	r2, #2
 8002d04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fa65 	bl	80031ea <HAL_TIM_IC_CaptureCallback>
 8002d20:	e005      	b.n	8002d2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 fa57 	bl	80031d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 fa68 	bl	80031fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	f003 0304 	and.w	r3, r3, #4
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d020      	beq.n	8002d80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d01b      	beq.n	8002d80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f06f 0204 	mvn.w	r2, #4
 8002d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2202      	movs	r2, #2
 8002d56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 fa3f 	bl	80031ea <HAL_TIM_IC_CaptureCallback>
 8002d6c:	e005      	b.n	8002d7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 fa31 	bl	80031d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 fa42 	bl	80031fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	f003 0308 	and.w	r3, r3, #8
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d020      	beq.n	8002dcc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f003 0308 	and.w	r3, r3, #8
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d01b      	beq.n	8002dcc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f06f 0208 	mvn.w	r2, #8
 8002d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2204      	movs	r2, #4
 8002da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	f003 0303 	and.w	r3, r3, #3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 fa19 	bl	80031ea <HAL_TIM_IC_CaptureCallback>
 8002db8:	e005      	b.n	8002dc6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 fa0b 	bl	80031d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 fa1c 	bl	80031fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	f003 0310 	and.w	r3, r3, #16
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d020      	beq.n	8002e18 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f003 0310 	and.w	r3, r3, #16
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d01b      	beq.n	8002e18 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f06f 0210 	mvn.w	r2, #16
 8002de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2208      	movs	r2, #8
 8002dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 f9f3 	bl	80031ea <HAL_TIM_IC_CaptureCallback>
 8002e04:	e005      	b.n	8002e12 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f9e5 	bl	80031d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 f9f6 	bl	80031fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00c      	beq.n	8002e3c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d007      	beq.n	8002e3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f06f 0201 	mvn.w	r2, #1
 8002e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f9c3 	bl	80031c2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00c      	beq.n	8002e60 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d007      	beq.n	8002e60 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 fd86 	bl	800396c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00c      	beq.n	8002e84 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d007      	beq.n	8002e84 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f9c7 	bl	8003212 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	f003 0320 	and.w	r3, r3, #32
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00c      	beq.n	8002ea8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f003 0320 	and.w	r3, r3, #32
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d007      	beq.n	8002ea8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f06f 0220 	mvn.w	r2, #32
 8002ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 fd58 	bl	8003958 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ea8:	bf00      	nop
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e0ae      	b.n	800302c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2b0c      	cmp	r3, #12
 8002eda:	f200 809f 	bhi.w	800301c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002ede:	a201      	add	r2, pc, #4	; (adr r2, 8002ee4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee4:	08002f19 	.word	0x08002f19
 8002ee8:	0800301d 	.word	0x0800301d
 8002eec:	0800301d 	.word	0x0800301d
 8002ef0:	0800301d 	.word	0x0800301d
 8002ef4:	08002f59 	.word	0x08002f59
 8002ef8:	0800301d 	.word	0x0800301d
 8002efc:	0800301d 	.word	0x0800301d
 8002f00:	0800301d 	.word	0x0800301d
 8002f04:	08002f9b 	.word	0x08002f9b
 8002f08:	0800301d 	.word	0x0800301d
 8002f0c:	0800301d 	.word	0x0800301d
 8002f10:	0800301d 	.word	0x0800301d
 8002f14:	08002fdb 	.word	0x08002fdb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68b9      	ldr	r1, [r7, #8]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 fa2e 	bl	8003380 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	699a      	ldr	r2, [r3, #24]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f042 0208 	orr.w	r2, r2, #8
 8002f32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	699a      	ldr	r2, [r3, #24]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0204 	bic.w	r2, r2, #4
 8002f42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6999      	ldr	r1, [r3, #24]
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	691a      	ldr	r2, [r3, #16]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	619a      	str	r2, [r3, #24]
      break;
 8002f56:	e064      	b.n	8003022 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68b9      	ldr	r1, [r7, #8]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 fa7e 	bl	8003460 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	699a      	ldr	r2, [r3, #24]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699a      	ldr	r2, [r3, #24]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6999      	ldr	r1, [r3, #24]
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	021a      	lsls	r2, r3, #8
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	619a      	str	r2, [r3, #24]
      break;
 8002f98:	e043      	b.n	8003022 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68b9      	ldr	r1, [r7, #8]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f000 fad3 	bl	800354c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	69da      	ldr	r2, [r3, #28]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f042 0208 	orr.w	r2, r2, #8
 8002fb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	69da      	ldr	r2, [r3, #28]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 0204 	bic.w	r2, r2, #4
 8002fc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	69d9      	ldr	r1, [r3, #28]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	691a      	ldr	r2, [r3, #16]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	61da      	str	r2, [r3, #28]
      break;
 8002fd8:	e023      	b.n	8003022 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68b9      	ldr	r1, [r7, #8]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f000 fb27 	bl	8003634 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	69da      	ldr	r2, [r3, #28]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ff4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	69da      	ldr	r2, [r3, #28]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003004:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	69d9      	ldr	r1, [r3, #28]
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	021a      	lsls	r2, r3, #8
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	430a      	orrs	r2, r1
 8003018:	61da      	str	r2, [r3, #28]
      break;
 800301a:	e002      	b.n	8003022 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	75fb      	strb	r3, [r7, #23]
      break;
 8003020:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800302a:	7dfb      	ldrb	r3, [r7, #23]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800303e:	2300      	movs	r3, #0
 8003040:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003048:	2b01      	cmp	r3, #1
 800304a:	d101      	bne.n	8003050 <HAL_TIM_ConfigClockSource+0x1c>
 800304c:	2302      	movs	r3, #2
 800304e:	e0b4      	b.n	80031ba <HAL_TIM_ConfigClockSource+0x186>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2202      	movs	r2, #2
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800306e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003076:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003088:	d03e      	beq.n	8003108 <HAL_TIM_ConfigClockSource+0xd4>
 800308a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800308e:	f200 8087 	bhi.w	80031a0 <HAL_TIM_ConfigClockSource+0x16c>
 8003092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003096:	f000 8086 	beq.w	80031a6 <HAL_TIM_ConfigClockSource+0x172>
 800309a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800309e:	d87f      	bhi.n	80031a0 <HAL_TIM_ConfigClockSource+0x16c>
 80030a0:	2b70      	cmp	r3, #112	; 0x70
 80030a2:	d01a      	beq.n	80030da <HAL_TIM_ConfigClockSource+0xa6>
 80030a4:	2b70      	cmp	r3, #112	; 0x70
 80030a6:	d87b      	bhi.n	80031a0 <HAL_TIM_ConfigClockSource+0x16c>
 80030a8:	2b60      	cmp	r3, #96	; 0x60
 80030aa:	d050      	beq.n	800314e <HAL_TIM_ConfigClockSource+0x11a>
 80030ac:	2b60      	cmp	r3, #96	; 0x60
 80030ae:	d877      	bhi.n	80031a0 <HAL_TIM_ConfigClockSource+0x16c>
 80030b0:	2b50      	cmp	r3, #80	; 0x50
 80030b2:	d03c      	beq.n	800312e <HAL_TIM_ConfigClockSource+0xfa>
 80030b4:	2b50      	cmp	r3, #80	; 0x50
 80030b6:	d873      	bhi.n	80031a0 <HAL_TIM_ConfigClockSource+0x16c>
 80030b8:	2b40      	cmp	r3, #64	; 0x40
 80030ba:	d058      	beq.n	800316e <HAL_TIM_ConfigClockSource+0x13a>
 80030bc:	2b40      	cmp	r3, #64	; 0x40
 80030be:	d86f      	bhi.n	80031a0 <HAL_TIM_ConfigClockSource+0x16c>
 80030c0:	2b30      	cmp	r3, #48	; 0x30
 80030c2:	d064      	beq.n	800318e <HAL_TIM_ConfigClockSource+0x15a>
 80030c4:	2b30      	cmp	r3, #48	; 0x30
 80030c6:	d86b      	bhi.n	80031a0 <HAL_TIM_ConfigClockSource+0x16c>
 80030c8:	2b20      	cmp	r3, #32
 80030ca:	d060      	beq.n	800318e <HAL_TIM_ConfigClockSource+0x15a>
 80030cc:	2b20      	cmp	r3, #32
 80030ce:	d867      	bhi.n	80031a0 <HAL_TIM_ConfigClockSource+0x16c>
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d05c      	beq.n	800318e <HAL_TIM_ConfigClockSource+0x15a>
 80030d4:	2b10      	cmp	r3, #16
 80030d6:	d05a      	beq.n	800318e <HAL_TIM_ConfigClockSource+0x15a>
 80030d8:	e062      	b.n	80031a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030ea:	f000 fb73 	bl	80037d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	609a      	str	r2, [r3, #8]
      break;
 8003106:	e04f      	b.n	80031a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003118:	f000 fb5c 	bl	80037d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800312a:	609a      	str	r2, [r3, #8]
      break;
 800312c:	e03c      	b.n	80031a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800313a:	461a      	mov	r2, r3
 800313c:	f000 fad0 	bl	80036e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2150      	movs	r1, #80	; 0x50
 8003146:	4618      	mov	r0, r3
 8003148:	f000 fb29 	bl	800379e <TIM_ITRx_SetConfig>
      break;
 800314c:	e02c      	b.n	80031a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800315a:	461a      	mov	r2, r3
 800315c:	f000 faef 	bl	800373e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2160      	movs	r1, #96	; 0x60
 8003166:	4618      	mov	r0, r3
 8003168:	f000 fb19 	bl	800379e <TIM_ITRx_SetConfig>
      break;
 800316c:	e01c      	b.n	80031a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800317a:	461a      	mov	r2, r3
 800317c:	f000 fab0 	bl	80036e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2140      	movs	r1, #64	; 0x40
 8003186:	4618      	mov	r0, r3
 8003188:	f000 fb09 	bl	800379e <TIM_ITRx_SetConfig>
      break;
 800318c:	e00c      	b.n	80031a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4619      	mov	r1, r3
 8003198:	4610      	mov	r0, r2
 800319a:	f000 fb00 	bl	800379e <TIM_ITRx_SetConfig>
      break;
 800319e:	e003      	b.n	80031a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	73fb      	strb	r3, [r7, #15]
      break;
 80031a4:	e000      	b.n	80031a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80031a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b083      	sub	sp, #12
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b083      	sub	sp, #12
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
	...

08003228 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a46      	ldr	r2, [pc, #280]	; (8003354 <TIM_Base_SetConfig+0x12c>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d013      	beq.n	8003268 <TIM_Base_SetConfig+0x40>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003246:	d00f      	beq.n	8003268 <TIM_Base_SetConfig+0x40>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a43      	ldr	r2, [pc, #268]	; (8003358 <TIM_Base_SetConfig+0x130>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d00b      	beq.n	8003268 <TIM_Base_SetConfig+0x40>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a42      	ldr	r2, [pc, #264]	; (800335c <TIM_Base_SetConfig+0x134>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d007      	beq.n	8003268 <TIM_Base_SetConfig+0x40>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a41      	ldr	r2, [pc, #260]	; (8003360 <TIM_Base_SetConfig+0x138>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d003      	beq.n	8003268 <TIM_Base_SetConfig+0x40>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a40      	ldr	r2, [pc, #256]	; (8003364 <TIM_Base_SetConfig+0x13c>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d108      	bne.n	800327a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800326e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	4313      	orrs	r3, r2
 8003278:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a35      	ldr	r2, [pc, #212]	; (8003354 <TIM_Base_SetConfig+0x12c>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d02b      	beq.n	80032da <TIM_Base_SetConfig+0xb2>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003288:	d027      	beq.n	80032da <TIM_Base_SetConfig+0xb2>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a32      	ldr	r2, [pc, #200]	; (8003358 <TIM_Base_SetConfig+0x130>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d023      	beq.n	80032da <TIM_Base_SetConfig+0xb2>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a31      	ldr	r2, [pc, #196]	; (800335c <TIM_Base_SetConfig+0x134>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d01f      	beq.n	80032da <TIM_Base_SetConfig+0xb2>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a30      	ldr	r2, [pc, #192]	; (8003360 <TIM_Base_SetConfig+0x138>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d01b      	beq.n	80032da <TIM_Base_SetConfig+0xb2>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a2f      	ldr	r2, [pc, #188]	; (8003364 <TIM_Base_SetConfig+0x13c>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d017      	beq.n	80032da <TIM_Base_SetConfig+0xb2>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a2e      	ldr	r2, [pc, #184]	; (8003368 <TIM_Base_SetConfig+0x140>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d013      	beq.n	80032da <TIM_Base_SetConfig+0xb2>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a2d      	ldr	r2, [pc, #180]	; (800336c <TIM_Base_SetConfig+0x144>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d00f      	beq.n	80032da <TIM_Base_SetConfig+0xb2>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a2c      	ldr	r2, [pc, #176]	; (8003370 <TIM_Base_SetConfig+0x148>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d00b      	beq.n	80032da <TIM_Base_SetConfig+0xb2>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a2b      	ldr	r2, [pc, #172]	; (8003374 <TIM_Base_SetConfig+0x14c>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d007      	beq.n	80032da <TIM_Base_SetConfig+0xb2>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a2a      	ldr	r2, [pc, #168]	; (8003378 <TIM_Base_SetConfig+0x150>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d003      	beq.n	80032da <TIM_Base_SetConfig+0xb2>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a29      	ldr	r2, [pc, #164]	; (800337c <TIM_Base_SetConfig+0x154>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d108      	bne.n	80032ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a10      	ldr	r2, [pc, #64]	; (8003354 <TIM_Base_SetConfig+0x12c>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d003      	beq.n	8003320 <TIM_Base_SetConfig+0xf8>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a12      	ldr	r2, [pc, #72]	; (8003364 <TIM_Base_SetConfig+0x13c>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d103      	bne.n	8003328 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	691a      	ldr	r2, [r3, #16]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b01      	cmp	r3, #1
 8003338:	d105      	bne.n	8003346 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	f023 0201 	bic.w	r2, r3, #1
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	611a      	str	r2, [r3, #16]
  }
}
 8003346:	bf00      	nop
 8003348:	3714      	adds	r7, #20
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	40010000 	.word	0x40010000
 8003358:	40000400 	.word	0x40000400
 800335c:	40000800 	.word	0x40000800
 8003360:	40000c00 	.word	0x40000c00
 8003364:	40010400 	.word	0x40010400
 8003368:	40014000 	.word	0x40014000
 800336c:	40014400 	.word	0x40014400
 8003370:	40014800 	.word	0x40014800
 8003374:	40001800 	.word	0x40001800
 8003378:	40001c00 	.word	0x40001c00
 800337c:	40002000 	.word	0x40002000

08003380 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003380:	b480      	push	{r7}
 8003382:	b087      	sub	sp, #28
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	f023 0201 	bic.w	r2, r3, #1
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f023 0303 	bic.w	r3, r3, #3
 80033b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	4313      	orrs	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	f023 0302 	bic.w	r3, r3, #2
 80033c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a20      	ldr	r2, [pc, #128]	; (8003458 <TIM_OC1_SetConfig+0xd8>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d003      	beq.n	80033e4 <TIM_OC1_SetConfig+0x64>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a1f      	ldr	r2, [pc, #124]	; (800345c <TIM_OC1_SetConfig+0xdc>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d10c      	bne.n	80033fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	f023 0308 	bic.w	r3, r3, #8
 80033ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f023 0304 	bic.w	r3, r3, #4
 80033fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a15      	ldr	r2, [pc, #84]	; (8003458 <TIM_OC1_SetConfig+0xd8>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d003      	beq.n	800340e <TIM_OC1_SetConfig+0x8e>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a14      	ldr	r2, [pc, #80]	; (800345c <TIM_OC1_SetConfig+0xdc>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d111      	bne.n	8003432 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003414:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800341c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	4313      	orrs	r3, r2
 8003426:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	4313      	orrs	r3, r2
 8003430:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685a      	ldr	r2, [r3, #4]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	621a      	str	r2, [r3, #32]
}
 800344c:	bf00      	nop
 800344e:	371c      	adds	r7, #28
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	40010000 	.word	0x40010000
 800345c:	40010400 	.word	0x40010400

08003460 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003460:	b480      	push	{r7}
 8003462:	b087      	sub	sp, #28
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	f023 0210 	bic.w	r2, r3, #16
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800348e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003496:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	021b      	lsls	r3, r3, #8
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	f023 0320 	bic.w	r3, r3, #32
 80034aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	011b      	lsls	r3, r3, #4
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a22      	ldr	r2, [pc, #136]	; (8003544 <TIM_OC2_SetConfig+0xe4>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d003      	beq.n	80034c8 <TIM_OC2_SetConfig+0x68>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a21      	ldr	r2, [pc, #132]	; (8003548 <TIM_OC2_SetConfig+0xe8>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d10d      	bne.n	80034e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	4313      	orrs	r3, r2
 80034da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a17      	ldr	r2, [pc, #92]	; (8003544 <TIM_OC2_SetConfig+0xe4>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d003      	beq.n	80034f4 <TIM_OC2_SetConfig+0x94>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a16      	ldr	r2, [pc, #88]	; (8003548 <TIM_OC2_SetConfig+0xe8>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d113      	bne.n	800351c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003502:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	4313      	orrs	r3, r2
 800350e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	4313      	orrs	r3, r2
 800351a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	621a      	str	r2, [r3, #32]
}
 8003536:	bf00      	nop
 8003538:	371c      	adds	r7, #28
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	40010000 	.word	0x40010000
 8003548:	40010400 	.word	0x40010400

0800354c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800354c:	b480      	push	{r7}
 800354e:	b087      	sub	sp, #28
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800357a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f023 0303 	bic.w	r3, r3, #3
 8003582:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	4313      	orrs	r3, r2
 800358c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003594:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	021b      	lsls	r3, r3, #8
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	4313      	orrs	r3, r2
 80035a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a21      	ldr	r2, [pc, #132]	; (800362c <TIM_OC3_SetConfig+0xe0>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d003      	beq.n	80035b2 <TIM_OC3_SetConfig+0x66>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a20      	ldr	r2, [pc, #128]	; (8003630 <TIM_OC3_SetConfig+0xe4>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d10d      	bne.n	80035ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	021b      	lsls	r3, r3, #8
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a16      	ldr	r2, [pc, #88]	; (800362c <TIM_OC3_SetConfig+0xe0>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d003      	beq.n	80035de <TIM_OC3_SetConfig+0x92>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a15      	ldr	r2, [pc, #84]	; (8003630 <TIM_OC3_SetConfig+0xe4>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d113      	bne.n	8003606 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	011b      	lsls	r3, r3, #4
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	4313      	orrs	r3, r2
 8003604:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	621a      	str	r2, [r3, #32]
}
 8003620:	bf00      	nop
 8003622:	371c      	adds	r7, #28
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	40010000 	.word	0x40010000
 8003630:	40010400 	.word	0x40010400

08003634 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003634:	b480      	push	{r7}
 8003636:	b087      	sub	sp, #28
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800366a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	021b      	lsls	r3, r3, #8
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	4313      	orrs	r3, r2
 8003676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800367e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	031b      	lsls	r3, r3, #12
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	4313      	orrs	r3, r2
 800368a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a12      	ldr	r2, [pc, #72]	; (80036d8 <TIM_OC4_SetConfig+0xa4>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d003      	beq.n	800369c <TIM_OC4_SetConfig+0x68>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a11      	ldr	r2, [pc, #68]	; (80036dc <TIM_OC4_SetConfig+0xa8>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d109      	bne.n	80036b0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	019b      	lsls	r3, r3, #6
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	621a      	str	r2, [r3, #32]
}
 80036ca:	bf00      	nop
 80036cc:	371c      	adds	r7, #28
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	40010000 	.word	0x40010000
 80036dc:	40010400 	.word	0x40010400

080036e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b087      	sub	sp, #28
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	f023 0201 	bic.w	r2, r3, #1
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800370a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	011b      	lsls	r3, r3, #4
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	4313      	orrs	r3, r2
 8003714:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f023 030a 	bic.w	r3, r3, #10
 800371c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	4313      	orrs	r3, r2
 8003724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	621a      	str	r2, [r3, #32]
}
 8003732:	bf00      	nop
 8003734:	371c      	adds	r7, #28
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr

0800373e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800373e:	b480      	push	{r7}
 8003740:	b087      	sub	sp, #28
 8003742:	af00      	add	r7, sp, #0
 8003744:	60f8      	str	r0, [r7, #12]
 8003746:	60b9      	str	r1, [r7, #8]
 8003748:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	f023 0210 	bic.w	r2, r3, #16
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003768:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	031b      	lsls	r3, r3, #12
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	4313      	orrs	r3, r2
 8003772:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800377a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	011b      	lsls	r3, r3, #4
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	4313      	orrs	r3, r2
 8003784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	621a      	str	r2, [r3, #32]
}
 8003792:	bf00      	nop
 8003794:	371c      	adds	r7, #28
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800379e:	b480      	push	{r7}
 80037a0:	b085      	sub	sp, #20
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
 80037a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037b6:	683a      	ldr	r2, [r7, #0]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	f043 0307 	orr.w	r3, r3, #7
 80037c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	609a      	str	r2, [r3, #8]
}
 80037c8:	bf00      	nop
 80037ca:	3714      	adds	r7, #20
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b087      	sub	sp, #28
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
 80037e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	021a      	lsls	r2, r3, #8
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	431a      	orrs	r2, r3
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	4313      	orrs	r3, r2
 8003800:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	609a      	str	r2, [r3, #8]
}
 8003808:	bf00      	nop
 800380a:	371c      	adds	r7, #28
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003814:	b480      	push	{r7}
 8003816:	b087      	sub	sp, #28
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	f003 031f 	and.w	r3, r3, #31
 8003826:	2201      	movs	r2, #1
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6a1a      	ldr	r2, [r3, #32]
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	43db      	mvns	r3, r3
 8003836:	401a      	ands	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6a1a      	ldr	r2, [r3, #32]
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	f003 031f 	and.w	r3, r3, #31
 8003846:	6879      	ldr	r1, [r7, #4]
 8003848:	fa01 f303 	lsl.w	r3, r1, r3
 800384c:	431a      	orrs	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	621a      	str	r2, [r3, #32]
}
 8003852:	bf00      	nop
 8003854:	371c      	adds	r7, #28
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
	...

08003860 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003870:	2b01      	cmp	r3, #1
 8003872:	d101      	bne.n	8003878 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003874:	2302      	movs	r3, #2
 8003876:	e05a      	b.n	800392e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2202      	movs	r2, #2
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800389e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a21      	ldr	r2, [pc, #132]	; (800393c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d022      	beq.n	8003902 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c4:	d01d      	beq.n	8003902 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a1d      	ldr	r2, [pc, #116]	; (8003940 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d018      	beq.n	8003902 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a1b      	ldr	r2, [pc, #108]	; (8003944 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d013      	beq.n	8003902 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a1a      	ldr	r2, [pc, #104]	; (8003948 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d00e      	beq.n	8003902 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a18      	ldr	r2, [pc, #96]	; (800394c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d009      	beq.n	8003902 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a17      	ldr	r2, [pc, #92]	; (8003950 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d004      	beq.n	8003902 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a15      	ldr	r2, [pc, #84]	; (8003954 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d10c      	bne.n	800391c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003908:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	4313      	orrs	r3, r2
 8003912:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68ba      	ldr	r2, [r7, #8]
 800391a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	40010000 	.word	0x40010000
 8003940:	40000400 	.word	0x40000400
 8003944:	40000800 	.word	0x40000800
 8003948:	40000c00 	.word	0x40000c00
 800394c:	40010400 	.word	0x40010400
 8003950:	40014000 	.word	0x40014000
 8003954:	40001800 	.word	0x40001800

08003958 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e042      	b.n	8003a18 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d106      	bne.n	80039ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7fd fd9e 	bl	80014e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2224      	movs	r2, #36	; 0x24
 80039b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68da      	ldr	r2, [r3, #12]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 fe55 	bl	8004674 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	691a      	ldr	r2, [r3, #16]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	695a      	ldr	r2, [r3, #20]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68da      	ldr	r2, [r3, #12]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2220      	movs	r2, #32
 8003a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3708      	adds	r7, #8
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b08a      	sub	sp, #40	; 0x28
 8003a24:	af02      	add	r7, sp, #8
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	603b      	str	r3, [r7, #0]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a30:	2300      	movs	r3, #0
 8003a32:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	2b20      	cmp	r3, #32
 8003a3e:	d175      	bne.n	8003b2c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d002      	beq.n	8003a4c <HAL_UART_Transmit+0x2c>
 8003a46:	88fb      	ldrh	r3, [r7, #6]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d101      	bne.n	8003a50 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e06e      	b.n	8003b2e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2221      	movs	r2, #33	; 0x21
 8003a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a5e:	f7fd ff1b 	bl	8001898 <HAL_GetTick>
 8003a62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	88fa      	ldrh	r2, [r7, #6]
 8003a68:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	88fa      	ldrh	r2, [r7, #6]
 8003a6e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a78:	d108      	bne.n	8003a8c <HAL_UART_Transmit+0x6c>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d104      	bne.n	8003a8c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a82:	2300      	movs	r3, #0
 8003a84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	61bb      	str	r3, [r7, #24]
 8003a8a:	e003      	b.n	8003a94 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a90:	2300      	movs	r3, #0
 8003a92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a94:	e02e      	b.n	8003af4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	2180      	movs	r1, #128	; 0x80
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f000 fbb7 	bl	8004214 <UART_WaitOnFlagUntilTimeout>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d005      	beq.n	8003ab8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e03a      	b.n	8003b2e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10b      	bne.n	8003ad6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	881b      	ldrh	r3, [r3, #0]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003acc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	3302      	adds	r3, #2
 8003ad2:	61bb      	str	r3, [r7, #24]
 8003ad4:	e007      	b.n	8003ae6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	781a      	ldrb	r2, [r3, #0]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	3b01      	subs	r3, #1
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1cb      	bne.n	8003a96 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	2200      	movs	r2, #0
 8003b06:	2140      	movs	r1, #64	; 0x40
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f000 fb83 	bl	8004214 <UART_WaitOnFlagUntilTimeout>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d005      	beq.n	8003b20 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2220      	movs	r2, #32
 8003b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e006      	b.n	8003b2e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2220      	movs	r2, #32
 8003b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	e000      	b.n	8003b2e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003b2c:	2302      	movs	r3, #2
  }
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3720      	adds	r7, #32
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b08a      	sub	sp, #40	; 0x28
 8003b3a:	af02      	add	r7, sp, #8
 8003b3c:	60f8      	str	r0, [r7, #12]
 8003b3e:	60b9      	str	r1, [r7, #8]
 8003b40:	603b      	str	r3, [r7, #0]
 8003b42:	4613      	mov	r3, r2
 8003b44:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b46:	2300      	movs	r3, #0
 8003b48:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b20      	cmp	r3, #32
 8003b54:	f040 8081 	bne.w	8003c5a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d002      	beq.n	8003b64 <HAL_UART_Receive+0x2e>
 8003b5e:	88fb      	ldrh	r3, [r7, #6]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d101      	bne.n	8003b68 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e079      	b.n	8003c5c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2222      	movs	r2, #34	; 0x22
 8003b72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b7c:	f7fd fe8c 	bl	8001898 <HAL_GetTick>
 8003b80:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	88fa      	ldrh	r2, [r7, #6]
 8003b86:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	88fa      	ldrh	r2, [r7, #6]
 8003b8c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b96:	d108      	bne.n	8003baa <HAL_UART_Receive+0x74>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d104      	bne.n	8003baa <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	61bb      	str	r3, [r7, #24]
 8003ba8:	e003      	b.n	8003bb2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003bb2:	e047      	b.n	8003c44 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	2120      	movs	r1, #32
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f000 fb28 	bl	8004214 <UART_WaitOnFlagUntilTimeout>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d005      	beq.n	8003bd6 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e042      	b.n	8003c5c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10c      	bne.n	8003bf6 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	3302      	adds	r3, #2
 8003bf2:	61bb      	str	r3, [r7, #24]
 8003bf4:	e01f      	b.n	8003c36 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bfe:	d007      	beq.n	8003c10 <HAL_UART_Receive+0xda>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d10a      	bne.n	8003c1e <HAL_UART_Receive+0xe8>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d106      	bne.n	8003c1e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	701a      	strb	r2, [r3, #0]
 8003c1c:	e008      	b.n	8003c30 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	3301      	adds	r3, #1
 8003c34:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1b2      	bne.n	8003bb4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2220      	movs	r2, #32
 8003c52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8003c56:	2300      	movs	r3, #0
 8003c58:	e000      	b.n	8003c5c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003c5a:	2302      	movs	r3, #2
  }
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3720      	adds	r7, #32
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b20      	cmp	r3, #32
 8003c7c:	d112      	bne.n	8003ca4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d002      	beq.n	8003c8a <HAL_UART_Receive_IT+0x26>
 8003c84:	88fb      	ldrh	r3, [r7, #6]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e00b      	b.n	8003ca6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003c94:	88fb      	ldrh	r3, [r7, #6]
 8003c96:	461a      	mov	r2, r3
 8003c98:	68b9      	ldr	r1, [r7, #8]
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f000 fb13 	bl	80042c6 <UART_Start_Receive_IT>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	e000      	b.n	8003ca6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003ca4:	2302      	movs	r3, #2
  }
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
	...

08003cb0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b0ba      	sub	sp, #232	; 0xe8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ce6:	f003 030f 	and.w	r3, r3, #15
 8003cea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003cee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10f      	bne.n	8003d16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cfa:	f003 0320 	and.w	r3, r3, #32
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d009      	beq.n	8003d16 <HAL_UART_IRQHandler+0x66>
 8003d02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d06:	f003 0320 	and.w	r3, r3, #32
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 fbf2 	bl	80044f8 <UART_Receive_IT>
      return;
 8003d14:	e25b      	b.n	80041ce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003d16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f000 80de 	beq.w	8003edc <HAL_UART_IRQHandler+0x22c>
 8003d20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d106      	bne.n	8003d3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d30:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 80d1 	beq.w	8003edc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00b      	beq.n	8003d5e <HAL_UART_IRQHandler+0xae>
 8003d46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d005      	beq.n	8003d5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d56:	f043 0201 	orr.w	r2, r3, #1
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d62:	f003 0304 	and.w	r3, r3, #4
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00b      	beq.n	8003d82 <HAL_UART_IRQHandler+0xd2>
 8003d6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d005      	beq.n	8003d82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7a:	f043 0202 	orr.w	r2, r3, #2
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00b      	beq.n	8003da6 <HAL_UART_IRQHandler+0xf6>
 8003d8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d005      	beq.n	8003da6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9e:	f043 0204 	orr.w	r2, r3, #4
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003daa:	f003 0308 	and.w	r3, r3, #8
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d011      	beq.n	8003dd6 <HAL_UART_IRQHandler+0x126>
 8003db2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003db6:	f003 0320 	and.w	r3, r3, #32
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d105      	bne.n	8003dca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003dbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d005      	beq.n	8003dd6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dce:	f043 0208 	orr.w	r2, r3, #8
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f000 81f2 	beq.w	80041c4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003de4:	f003 0320 	and.w	r3, r3, #32
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d008      	beq.n	8003dfe <HAL_UART_IRQHandler+0x14e>
 8003dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003df0:	f003 0320 	and.w	r3, r3, #32
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d002      	beq.n	8003dfe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 fb7d 	bl	80044f8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	695b      	ldr	r3, [r3, #20]
 8003e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e08:	2b40      	cmp	r3, #64	; 0x40
 8003e0a:	bf0c      	ite	eq
 8003e0c:	2301      	moveq	r3, #1
 8003e0e:	2300      	movne	r3, #0
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1a:	f003 0308 	and.w	r3, r3, #8
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d103      	bne.n	8003e2a <HAL_UART_IRQHandler+0x17a>
 8003e22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d04f      	beq.n	8003eca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 fa85 	bl	800433a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3a:	2b40      	cmp	r3, #64	; 0x40
 8003e3c:	d141      	bne.n	8003ec2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	3314      	adds	r3, #20
 8003e44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e4c:	e853 3f00 	ldrex	r3, [r3]
 8003e50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	3314      	adds	r3, #20
 8003e66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003e6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003e76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003e7a:	e841 2300 	strex	r3, r2, [r1]
 8003e7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003e82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1d9      	bne.n	8003e3e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d013      	beq.n	8003eba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e96:	4a7e      	ldr	r2, [pc, #504]	; (8004090 <HAL_UART_IRQHandler+0x3e0>)
 8003e98:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7fd feab 	bl	8001bfa <HAL_DMA_Abort_IT>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d016      	beq.n	8003ed8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003eb4:	4610      	mov	r0, r2
 8003eb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eb8:	e00e      	b.n	8003ed8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f994 	bl	80041e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec0:	e00a      	b.n	8003ed8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f990 	bl	80041e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec8:	e006      	b.n	8003ed8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f98c 	bl	80041e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003ed6:	e175      	b.n	80041c4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed8:	bf00      	nop
    return;
 8003eda:	e173      	b.n	80041c4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	f040 814f 	bne.w	8004184 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eea:	f003 0310 	and.w	r3, r3, #16
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 8148 	beq.w	8004184 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ef8:	f003 0310 	and.w	r3, r3, #16
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f000 8141 	beq.w	8004184 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f02:	2300      	movs	r3, #0
 8003f04:	60bb      	str	r3, [r7, #8]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	60bb      	str	r3, [r7, #8]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	60bb      	str	r3, [r7, #8]
 8003f16:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f22:	2b40      	cmp	r3, #64	; 0x40
 8003f24:	f040 80b6 	bne.w	8004094 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f000 8145 	beq.w	80041c8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f46:	429a      	cmp	r2, r3
 8003f48:	f080 813e 	bcs.w	80041c8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f52:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f58:	69db      	ldr	r3, [r3, #28]
 8003f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f5e:	f000 8088 	beq.w	8004072 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	330c      	adds	r3, #12
 8003f68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f70:	e853 3f00 	ldrex	r3, [r3]
 8003f74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003f78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	330c      	adds	r3, #12
 8003f8a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003f8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f96:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003f9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f9e:	e841 2300 	strex	r3, r2, [r1]
 8003fa2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003fa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1d9      	bne.n	8003f62 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	3314      	adds	r3, #20
 8003fb4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fb8:	e853 3f00 	ldrex	r3, [r3]
 8003fbc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003fbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fc0:	f023 0301 	bic.w	r3, r3, #1
 8003fc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	3314      	adds	r3, #20
 8003fce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003fd2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003fd6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003fda:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003fde:	e841 2300 	strex	r3, r2, [r1]
 8003fe2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003fe4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1e1      	bne.n	8003fae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	3314      	adds	r3, #20
 8003ff0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ff4:	e853 3f00 	ldrex	r3, [r3]
 8003ff8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003ffa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ffc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004000:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	3314      	adds	r3, #20
 800400a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800400e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004010:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004012:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004014:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004016:	e841 2300 	strex	r3, r2, [r1]
 800401a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800401c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1e3      	bne.n	8003fea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2220      	movs	r2, #32
 8004026:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	330c      	adds	r3, #12
 8004036:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800403a:	e853 3f00 	ldrex	r3, [r3]
 800403e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004042:	f023 0310 	bic.w	r3, r3, #16
 8004046:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	330c      	adds	r3, #12
 8004050:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004054:	65ba      	str	r2, [r7, #88]	; 0x58
 8004056:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004058:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800405a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800405c:	e841 2300 	strex	r3, r2, [r1]
 8004060:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1e3      	bne.n	8004030 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800406c:	4618      	mov	r0, r3
 800406e:	f7fd fd54 	bl	8001b1a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2202      	movs	r2, #2
 8004076:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004080:	b29b      	uxth	r3, r3
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	b29b      	uxth	r3, r3
 8004086:	4619      	mov	r1, r3
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 f8b7 	bl	80041fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800408e:	e09b      	b.n	80041c8 <HAL_UART_IRQHandler+0x518>
 8004090:	08004401 	.word	0x08004401
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800409c:	b29b      	uxth	r3, r3
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f000 808e 	beq.w	80041cc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80040b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f000 8089 	beq.w	80041cc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	330c      	adds	r3, #12
 80040c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c4:	e853 3f00 	ldrex	r3, [r3]
 80040c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	330c      	adds	r3, #12
 80040da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80040de:	647a      	str	r2, [r7, #68]	; 0x44
 80040e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040e6:	e841 2300 	strex	r3, r2, [r1]
 80040ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1e3      	bne.n	80040ba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	3314      	adds	r3, #20
 80040f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fc:	e853 3f00 	ldrex	r3, [r3]
 8004100:	623b      	str	r3, [r7, #32]
   return(result);
 8004102:	6a3b      	ldr	r3, [r7, #32]
 8004104:	f023 0301 	bic.w	r3, r3, #1
 8004108:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	3314      	adds	r3, #20
 8004112:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004116:	633a      	str	r2, [r7, #48]	; 0x30
 8004118:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800411c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800411e:	e841 2300 	strex	r3, r2, [r1]
 8004122:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1e3      	bne.n	80040f2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2220      	movs	r2, #32
 800412e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	330c      	adds	r3, #12
 800413e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	e853 3f00 	ldrex	r3, [r3]
 8004146:	60fb      	str	r3, [r7, #12]
   return(result);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f023 0310 	bic.w	r3, r3, #16
 800414e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	330c      	adds	r3, #12
 8004158:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800415c:	61fa      	str	r2, [r7, #28]
 800415e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004160:	69b9      	ldr	r1, [r7, #24]
 8004162:	69fa      	ldr	r2, [r7, #28]
 8004164:	e841 2300 	strex	r3, r2, [r1]
 8004168:	617b      	str	r3, [r7, #20]
   return(result);
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1e3      	bne.n	8004138 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2202      	movs	r2, #2
 8004174:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004176:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800417a:	4619      	mov	r1, r3
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f83d 	bl	80041fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004182:	e023      	b.n	80041cc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418c:	2b00      	cmp	r3, #0
 800418e:	d009      	beq.n	80041a4 <HAL_UART_IRQHandler+0x4f4>
 8004190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004198:	2b00      	cmp	r3, #0
 800419a:	d003      	beq.n	80041a4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 f943 	bl	8004428 <UART_Transmit_IT>
    return;
 80041a2:	e014      	b.n	80041ce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80041a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00e      	beq.n	80041ce <HAL_UART_IRQHandler+0x51e>
 80041b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d008      	beq.n	80041ce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 f983 	bl	80044c8 <UART_EndTransmit_IT>
    return;
 80041c2:	e004      	b.n	80041ce <HAL_UART_IRQHandler+0x51e>
    return;
 80041c4:	bf00      	nop
 80041c6:	e002      	b.n	80041ce <HAL_UART_IRQHandler+0x51e>
      return;
 80041c8:	bf00      	nop
 80041ca:	e000      	b.n	80041ce <HAL_UART_IRQHandler+0x51e>
      return;
 80041cc:	bf00      	nop
  }
}
 80041ce:	37e8      	adds	r7, #232	; 0xe8
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	460b      	mov	r3, r1
 8004206:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	603b      	str	r3, [r7, #0]
 8004220:	4613      	mov	r3, r2
 8004222:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004224:	e03b      	b.n	800429e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004226:	6a3b      	ldr	r3, [r7, #32]
 8004228:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800422c:	d037      	beq.n	800429e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800422e:	f7fd fb33 	bl	8001898 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	6a3a      	ldr	r2, [r7, #32]
 800423a:	429a      	cmp	r2, r3
 800423c:	d302      	bcc.n	8004244 <UART_WaitOnFlagUntilTimeout+0x30>
 800423e:	6a3b      	ldr	r3, [r7, #32]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e03a      	b.n	80042be <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	f003 0304 	and.w	r3, r3, #4
 8004252:	2b00      	cmp	r3, #0
 8004254:	d023      	beq.n	800429e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	2b80      	cmp	r3, #128	; 0x80
 800425a:	d020      	beq.n	800429e <UART_WaitOnFlagUntilTimeout+0x8a>
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	2b40      	cmp	r3, #64	; 0x40
 8004260:	d01d      	beq.n	800429e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0308 	and.w	r3, r3, #8
 800426c:	2b08      	cmp	r3, #8
 800426e:	d116      	bne.n	800429e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004270:	2300      	movs	r3, #0
 8004272:	617b      	str	r3, [r7, #20]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	617b      	str	r3, [r7, #20]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	617b      	str	r3, [r7, #20]
 8004284:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f000 f857 	bl	800433a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2208      	movs	r2, #8
 8004290:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e00f      	b.n	80042be <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	4013      	ands	r3, r2
 80042a8:	68ba      	ldr	r2, [r7, #8]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	bf0c      	ite	eq
 80042ae:	2301      	moveq	r3, #1
 80042b0:	2300      	movne	r3, #0
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	461a      	mov	r2, r3
 80042b6:	79fb      	ldrb	r3, [r7, #7]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d0b4      	beq.n	8004226 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3718      	adds	r7, #24
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b085      	sub	sp, #20
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	60f8      	str	r0, [r7, #12]
 80042ce:	60b9      	str	r1, [r7, #8]
 80042d0:	4613      	mov	r3, r2
 80042d2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	88fa      	ldrh	r2, [r7, #6]
 80042de:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	88fa      	ldrh	r2, [r7, #6]
 80042e4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2222      	movs	r2, #34	; 0x22
 80042f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d007      	beq.n	800430c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68da      	ldr	r2, [r3, #12]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800430a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	695a      	ldr	r2, [r3, #20]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f042 0201 	orr.w	r2, r2, #1
 800431a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68da      	ldr	r2, [r3, #12]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f042 0220 	orr.w	r2, r2, #32
 800432a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3714      	adds	r7, #20
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr

0800433a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800433a:	b480      	push	{r7}
 800433c:	b095      	sub	sp, #84	; 0x54
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	330c      	adds	r3, #12
 8004348:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800434c:	e853 3f00 	ldrex	r3, [r3]
 8004350:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004354:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004358:	64fb      	str	r3, [r7, #76]	; 0x4c
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	330c      	adds	r3, #12
 8004360:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004362:	643a      	str	r2, [r7, #64]	; 0x40
 8004364:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004366:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004368:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800436a:	e841 2300 	strex	r3, r2, [r1]
 800436e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1e5      	bne.n	8004342 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	3314      	adds	r3, #20
 800437c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437e:	6a3b      	ldr	r3, [r7, #32]
 8004380:	e853 3f00 	ldrex	r3, [r3]
 8004384:	61fb      	str	r3, [r7, #28]
   return(result);
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	f023 0301 	bic.w	r3, r3, #1
 800438c:	64bb      	str	r3, [r7, #72]	; 0x48
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	3314      	adds	r3, #20
 8004394:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004396:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004398:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800439c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800439e:	e841 2300 	strex	r3, r2, [r1]
 80043a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1e5      	bne.n	8004376 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d119      	bne.n	80043e6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	330c      	adds	r3, #12
 80043b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	e853 3f00 	ldrex	r3, [r3]
 80043c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	f023 0310 	bic.w	r3, r3, #16
 80043c8:	647b      	str	r3, [r7, #68]	; 0x44
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	330c      	adds	r3, #12
 80043d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043d2:	61ba      	str	r2, [r7, #24]
 80043d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d6:	6979      	ldr	r1, [r7, #20]
 80043d8:	69ba      	ldr	r2, [r7, #24]
 80043da:	e841 2300 	strex	r3, r2, [r1]
 80043de:	613b      	str	r3, [r7, #16]
   return(result);
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1e5      	bne.n	80043b2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2220      	movs	r2, #32
 80043ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80043f4:	bf00      	nop
 80043f6:	3754      	adds	r7, #84	; 0x54
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f7ff fee4 	bl	80041e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004420:	bf00      	nop
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b21      	cmp	r3, #33	; 0x21
 800443a:	d13e      	bne.n	80044ba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004444:	d114      	bne.n	8004470 <UART_Transmit_IT+0x48>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d110      	bne.n	8004470 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	881b      	ldrh	r3, [r3, #0]
 8004458:	461a      	mov	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004462:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	1c9a      	adds	r2, r3, #2
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	621a      	str	r2, [r3, #32]
 800446e:	e008      	b.n	8004482 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a1b      	ldr	r3, [r3, #32]
 8004474:	1c59      	adds	r1, r3, #1
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	6211      	str	r1, [r2, #32]
 800447a:	781a      	ldrb	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004486:	b29b      	uxth	r3, r3
 8004488:	3b01      	subs	r3, #1
 800448a:	b29b      	uxth	r3, r3
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	4619      	mov	r1, r3
 8004490:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10f      	bne.n	80044b6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68da      	ldr	r2, [r3, #12]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044a4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68da      	ldr	r2, [r3, #12]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044b4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80044b6:	2300      	movs	r3, #0
 80044b8:	e000      	b.n	80044bc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80044ba:	2302      	movs	r3, #2
  }
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68da      	ldr	r2, [r3, #12]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044de:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2220      	movs	r2, #32
 80044e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f7ff fe73 	bl	80041d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3708      	adds	r7, #8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b08c      	sub	sp, #48	; 0x30
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004506:	b2db      	uxtb	r3, r3
 8004508:	2b22      	cmp	r3, #34	; 0x22
 800450a:	f040 80ae 	bne.w	800466a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004516:	d117      	bne.n	8004548 <UART_Receive_IT+0x50>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d113      	bne.n	8004548 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004520:	2300      	movs	r3, #0
 8004522:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004528:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	b29b      	uxth	r3, r3
 8004532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004536:	b29a      	uxth	r2, r3
 8004538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004540:	1c9a      	adds	r2, r3, #2
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	629a      	str	r2, [r3, #40]	; 0x28
 8004546:	e026      	b.n	8004596 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800454e:	2300      	movs	r3, #0
 8004550:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800455a:	d007      	beq.n	800456c <UART_Receive_IT+0x74>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10a      	bne.n	800457a <UART_Receive_IT+0x82>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d106      	bne.n	800457a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	b2da      	uxtb	r2, r3
 8004574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004576:	701a      	strb	r2, [r3, #0]
 8004578:	e008      	b.n	800458c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	b2db      	uxtb	r3, r3
 8004582:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004586:	b2da      	uxtb	r2, r3
 8004588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800458a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004590:	1c5a      	adds	r2, r3, #1
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800459a:	b29b      	uxth	r3, r3
 800459c:	3b01      	subs	r3, #1
 800459e:	b29b      	uxth	r3, r3
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	4619      	mov	r1, r3
 80045a4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d15d      	bne.n	8004666 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68da      	ldr	r2, [r3, #12]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f022 0220 	bic.w	r2, r2, #32
 80045b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68da      	ldr	r2, [r3, #12]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	695a      	ldr	r2, [r3, #20]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f022 0201 	bic.w	r2, r2, #1
 80045d8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2220      	movs	r2, #32
 80045de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d135      	bne.n	800465c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	330c      	adds	r3, #12
 80045fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	e853 3f00 	ldrex	r3, [r3]
 8004604:	613b      	str	r3, [r7, #16]
   return(result);
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	f023 0310 	bic.w	r3, r3, #16
 800460c:	627b      	str	r3, [r7, #36]	; 0x24
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	330c      	adds	r3, #12
 8004614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004616:	623a      	str	r2, [r7, #32]
 8004618:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461a:	69f9      	ldr	r1, [r7, #28]
 800461c:	6a3a      	ldr	r2, [r7, #32]
 800461e:	e841 2300 	strex	r3, r2, [r1]
 8004622:	61bb      	str	r3, [r7, #24]
   return(result);
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1e5      	bne.n	80045f6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0310 	and.w	r3, r3, #16
 8004634:	2b10      	cmp	r3, #16
 8004636:	d10a      	bne.n	800464e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004638:	2300      	movs	r3, #0
 800463a:	60fb      	str	r3, [r7, #12]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	60fb      	str	r3, [r7, #12]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	60fb      	str	r3, [r7, #12]
 800464c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004652:	4619      	mov	r1, r3
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f7ff fdd1 	bl	80041fc <HAL_UARTEx_RxEventCallback>
 800465a:	e002      	b.n	8004662 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f7fc fa7b 	bl	8000b58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004662:	2300      	movs	r3, #0
 8004664:	e002      	b.n	800466c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004666:	2300      	movs	r3, #0
 8004668:	e000      	b.n	800466c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800466a:	2302      	movs	r3, #2
  }
}
 800466c:	4618      	mov	r0, r3
 800466e:	3730      	adds	r7, #48	; 0x30
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004678:	b0c0      	sub	sp, #256	; 0x100
 800467a:	af00      	add	r7, sp, #0
 800467c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800468c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004690:	68d9      	ldr	r1, [r3, #12]
 8004692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	ea40 0301 	orr.w	r3, r0, r1
 800469c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800469e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a2:	689a      	ldr	r2, [r3, #8]
 80046a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	431a      	orrs	r2, r3
 80046ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	431a      	orrs	r2, r3
 80046b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b8:	69db      	ldr	r3, [r3, #28]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80046c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80046cc:	f021 010c 	bic.w	r1, r1, #12
 80046d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80046da:	430b      	orrs	r3, r1
 80046dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80046ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ee:	6999      	ldr	r1, [r3, #24]
 80046f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	ea40 0301 	orr.w	r3, r0, r1
 80046fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80046fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	4b8f      	ldr	r3, [pc, #572]	; (8004940 <UART_SetConfig+0x2cc>)
 8004704:	429a      	cmp	r2, r3
 8004706:	d005      	beq.n	8004714 <UART_SetConfig+0xa0>
 8004708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	4b8d      	ldr	r3, [pc, #564]	; (8004944 <UART_SetConfig+0x2d0>)
 8004710:	429a      	cmp	r2, r3
 8004712:	d104      	bne.n	800471e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004714:	f7fe f8e6 	bl	80028e4 <HAL_RCC_GetPCLK2Freq>
 8004718:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800471c:	e003      	b.n	8004726 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800471e:	f7fe f8cd 	bl	80028bc <HAL_RCC_GetPCLK1Freq>
 8004722:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800472a:	69db      	ldr	r3, [r3, #28]
 800472c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004730:	f040 810c 	bne.w	800494c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004734:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004738:	2200      	movs	r2, #0
 800473a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800473e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004742:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004746:	4622      	mov	r2, r4
 8004748:	462b      	mov	r3, r5
 800474a:	1891      	adds	r1, r2, r2
 800474c:	65b9      	str	r1, [r7, #88]	; 0x58
 800474e:	415b      	adcs	r3, r3
 8004750:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004752:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004756:	4621      	mov	r1, r4
 8004758:	eb12 0801 	adds.w	r8, r2, r1
 800475c:	4629      	mov	r1, r5
 800475e:	eb43 0901 	adc.w	r9, r3, r1
 8004762:	f04f 0200 	mov.w	r2, #0
 8004766:	f04f 0300 	mov.w	r3, #0
 800476a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800476e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004772:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004776:	4690      	mov	r8, r2
 8004778:	4699      	mov	r9, r3
 800477a:	4623      	mov	r3, r4
 800477c:	eb18 0303 	adds.w	r3, r8, r3
 8004780:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004784:	462b      	mov	r3, r5
 8004786:	eb49 0303 	adc.w	r3, r9, r3
 800478a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800478e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800479a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800479e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80047a2:	460b      	mov	r3, r1
 80047a4:	18db      	adds	r3, r3, r3
 80047a6:	653b      	str	r3, [r7, #80]	; 0x50
 80047a8:	4613      	mov	r3, r2
 80047aa:	eb42 0303 	adc.w	r3, r2, r3
 80047ae:	657b      	str	r3, [r7, #84]	; 0x54
 80047b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80047b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80047b8:	f7fb fd62 	bl	8000280 <__aeabi_uldivmod>
 80047bc:	4602      	mov	r2, r0
 80047be:	460b      	mov	r3, r1
 80047c0:	4b61      	ldr	r3, [pc, #388]	; (8004948 <UART_SetConfig+0x2d4>)
 80047c2:	fba3 2302 	umull	r2, r3, r3, r2
 80047c6:	095b      	lsrs	r3, r3, #5
 80047c8:	011c      	lsls	r4, r3, #4
 80047ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047ce:	2200      	movs	r2, #0
 80047d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047d4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80047d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80047dc:	4642      	mov	r2, r8
 80047de:	464b      	mov	r3, r9
 80047e0:	1891      	adds	r1, r2, r2
 80047e2:	64b9      	str	r1, [r7, #72]	; 0x48
 80047e4:	415b      	adcs	r3, r3
 80047e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80047ec:	4641      	mov	r1, r8
 80047ee:	eb12 0a01 	adds.w	sl, r2, r1
 80047f2:	4649      	mov	r1, r9
 80047f4:	eb43 0b01 	adc.w	fp, r3, r1
 80047f8:	f04f 0200 	mov.w	r2, #0
 80047fc:	f04f 0300 	mov.w	r3, #0
 8004800:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004804:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004808:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800480c:	4692      	mov	sl, r2
 800480e:	469b      	mov	fp, r3
 8004810:	4643      	mov	r3, r8
 8004812:	eb1a 0303 	adds.w	r3, sl, r3
 8004816:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800481a:	464b      	mov	r3, r9
 800481c:	eb4b 0303 	adc.w	r3, fp, r3
 8004820:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004830:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004834:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004838:	460b      	mov	r3, r1
 800483a:	18db      	adds	r3, r3, r3
 800483c:	643b      	str	r3, [r7, #64]	; 0x40
 800483e:	4613      	mov	r3, r2
 8004840:	eb42 0303 	adc.w	r3, r2, r3
 8004844:	647b      	str	r3, [r7, #68]	; 0x44
 8004846:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800484a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800484e:	f7fb fd17 	bl	8000280 <__aeabi_uldivmod>
 8004852:	4602      	mov	r2, r0
 8004854:	460b      	mov	r3, r1
 8004856:	4611      	mov	r1, r2
 8004858:	4b3b      	ldr	r3, [pc, #236]	; (8004948 <UART_SetConfig+0x2d4>)
 800485a:	fba3 2301 	umull	r2, r3, r3, r1
 800485e:	095b      	lsrs	r3, r3, #5
 8004860:	2264      	movs	r2, #100	; 0x64
 8004862:	fb02 f303 	mul.w	r3, r2, r3
 8004866:	1acb      	subs	r3, r1, r3
 8004868:	00db      	lsls	r3, r3, #3
 800486a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800486e:	4b36      	ldr	r3, [pc, #216]	; (8004948 <UART_SetConfig+0x2d4>)
 8004870:	fba3 2302 	umull	r2, r3, r3, r2
 8004874:	095b      	lsrs	r3, r3, #5
 8004876:	005b      	lsls	r3, r3, #1
 8004878:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800487c:	441c      	add	r4, r3
 800487e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004882:	2200      	movs	r2, #0
 8004884:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004888:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800488c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004890:	4642      	mov	r2, r8
 8004892:	464b      	mov	r3, r9
 8004894:	1891      	adds	r1, r2, r2
 8004896:	63b9      	str	r1, [r7, #56]	; 0x38
 8004898:	415b      	adcs	r3, r3
 800489a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800489c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80048a0:	4641      	mov	r1, r8
 80048a2:	1851      	adds	r1, r2, r1
 80048a4:	6339      	str	r1, [r7, #48]	; 0x30
 80048a6:	4649      	mov	r1, r9
 80048a8:	414b      	adcs	r3, r1
 80048aa:	637b      	str	r3, [r7, #52]	; 0x34
 80048ac:	f04f 0200 	mov.w	r2, #0
 80048b0:	f04f 0300 	mov.w	r3, #0
 80048b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80048b8:	4659      	mov	r1, fp
 80048ba:	00cb      	lsls	r3, r1, #3
 80048bc:	4651      	mov	r1, sl
 80048be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048c2:	4651      	mov	r1, sl
 80048c4:	00ca      	lsls	r2, r1, #3
 80048c6:	4610      	mov	r0, r2
 80048c8:	4619      	mov	r1, r3
 80048ca:	4603      	mov	r3, r0
 80048cc:	4642      	mov	r2, r8
 80048ce:	189b      	adds	r3, r3, r2
 80048d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048d4:	464b      	mov	r3, r9
 80048d6:	460a      	mov	r2, r1
 80048d8:	eb42 0303 	adc.w	r3, r2, r3
 80048dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80048ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80048f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80048f4:	460b      	mov	r3, r1
 80048f6:	18db      	adds	r3, r3, r3
 80048f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80048fa:	4613      	mov	r3, r2
 80048fc:	eb42 0303 	adc.w	r3, r2, r3
 8004900:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004902:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004906:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800490a:	f7fb fcb9 	bl	8000280 <__aeabi_uldivmod>
 800490e:	4602      	mov	r2, r0
 8004910:	460b      	mov	r3, r1
 8004912:	4b0d      	ldr	r3, [pc, #52]	; (8004948 <UART_SetConfig+0x2d4>)
 8004914:	fba3 1302 	umull	r1, r3, r3, r2
 8004918:	095b      	lsrs	r3, r3, #5
 800491a:	2164      	movs	r1, #100	; 0x64
 800491c:	fb01 f303 	mul.w	r3, r1, r3
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	3332      	adds	r3, #50	; 0x32
 8004926:	4a08      	ldr	r2, [pc, #32]	; (8004948 <UART_SetConfig+0x2d4>)
 8004928:	fba2 2303 	umull	r2, r3, r2, r3
 800492c:	095b      	lsrs	r3, r3, #5
 800492e:	f003 0207 	and.w	r2, r3, #7
 8004932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4422      	add	r2, r4
 800493a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800493c:	e106      	b.n	8004b4c <UART_SetConfig+0x4d8>
 800493e:	bf00      	nop
 8004940:	40011000 	.word	0x40011000
 8004944:	40011400 	.word	0x40011400
 8004948:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800494c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004950:	2200      	movs	r2, #0
 8004952:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004956:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800495a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800495e:	4642      	mov	r2, r8
 8004960:	464b      	mov	r3, r9
 8004962:	1891      	adds	r1, r2, r2
 8004964:	6239      	str	r1, [r7, #32]
 8004966:	415b      	adcs	r3, r3
 8004968:	627b      	str	r3, [r7, #36]	; 0x24
 800496a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800496e:	4641      	mov	r1, r8
 8004970:	1854      	adds	r4, r2, r1
 8004972:	4649      	mov	r1, r9
 8004974:	eb43 0501 	adc.w	r5, r3, r1
 8004978:	f04f 0200 	mov.w	r2, #0
 800497c:	f04f 0300 	mov.w	r3, #0
 8004980:	00eb      	lsls	r3, r5, #3
 8004982:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004986:	00e2      	lsls	r2, r4, #3
 8004988:	4614      	mov	r4, r2
 800498a:	461d      	mov	r5, r3
 800498c:	4643      	mov	r3, r8
 800498e:	18e3      	adds	r3, r4, r3
 8004990:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004994:	464b      	mov	r3, r9
 8004996:	eb45 0303 	adc.w	r3, r5, r3
 800499a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800499e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80049aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80049ae:	f04f 0200 	mov.w	r2, #0
 80049b2:	f04f 0300 	mov.w	r3, #0
 80049b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80049ba:	4629      	mov	r1, r5
 80049bc:	008b      	lsls	r3, r1, #2
 80049be:	4621      	mov	r1, r4
 80049c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049c4:	4621      	mov	r1, r4
 80049c6:	008a      	lsls	r2, r1, #2
 80049c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80049cc:	f7fb fc58 	bl	8000280 <__aeabi_uldivmod>
 80049d0:	4602      	mov	r2, r0
 80049d2:	460b      	mov	r3, r1
 80049d4:	4b60      	ldr	r3, [pc, #384]	; (8004b58 <UART_SetConfig+0x4e4>)
 80049d6:	fba3 2302 	umull	r2, r3, r3, r2
 80049da:	095b      	lsrs	r3, r3, #5
 80049dc:	011c      	lsls	r4, r3, #4
 80049de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049e2:	2200      	movs	r2, #0
 80049e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80049e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80049ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80049f0:	4642      	mov	r2, r8
 80049f2:	464b      	mov	r3, r9
 80049f4:	1891      	adds	r1, r2, r2
 80049f6:	61b9      	str	r1, [r7, #24]
 80049f8:	415b      	adcs	r3, r3
 80049fa:	61fb      	str	r3, [r7, #28]
 80049fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a00:	4641      	mov	r1, r8
 8004a02:	1851      	adds	r1, r2, r1
 8004a04:	6139      	str	r1, [r7, #16]
 8004a06:	4649      	mov	r1, r9
 8004a08:	414b      	adcs	r3, r1
 8004a0a:	617b      	str	r3, [r7, #20]
 8004a0c:	f04f 0200 	mov.w	r2, #0
 8004a10:	f04f 0300 	mov.w	r3, #0
 8004a14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a18:	4659      	mov	r1, fp
 8004a1a:	00cb      	lsls	r3, r1, #3
 8004a1c:	4651      	mov	r1, sl
 8004a1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a22:	4651      	mov	r1, sl
 8004a24:	00ca      	lsls	r2, r1, #3
 8004a26:	4610      	mov	r0, r2
 8004a28:	4619      	mov	r1, r3
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	4642      	mov	r2, r8
 8004a2e:	189b      	adds	r3, r3, r2
 8004a30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a34:	464b      	mov	r3, r9
 8004a36:	460a      	mov	r2, r1
 8004a38:	eb42 0303 	adc.w	r3, r2, r3
 8004a3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a4a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004a4c:	f04f 0200 	mov.w	r2, #0
 8004a50:	f04f 0300 	mov.w	r3, #0
 8004a54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004a58:	4649      	mov	r1, r9
 8004a5a:	008b      	lsls	r3, r1, #2
 8004a5c:	4641      	mov	r1, r8
 8004a5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a62:	4641      	mov	r1, r8
 8004a64:	008a      	lsls	r2, r1, #2
 8004a66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004a6a:	f7fb fc09 	bl	8000280 <__aeabi_uldivmod>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	460b      	mov	r3, r1
 8004a72:	4611      	mov	r1, r2
 8004a74:	4b38      	ldr	r3, [pc, #224]	; (8004b58 <UART_SetConfig+0x4e4>)
 8004a76:	fba3 2301 	umull	r2, r3, r3, r1
 8004a7a:	095b      	lsrs	r3, r3, #5
 8004a7c:	2264      	movs	r2, #100	; 0x64
 8004a7e:	fb02 f303 	mul.w	r3, r2, r3
 8004a82:	1acb      	subs	r3, r1, r3
 8004a84:	011b      	lsls	r3, r3, #4
 8004a86:	3332      	adds	r3, #50	; 0x32
 8004a88:	4a33      	ldr	r2, [pc, #204]	; (8004b58 <UART_SetConfig+0x4e4>)
 8004a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a8e:	095b      	lsrs	r3, r3, #5
 8004a90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a94:	441c      	add	r4, r3
 8004a96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	673b      	str	r3, [r7, #112]	; 0x70
 8004a9e:	677a      	str	r2, [r7, #116]	; 0x74
 8004aa0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004aa4:	4642      	mov	r2, r8
 8004aa6:	464b      	mov	r3, r9
 8004aa8:	1891      	adds	r1, r2, r2
 8004aaa:	60b9      	str	r1, [r7, #8]
 8004aac:	415b      	adcs	r3, r3
 8004aae:	60fb      	str	r3, [r7, #12]
 8004ab0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ab4:	4641      	mov	r1, r8
 8004ab6:	1851      	adds	r1, r2, r1
 8004ab8:	6039      	str	r1, [r7, #0]
 8004aba:	4649      	mov	r1, r9
 8004abc:	414b      	adcs	r3, r1
 8004abe:	607b      	str	r3, [r7, #4]
 8004ac0:	f04f 0200 	mov.w	r2, #0
 8004ac4:	f04f 0300 	mov.w	r3, #0
 8004ac8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004acc:	4659      	mov	r1, fp
 8004ace:	00cb      	lsls	r3, r1, #3
 8004ad0:	4651      	mov	r1, sl
 8004ad2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ad6:	4651      	mov	r1, sl
 8004ad8:	00ca      	lsls	r2, r1, #3
 8004ada:	4610      	mov	r0, r2
 8004adc:	4619      	mov	r1, r3
 8004ade:	4603      	mov	r3, r0
 8004ae0:	4642      	mov	r2, r8
 8004ae2:	189b      	adds	r3, r3, r2
 8004ae4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ae6:	464b      	mov	r3, r9
 8004ae8:	460a      	mov	r2, r1
 8004aea:	eb42 0303 	adc.w	r3, r2, r3
 8004aee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	663b      	str	r3, [r7, #96]	; 0x60
 8004afa:	667a      	str	r2, [r7, #100]	; 0x64
 8004afc:	f04f 0200 	mov.w	r2, #0
 8004b00:	f04f 0300 	mov.w	r3, #0
 8004b04:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004b08:	4649      	mov	r1, r9
 8004b0a:	008b      	lsls	r3, r1, #2
 8004b0c:	4641      	mov	r1, r8
 8004b0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b12:	4641      	mov	r1, r8
 8004b14:	008a      	lsls	r2, r1, #2
 8004b16:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004b1a:	f7fb fbb1 	bl	8000280 <__aeabi_uldivmod>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	460b      	mov	r3, r1
 8004b22:	4b0d      	ldr	r3, [pc, #52]	; (8004b58 <UART_SetConfig+0x4e4>)
 8004b24:	fba3 1302 	umull	r1, r3, r3, r2
 8004b28:	095b      	lsrs	r3, r3, #5
 8004b2a:	2164      	movs	r1, #100	; 0x64
 8004b2c:	fb01 f303 	mul.w	r3, r1, r3
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	011b      	lsls	r3, r3, #4
 8004b34:	3332      	adds	r3, #50	; 0x32
 8004b36:	4a08      	ldr	r2, [pc, #32]	; (8004b58 <UART_SetConfig+0x4e4>)
 8004b38:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3c:	095b      	lsrs	r3, r3, #5
 8004b3e:	f003 020f 	and.w	r2, r3, #15
 8004b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4422      	add	r2, r4
 8004b4a:	609a      	str	r2, [r3, #8]
}
 8004b4c:	bf00      	nop
 8004b4e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004b52:	46bd      	mov	sp, r7
 8004b54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b58:	51eb851f 	.word	0x51eb851f

08004b5c <siprintf>:
 8004b5c:	b40e      	push	{r1, r2, r3}
 8004b5e:	b500      	push	{lr}
 8004b60:	b09c      	sub	sp, #112	; 0x70
 8004b62:	ab1d      	add	r3, sp, #116	; 0x74
 8004b64:	9002      	str	r0, [sp, #8]
 8004b66:	9006      	str	r0, [sp, #24]
 8004b68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b6c:	4809      	ldr	r0, [pc, #36]	; (8004b94 <siprintf+0x38>)
 8004b6e:	9107      	str	r1, [sp, #28]
 8004b70:	9104      	str	r1, [sp, #16]
 8004b72:	4909      	ldr	r1, [pc, #36]	; (8004b98 <siprintf+0x3c>)
 8004b74:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b78:	9105      	str	r1, [sp, #20]
 8004b7a:	6800      	ldr	r0, [r0, #0]
 8004b7c:	9301      	str	r3, [sp, #4]
 8004b7e:	a902      	add	r1, sp, #8
 8004b80:	f000 f8c4 	bl	8004d0c <_svfiprintf_r>
 8004b84:	9b02      	ldr	r3, [sp, #8]
 8004b86:	2200      	movs	r2, #0
 8004b88:	701a      	strb	r2, [r3, #0]
 8004b8a:	b01c      	add	sp, #112	; 0x70
 8004b8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b90:	b003      	add	sp, #12
 8004b92:	4770      	bx	lr
 8004b94:	2000005c 	.word	0x2000005c
 8004b98:	ffff0208 	.word	0xffff0208

08004b9c <strncpy>:
 8004b9c:	b510      	push	{r4, lr}
 8004b9e:	3901      	subs	r1, #1
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	b132      	cbz	r2, 8004bb2 <strncpy+0x16>
 8004ba4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004ba8:	f803 4b01 	strb.w	r4, [r3], #1
 8004bac:	3a01      	subs	r2, #1
 8004bae:	2c00      	cmp	r4, #0
 8004bb0:	d1f7      	bne.n	8004ba2 <strncpy+0x6>
 8004bb2:	441a      	add	r2, r3
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d100      	bne.n	8004bbc <strncpy+0x20>
 8004bba:	bd10      	pop	{r4, pc}
 8004bbc:	f803 1b01 	strb.w	r1, [r3], #1
 8004bc0:	e7f9      	b.n	8004bb6 <strncpy+0x1a>

08004bc2 <strstr>:
 8004bc2:	780a      	ldrb	r2, [r1, #0]
 8004bc4:	b570      	push	{r4, r5, r6, lr}
 8004bc6:	b96a      	cbnz	r2, 8004be4 <strstr+0x22>
 8004bc8:	bd70      	pop	{r4, r5, r6, pc}
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d109      	bne.n	8004be2 <strstr+0x20>
 8004bce:	460c      	mov	r4, r1
 8004bd0:	4605      	mov	r5, r0
 8004bd2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d0f6      	beq.n	8004bc8 <strstr+0x6>
 8004bda:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004bde:	429e      	cmp	r6, r3
 8004be0:	d0f7      	beq.n	8004bd2 <strstr+0x10>
 8004be2:	3001      	adds	r0, #1
 8004be4:	7803      	ldrb	r3, [r0, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1ef      	bne.n	8004bca <strstr+0x8>
 8004bea:	4618      	mov	r0, r3
 8004bec:	e7ec      	b.n	8004bc8 <strstr+0x6>

08004bee <memset>:
 8004bee:	4402      	add	r2, r0
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d100      	bne.n	8004bf8 <memset+0xa>
 8004bf6:	4770      	bx	lr
 8004bf8:	f803 1b01 	strb.w	r1, [r3], #1
 8004bfc:	e7f9      	b.n	8004bf2 <memset+0x4>
	...

08004c00 <__errno>:
 8004c00:	4b01      	ldr	r3, [pc, #4]	; (8004c08 <__errno+0x8>)
 8004c02:	6818      	ldr	r0, [r3, #0]
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	2000005c 	.word	0x2000005c

08004c0c <__libc_init_array>:
 8004c0c:	b570      	push	{r4, r5, r6, lr}
 8004c0e:	4d0d      	ldr	r5, [pc, #52]	; (8004c44 <__libc_init_array+0x38>)
 8004c10:	4c0d      	ldr	r4, [pc, #52]	; (8004c48 <__libc_init_array+0x3c>)
 8004c12:	1b64      	subs	r4, r4, r5
 8004c14:	10a4      	asrs	r4, r4, #2
 8004c16:	2600      	movs	r6, #0
 8004c18:	42a6      	cmp	r6, r4
 8004c1a:	d109      	bne.n	8004c30 <__libc_init_array+0x24>
 8004c1c:	4d0b      	ldr	r5, [pc, #44]	; (8004c4c <__libc_init_array+0x40>)
 8004c1e:	4c0c      	ldr	r4, [pc, #48]	; (8004c50 <__libc_init_array+0x44>)
 8004c20:	f000 fc6a 	bl	80054f8 <_init>
 8004c24:	1b64      	subs	r4, r4, r5
 8004c26:	10a4      	asrs	r4, r4, #2
 8004c28:	2600      	movs	r6, #0
 8004c2a:	42a6      	cmp	r6, r4
 8004c2c:	d105      	bne.n	8004c3a <__libc_init_array+0x2e>
 8004c2e:	bd70      	pop	{r4, r5, r6, pc}
 8004c30:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c34:	4798      	blx	r3
 8004c36:	3601      	adds	r6, #1
 8004c38:	e7ee      	b.n	8004c18 <__libc_init_array+0xc>
 8004c3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c3e:	4798      	blx	r3
 8004c40:	3601      	adds	r6, #1
 8004c42:	e7f2      	b.n	8004c2a <__libc_init_array+0x1e>
 8004c44:	080058f4 	.word	0x080058f4
 8004c48:	080058f4 	.word	0x080058f4
 8004c4c:	080058f4 	.word	0x080058f4
 8004c50:	080058f8 	.word	0x080058f8

08004c54 <__retarget_lock_acquire_recursive>:
 8004c54:	4770      	bx	lr

08004c56 <__retarget_lock_release_recursive>:
 8004c56:	4770      	bx	lr

08004c58 <__ssputs_r>:
 8004c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c5c:	688e      	ldr	r6, [r1, #8]
 8004c5e:	461f      	mov	r7, r3
 8004c60:	42be      	cmp	r6, r7
 8004c62:	680b      	ldr	r3, [r1, #0]
 8004c64:	4682      	mov	sl, r0
 8004c66:	460c      	mov	r4, r1
 8004c68:	4690      	mov	r8, r2
 8004c6a:	d82c      	bhi.n	8004cc6 <__ssputs_r+0x6e>
 8004c6c:	898a      	ldrh	r2, [r1, #12]
 8004c6e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c72:	d026      	beq.n	8004cc2 <__ssputs_r+0x6a>
 8004c74:	6965      	ldr	r5, [r4, #20]
 8004c76:	6909      	ldr	r1, [r1, #16]
 8004c78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c7c:	eba3 0901 	sub.w	r9, r3, r1
 8004c80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c84:	1c7b      	adds	r3, r7, #1
 8004c86:	444b      	add	r3, r9
 8004c88:	106d      	asrs	r5, r5, #1
 8004c8a:	429d      	cmp	r5, r3
 8004c8c:	bf38      	it	cc
 8004c8e:	461d      	movcc	r5, r3
 8004c90:	0553      	lsls	r3, r2, #21
 8004c92:	d527      	bpl.n	8004ce4 <__ssputs_r+0x8c>
 8004c94:	4629      	mov	r1, r5
 8004c96:	f000 f957 	bl	8004f48 <_malloc_r>
 8004c9a:	4606      	mov	r6, r0
 8004c9c:	b360      	cbz	r0, 8004cf8 <__ssputs_r+0xa0>
 8004c9e:	6921      	ldr	r1, [r4, #16]
 8004ca0:	464a      	mov	r2, r9
 8004ca2:	f000 fbc7 	bl	8005434 <memcpy>
 8004ca6:	89a3      	ldrh	r3, [r4, #12]
 8004ca8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cb0:	81a3      	strh	r3, [r4, #12]
 8004cb2:	6126      	str	r6, [r4, #16]
 8004cb4:	6165      	str	r5, [r4, #20]
 8004cb6:	444e      	add	r6, r9
 8004cb8:	eba5 0509 	sub.w	r5, r5, r9
 8004cbc:	6026      	str	r6, [r4, #0]
 8004cbe:	60a5      	str	r5, [r4, #8]
 8004cc0:	463e      	mov	r6, r7
 8004cc2:	42be      	cmp	r6, r7
 8004cc4:	d900      	bls.n	8004cc8 <__ssputs_r+0x70>
 8004cc6:	463e      	mov	r6, r7
 8004cc8:	6820      	ldr	r0, [r4, #0]
 8004cca:	4632      	mov	r2, r6
 8004ccc:	4641      	mov	r1, r8
 8004cce:	f000 fb86 	bl	80053de <memmove>
 8004cd2:	68a3      	ldr	r3, [r4, #8]
 8004cd4:	1b9b      	subs	r3, r3, r6
 8004cd6:	60a3      	str	r3, [r4, #8]
 8004cd8:	6823      	ldr	r3, [r4, #0]
 8004cda:	4433      	add	r3, r6
 8004cdc:	6023      	str	r3, [r4, #0]
 8004cde:	2000      	movs	r0, #0
 8004ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ce4:	462a      	mov	r2, r5
 8004ce6:	f000 fb4b 	bl	8005380 <_realloc_r>
 8004cea:	4606      	mov	r6, r0
 8004cec:	2800      	cmp	r0, #0
 8004cee:	d1e0      	bne.n	8004cb2 <__ssputs_r+0x5a>
 8004cf0:	6921      	ldr	r1, [r4, #16]
 8004cf2:	4650      	mov	r0, sl
 8004cf4:	f000 fbac 	bl	8005450 <_free_r>
 8004cf8:	230c      	movs	r3, #12
 8004cfa:	f8ca 3000 	str.w	r3, [sl]
 8004cfe:	89a3      	ldrh	r3, [r4, #12]
 8004d00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d04:	81a3      	strh	r3, [r4, #12]
 8004d06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d0a:	e7e9      	b.n	8004ce0 <__ssputs_r+0x88>

08004d0c <_svfiprintf_r>:
 8004d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d10:	4698      	mov	r8, r3
 8004d12:	898b      	ldrh	r3, [r1, #12]
 8004d14:	061b      	lsls	r3, r3, #24
 8004d16:	b09d      	sub	sp, #116	; 0x74
 8004d18:	4607      	mov	r7, r0
 8004d1a:	460d      	mov	r5, r1
 8004d1c:	4614      	mov	r4, r2
 8004d1e:	d50e      	bpl.n	8004d3e <_svfiprintf_r+0x32>
 8004d20:	690b      	ldr	r3, [r1, #16]
 8004d22:	b963      	cbnz	r3, 8004d3e <_svfiprintf_r+0x32>
 8004d24:	2140      	movs	r1, #64	; 0x40
 8004d26:	f000 f90f 	bl	8004f48 <_malloc_r>
 8004d2a:	6028      	str	r0, [r5, #0]
 8004d2c:	6128      	str	r0, [r5, #16]
 8004d2e:	b920      	cbnz	r0, 8004d3a <_svfiprintf_r+0x2e>
 8004d30:	230c      	movs	r3, #12
 8004d32:	603b      	str	r3, [r7, #0]
 8004d34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d38:	e0d0      	b.n	8004edc <_svfiprintf_r+0x1d0>
 8004d3a:	2340      	movs	r3, #64	; 0x40
 8004d3c:	616b      	str	r3, [r5, #20]
 8004d3e:	2300      	movs	r3, #0
 8004d40:	9309      	str	r3, [sp, #36]	; 0x24
 8004d42:	2320      	movs	r3, #32
 8004d44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d48:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d4c:	2330      	movs	r3, #48	; 0x30
 8004d4e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004ef4 <_svfiprintf_r+0x1e8>
 8004d52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d56:	f04f 0901 	mov.w	r9, #1
 8004d5a:	4623      	mov	r3, r4
 8004d5c:	469a      	mov	sl, r3
 8004d5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d62:	b10a      	cbz	r2, 8004d68 <_svfiprintf_r+0x5c>
 8004d64:	2a25      	cmp	r2, #37	; 0x25
 8004d66:	d1f9      	bne.n	8004d5c <_svfiprintf_r+0x50>
 8004d68:	ebba 0b04 	subs.w	fp, sl, r4
 8004d6c:	d00b      	beq.n	8004d86 <_svfiprintf_r+0x7a>
 8004d6e:	465b      	mov	r3, fp
 8004d70:	4622      	mov	r2, r4
 8004d72:	4629      	mov	r1, r5
 8004d74:	4638      	mov	r0, r7
 8004d76:	f7ff ff6f 	bl	8004c58 <__ssputs_r>
 8004d7a:	3001      	adds	r0, #1
 8004d7c:	f000 80a9 	beq.w	8004ed2 <_svfiprintf_r+0x1c6>
 8004d80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d82:	445a      	add	r2, fp
 8004d84:	9209      	str	r2, [sp, #36]	; 0x24
 8004d86:	f89a 3000 	ldrb.w	r3, [sl]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f000 80a1 	beq.w	8004ed2 <_svfiprintf_r+0x1c6>
 8004d90:	2300      	movs	r3, #0
 8004d92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d9a:	f10a 0a01 	add.w	sl, sl, #1
 8004d9e:	9304      	str	r3, [sp, #16]
 8004da0:	9307      	str	r3, [sp, #28]
 8004da2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004da6:	931a      	str	r3, [sp, #104]	; 0x68
 8004da8:	4654      	mov	r4, sl
 8004daa:	2205      	movs	r2, #5
 8004dac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004db0:	4850      	ldr	r0, [pc, #320]	; (8004ef4 <_svfiprintf_r+0x1e8>)
 8004db2:	f7fb fa15 	bl	80001e0 <memchr>
 8004db6:	9a04      	ldr	r2, [sp, #16]
 8004db8:	b9d8      	cbnz	r0, 8004df2 <_svfiprintf_r+0xe6>
 8004dba:	06d0      	lsls	r0, r2, #27
 8004dbc:	bf44      	itt	mi
 8004dbe:	2320      	movmi	r3, #32
 8004dc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004dc4:	0711      	lsls	r1, r2, #28
 8004dc6:	bf44      	itt	mi
 8004dc8:	232b      	movmi	r3, #43	; 0x2b
 8004dca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004dce:	f89a 3000 	ldrb.w	r3, [sl]
 8004dd2:	2b2a      	cmp	r3, #42	; 0x2a
 8004dd4:	d015      	beq.n	8004e02 <_svfiprintf_r+0xf6>
 8004dd6:	9a07      	ldr	r2, [sp, #28]
 8004dd8:	4654      	mov	r4, sl
 8004dda:	2000      	movs	r0, #0
 8004ddc:	f04f 0c0a 	mov.w	ip, #10
 8004de0:	4621      	mov	r1, r4
 8004de2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004de6:	3b30      	subs	r3, #48	; 0x30
 8004de8:	2b09      	cmp	r3, #9
 8004dea:	d94d      	bls.n	8004e88 <_svfiprintf_r+0x17c>
 8004dec:	b1b0      	cbz	r0, 8004e1c <_svfiprintf_r+0x110>
 8004dee:	9207      	str	r2, [sp, #28]
 8004df0:	e014      	b.n	8004e1c <_svfiprintf_r+0x110>
 8004df2:	eba0 0308 	sub.w	r3, r0, r8
 8004df6:	fa09 f303 	lsl.w	r3, r9, r3
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	9304      	str	r3, [sp, #16]
 8004dfe:	46a2      	mov	sl, r4
 8004e00:	e7d2      	b.n	8004da8 <_svfiprintf_r+0x9c>
 8004e02:	9b03      	ldr	r3, [sp, #12]
 8004e04:	1d19      	adds	r1, r3, #4
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	9103      	str	r1, [sp, #12]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	bfbb      	ittet	lt
 8004e0e:	425b      	neglt	r3, r3
 8004e10:	f042 0202 	orrlt.w	r2, r2, #2
 8004e14:	9307      	strge	r3, [sp, #28]
 8004e16:	9307      	strlt	r3, [sp, #28]
 8004e18:	bfb8      	it	lt
 8004e1a:	9204      	strlt	r2, [sp, #16]
 8004e1c:	7823      	ldrb	r3, [r4, #0]
 8004e1e:	2b2e      	cmp	r3, #46	; 0x2e
 8004e20:	d10c      	bne.n	8004e3c <_svfiprintf_r+0x130>
 8004e22:	7863      	ldrb	r3, [r4, #1]
 8004e24:	2b2a      	cmp	r3, #42	; 0x2a
 8004e26:	d134      	bne.n	8004e92 <_svfiprintf_r+0x186>
 8004e28:	9b03      	ldr	r3, [sp, #12]
 8004e2a:	1d1a      	adds	r2, r3, #4
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	9203      	str	r2, [sp, #12]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	bfb8      	it	lt
 8004e34:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004e38:	3402      	adds	r4, #2
 8004e3a:	9305      	str	r3, [sp, #20]
 8004e3c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004f04 <_svfiprintf_r+0x1f8>
 8004e40:	7821      	ldrb	r1, [r4, #0]
 8004e42:	2203      	movs	r2, #3
 8004e44:	4650      	mov	r0, sl
 8004e46:	f7fb f9cb 	bl	80001e0 <memchr>
 8004e4a:	b138      	cbz	r0, 8004e5c <_svfiprintf_r+0x150>
 8004e4c:	9b04      	ldr	r3, [sp, #16]
 8004e4e:	eba0 000a 	sub.w	r0, r0, sl
 8004e52:	2240      	movs	r2, #64	; 0x40
 8004e54:	4082      	lsls	r2, r0
 8004e56:	4313      	orrs	r3, r2
 8004e58:	3401      	adds	r4, #1
 8004e5a:	9304      	str	r3, [sp, #16]
 8004e5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e60:	4825      	ldr	r0, [pc, #148]	; (8004ef8 <_svfiprintf_r+0x1ec>)
 8004e62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e66:	2206      	movs	r2, #6
 8004e68:	f7fb f9ba 	bl	80001e0 <memchr>
 8004e6c:	2800      	cmp	r0, #0
 8004e6e:	d038      	beq.n	8004ee2 <_svfiprintf_r+0x1d6>
 8004e70:	4b22      	ldr	r3, [pc, #136]	; (8004efc <_svfiprintf_r+0x1f0>)
 8004e72:	bb1b      	cbnz	r3, 8004ebc <_svfiprintf_r+0x1b0>
 8004e74:	9b03      	ldr	r3, [sp, #12]
 8004e76:	3307      	adds	r3, #7
 8004e78:	f023 0307 	bic.w	r3, r3, #7
 8004e7c:	3308      	adds	r3, #8
 8004e7e:	9303      	str	r3, [sp, #12]
 8004e80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e82:	4433      	add	r3, r6
 8004e84:	9309      	str	r3, [sp, #36]	; 0x24
 8004e86:	e768      	b.n	8004d5a <_svfiprintf_r+0x4e>
 8004e88:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e8c:	460c      	mov	r4, r1
 8004e8e:	2001      	movs	r0, #1
 8004e90:	e7a6      	b.n	8004de0 <_svfiprintf_r+0xd4>
 8004e92:	2300      	movs	r3, #0
 8004e94:	3401      	adds	r4, #1
 8004e96:	9305      	str	r3, [sp, #20]
 8004e98:	4619      	mov	r1, r3
 8004e9a:	f04f 0c0a 	mov.w	ip, #10
 8004e9e:	4620      	mov	r0, r4
 8004ea0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ea4:	3a30      	subs	r2, #48	; 0x30
 8004ea6:	2a09      	cmp	r2, #9
 8004ea8:	d903      	bls.n	8004eb2 <_svfiprintf_r+0x1a6>
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d0c6      	beq.n	8004e3c <_svfiprintf_r+0x130>
 8004eae:	9105      	str	r1, [sp, #20]
 8004eb0:	e7c4      	b.n	8004e3c <_svfiprintf_r+0x130>
 8004eb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004eb6:	4604      	mov	r4, r0
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e7f0      	b.n	8004e9e <_svfiprintf_r+0x192>
 8004ebc:	ab03      	add	r3, sp, #12
 8004ebe:	9300      	str	r3, [sp, #0]
 8004ec0:	462a      	mov	r2, r5
 8004ec2:	4b0f      	ldr	r3, [pc, #60]	; (8004f00 <_svfiprintf_r+0x1f4>)
 8004ec4:	a904      	add	r1, sp, #16
 8004ec6:	4638      	mov	r0, r7
 8004ec8:	f3af 8000 	nop.w
 8004ecc:	1c42      	adds	r2, r0, #1
 8004ece:	4606      	mov	r6, r0
 8004ed0:	d1d6      	bne.n	8004e80 <_svfiprintf_r+0x174>
 8004ed2:	89ab      	ldrh	r3, [r5, #12]
 8004ed4:	065b      	lsls	r3, r3, #25
 8004ed6:	f53f af2d 	bmi.w	8004d34 <_svfiprintf_r+0x28>
 8004eda:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004edc:	b01d      	add	sp, #116	; 0x74
 8004ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ee2:	ab03      	add	r3, sp, #12
 8004ee4:	9300      	str	r3, [sp, #0]
 8004ee6:	462a      	mov	r2, r5
 8004ee8:	4b05      	ldr	r3, [pc, #20]	; (8004f00 <_svfiprintf_r+0x1f4>)
 8004eea:	a904      	add	r1, sp, #16
 8004eec:	4638      	mov	r0, r7
 8004eee:	f000 f919 	bl	8005124 <_printf_i>
 8004ef2:	e7eb      	b.n	8004ecc <_svfiprintf_r+0x1c0>
 8004ef4:	080058b8 	.word	0x080058b8
 8004ef8:	080058c2 	.word	0x080058c2
 8004efc:	00000000 	.word	0x00000000
 8004f00:	08004c59 	.word	0x08004c59
 8004f04:	080058be 	.word	0x080058be

08004f08 <sbrk_aligned>:
 8004f08:	b570      	push	{r4, r5, r6, lr}
 8004f0a:	4e0e      	ldr	r6, [pc, #56]	; (8004f44 <sbrk_aligned+0x3c>)
 8004f0c:	460c      	mov	r4, r1
 8004f0e:	6831      	ldr	r1, [r6, #0]
 8004f10:	4605      	mov	r5, r0
 8004f12:	b911      	cbnz	r1, 8004f1a <sbrk_aligned+0x12>
 8004f14:	f000 fa7e 	bl	8005414 <_sbrk_r>
 8004f18:	6030      	str	r0, [r6, #0]
 8004f1a:	4621      	mov	r1, r4
 8004f1c:	4628      	mov	r0, r5
 8004f1e:	f000 fa79 	bl	8005414 <_sbrk_r>
 8004f22:	1c43      	adds	r3, r0, #1
 8004f24:	d00a      	beq.n	8004f3c <sbrk_aligned+0x34>
 8004f26:	1cc4      	adds	r4, r0, #3
 8004f28:	f024 0403 	bic.w	r4, r4, #3
 8004f2c:	42a0      	cmp	r0, r4
 8004f2e:	d007      	beq.n	8004f40 <sbrk_aligned+0x38>
 8004f30:	1a21      	subs	r1, r4, r0
 8004f32:	4628      	mov	r0, r5
 8004f34:	f000 fa6e 	bl	8005414 <_sbrk_r>
 8004f38:	3001      	adds	r0, #1
 8004f3a:	d101      	bne.n	8004f40 <sbrk_aligned+0x38>
 8004f3c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004f40:	4620      	mov	r0, r4
 8004f42:	bd70      	pop	{r4, r5, r6, pc}
 8004f44:	20000644 	.word	0x20000644

08004f48 <_malloc_r>:
 8004f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f4c:	1ccd      	adds	r5, r1, #3
 8004f4e:	f025 0503 	bic.w	r5, r5, #3
 8004f52:	3508      	adds	r5, #8
 8004f54:	2d0c      	cmp	r5, #12
 8004f56:	bf38      	it	cc
 8004f58:	250c      	movcc	r5, #12
 8004f5a:	2d00      	cmp	r5, #0
 8004f5c:	4607      	mov	r7, r0
 8004f5e:	db01      	blt.n	8004f64 <_malloc_r+0x1c>
 8004f60:	42a9      	cmp	r1, r5
 8004f62:	d905      	bls.n	8004f70 <_malloc_r+0x28>
 8004f64:	230c      	movs	r3, #12
 8004f66:	603b      	str	r3, [r7, #0]
 8004f68:	2600      	movs	r6, #0
 8004f6a:	4630      	mov	r0, r6
 8004f6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f70:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005044 <_malloc_r+0xfc>
 8004f74:	f000 f9f8 	bl	8005368 <__malloc_lock>
 8004f78:	f8d8 3000 	ldr.w	r3, [r8]
 8004f7c:	461c      	mov	r4, r3
 8004f7e:	bb5c      	cbnz	r4, 8004fd8 <_malloc_r+0x90>
 8004f80:	4629      	mov	r1, r5
 8004f82:	4638      	mov	r0, r7
 8004f84:	f7ff ffc0 	bl	8004f08 <sbrk_aligned>
 8004f88:	1c43      	adds	r3, r0, #1
 8004f8a:	4604      	mov	r4, r0
 8004f8c:	d155      	bne.n	800503a <_malloc_r+0xf2>
 8004f8e:	f8d8 4000 	ldr.w	r4, [r8]
 8004f92:	4626      	mov	r6, r4
 8004f94:	2e00      	cmp	r6, #0
 8004f96:	d145      	bne.n	8005024 <_malloc_r+0xdc>
 8004f98:	2c00      	cmp	r4, #0
 8004f9a:	d048      	beq.n	800502e <_malloc_r+0xe6>
 8004f9c:	6823      	ldr	r3, [r4, #0]
 8004f9e:	4631      	mov	r1, r6
 8004fa0:	4638      	mov	r0, r7
 8004fa2:	eb04 0903 	add.w	r9, r4, r3
 8004fa6:	f000 fa35 	bl	8005414 <_sbrk_r>
 8004faa:	4581      	cmp	r9, r0
 8004fac:	d13f      	bne.n	800502e <_malloc_r+0xe6>
 8004fae:	6821      	ldr	r1, [r4, #0]
 8004fb0:	1a6d      	subs	r5, r5, r1
 8004fb2:	4629      	mov	r1, r5
 8004fb4:	4638      	mov	r0, r7
 8004fb6:	f7ff ffa7 	bl	8004f08 <sbrk_aligned>
 8004fba:	3001      	adds	r0, #1
 8004fbc:	d037      	beq.n	800502e <_malloc_r+0xe6>
 8004fbe:	6823      	ldr	r3, [r4, #0]
 8004fc0:	442b      	add	r3, r5
 8004fc2:	6023      	str	r3, [r4, #0]
 8004fc4:	f8d8 3000 	ldr.w	r3, [r8]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d038      	beq.n	800503e <_malloc_r+0xf6>
 8004fcc:	685a      	ldr	r2, [r3, #4]
 8004fce:	42a2      	cmp	r2, r4
 8004fd0:	d12b      	bne.n	800502a <_malloc_r+0xe2>
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	605a      	str	r2, [r3, #4]
 8004fd6:	e00f      	b.n	8004ff8 <_malloc_r+0xb0>
 8004fd8:	6822      	ldr	r2, [r4, #0]
 8004fda:	1b52      	subs	r2, r2, r5
 8004fdc:	d41f      	bmi.n	800501e <_malloc_r+0xd6>
 8004fde:	2a0b      	cmp	r2, #11
 8004fe0:	d917      	bls.n	8005012 <_malloc_r+0xca>
 8004fe2:	1961      	adds	r1, r4, r5
 8004fe4:	42a3      	cmp	r3, r4
 8004fe6:	6025      	str	r5, [r4, #0]
 8004fe8:	bf18      	it	ne
 8004fea:	6059      	strne	r1, [r3, #4]
 8004fec:	6863      	ldr	r3, [r4, #4]
 8004fee:	bf08      	it	eq
 8004ff0:	f8c8 1000 	streq.w	r1, [r8]
 8004ff4:	5162      	str	r2, [r4, r5]
 8004ff6:	604b      	str	r3, [r1, #4]
 8004ff8:	4638      	mov	r0, r7
 8004ffa:	f104 060b 	add.w	r6, r4, #11
 8004ffe:	f000 f9b9 	bl	8005374 <__malloc_unlock>
 8005002:	f026 0607 	bic.w	r6, r6, #7
 8005006:	1d23      	adds	r3, r4, #4
 8005008:	1af2      	subs	r2, r6, r3
 800500a:	d0ae      	beq.n	8004f6a <_malloc_r+0x22>
 800500c:	1b9b      	subs	r3, r3, r6
 800500e:	50a3      	str	r3, [r4, r2]
 8005010:	e7ab      	b.n	8004f6a <_malloc_r+0x22>
 8005012:	42a3      	cmp	r3, r4
 8005014:	6862      	ldr	r2, [r4, #4]
 8005016:	d1dd      	bne.n	8004fd4 <_malloc_r+0x8c>
 8005018:	f8c8 2000 	str.w	r2, [r8]
 800501c:	e7ec      	b.n	8004ff8 <_malloc_r+0xb0>
 800501e:	4623      	mov	r3, r4
 8005020:	6864      	ldr	r4, [r4, #4]
 8005022:	e7ac      	b.n	8004f7e <_malloc_r+0x36>
 8005024:	4634      	mov	r4, r6
 8005026:	6876      	ldr	r6, [r6, #4]
 8005028:	e7b4      	b.n	8004f94 <_malloc_r+0x4c>
 800502a:	4613      	mov	r3, r2
 800502c:	e7cc      	b.n	8004fc8 <_malloc_r+0x80>
 800502e:	230c      	movs	r3, #12
 8005030:	603b      	str	r3, [r7, #0]
 8005032:	4638      	mov	r0, r7
 8005034:	f000 f99e 	bl	8005374 <__malloc_unlock>
 8005038:	e797      	b.n	8004f6a <_malloc_r+0x22>
 800503a:	6025      	str	r5, [r4, #0]
 800503c:	e7dc      	b.n	8004ff8 <_malloc_r+0xb0>
 800503e:	605b      	str	r3, [r3, #4]
 8005040:	deff      	udf	#255	; 0xff
 8005042:	bf00      	nop
 8005044:	20000640 	.word	0x20000640

08005048 <_printf_common>:
 8005048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800504c:	4616      	mov	r6, r2
 800504e:	4699      	mov	r9, r3
 8005050:	688a      	ldr	r2, [r1, #8]
 8005052:	690b      	ldr	r3, [r1, #16]
 8005054:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005058:	4293      	cmp	r3, r2
 800505a:	bfb8      	it	lt
 800505c:	4613      	movlt	r3, r2
 800505e:	6033      	str	r3, [r6, #0]
 8005060:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005064:	4607      	mov	r7, r0
 8005066:	460c      	mov	r4, r1
 8005068:	b10a      	cbz	r2, 800506e <_printf_common+0x26>
 800506a:	3301      	adds	r3, #1
 800506c:	6033      	str	r3, [r6, #0]
 800506e:	6823      	ldr	r3, [r4, #0]
 8005070:	0699      	lsls	r1, r3, #26
 8005072:	bf42      	ittt	mi
 8005074:	6833      	ldrmi	r3, [r6, #0]
 8005076:	3302      	addmi	r3, #2
 8005078:	6033      	strmi	r3, [r6, #0]
 800507a:	6825      	ldr	r5, [r4, #0]
 800507c:	f015 0506 	ands.w	r5, r5, #6
 8005080:	d106      	bne.n	8005090 <_printf_common+0x48>
 8005082:	f104 0a19 	add.w	sl, r4, #25
 8005086:	68e3      	ldr	r3, [r4, #12]
 8005088:	6832      	ldr	r2, [r6, #0]
 800508a:	1a9b      	subs	r3, r3, r2
 800508c:	42ab      	cmp	r3, r5
 800508e:	dc26      	bgt.n	80050de <_printf_common+0x96>
 8005090:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005094:	1e13      	subs	r3, r2, #0
 8005096:	6822      	ldr	r2, [r4, #0]
 8005098:	bf18      	it	ne
 800509a:	2301      	movne	r3, #1
 800509c:	0692      	lsls	r2, r2, #26
 800509e:	d42b      	bmi.n	80050f8 <_printf_common+0xb0>
 80050a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050a4:	4649      	mov	r1, r9
 80050a6:	4638      	mov	r0, r7
 80050a8:	47c0      	blx	r8
 80050aa:	3001      	adds	r0, #1
 80050ac:	d01e      	beq.n	80050ec <_printf_common+0xa4>
 80050ae:	6823      	ldr	r3, [r4, #0]
 80050b0:	6922      	ldr	r2, [r4, #16]
 80050b2:	f003 0306 	and.w	r3, r3, #6
 80050b6:	2b04      	cmp	r3, #4
 80050b8:	bf02      	ittt	eq
 80050ba:	68e5      	ldreq	r5, [r4, #12]
 80050bc:	6833      	ldreq	r3, [r6, #0]
 80050be:	1aed      	subeq	r5, r5, r3
 80050c0:	68a3      	ldr	r3, [r4, #8]
 80050c2:	bf0c      	ite	eq
 80050c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050c8:	2500      	movne	r5, #0
 80050ca:	4293      	cmp	r3, r2
 80050cc:	bfc4      	itt	gt
 80050ce:	1a9b      	subgt	r3, r3, r2
 80050d0:	18ed      	addgt	r5, r5, r3
 80050d2:	2600      	movs	r6, #0
 80050d4:	341a      	adds	r4, #26
 80050d6:	42b5      	cmp	r5, r6
 80050d8:	d11a      	bne.n	8005110 <_printf_common+0xc8>
 80050da:	2000      	movs	r0, #0
 80050dc:	e008      	b.n	80050f0 <_printf_common+0xa8>
 80050de:	2301      	movs	r3, #1
 80050e0:	4652      	mov	r2, sl
 80050e2:	4649      	mov	r1, r9
 80050e4:	4638      	mov	r0, r7
 80050e6:	47c0      	blx	r8
 80050e8:	3001      	adds	r0, #1
 80050ea:	d103      	bne.n	80050f4 <_printf_common+0xac>
 80050ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050f4:	3501      	adds	r5, #1
 80050f6:	e7c6      	b.n	8005086 <_printf_common+0x3e>
 80050f8:	18e1      	adds	r1, r4, r3
 80050fa:	1c5a      	adds	r2, r3, #1
 80050fc:	2030      	movs	r0, #48	; 0x30
 80050fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005102:	4422      	add	r2, r4
 8005104:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005108:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800510c:	3302      	adds	r3, #2
 800510e:	e7c7      	b.n	80050a0 <_printf_common+0x58>
 8005110:	2301      	movs	r3, #1
 8005112:	4622      	mov	r2, r4
 8005114:	4649      	mov	r1, r9
 8005116:	4638      	mov	r0, r7
 8005118:	47c0      	blx	r8
 800511a:	3001      	adds	r0, #1
 800511c:	d0e6      	beq.n	80050ec <_printf_common+0xa4>
 800511e:	3601      	adds	r6, #1
 8005120:	e7d9      	b.n	80050d6 <_printf_common+0x8e>
	...

08005124 <_printf_i>:
 8005124:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005128:	7e0f      	ldrb	r7, [r1, #24]
 800512a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800512c:	2f78      	cmp	r7, #120	; 0x78
 800512e:	4691      	mov	r9, r2
 8005130:	4680      	mov	r8, r0
 8005132:	460c      	mov	r4, r1
 8005134:	469a      	mov	sl, r3
 8005136:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800513a:	d807      	bhi.n	800514c <_printf_i+0x28>
 800513c:	2f62      	cmp	r7, #98	; 0x62
 800513e:	d80a      	bhi.n	8005156 <_printf_i+0x32>
 8005140:	2f00      	cmp	r7, #0
 8005142:	f000 80d4 	beq.w	80052ee <_printf_i+0x1ca>
 8005146:	2f58      	cmp	r7, #88	; 0x58
 8005148:	f000 80c0 	beq.w	80052cc <_printf_i+0x1a8>
 800514c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005150:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005154:	e03a      	b.n	80051cc <_printf_i+0xa8>
 8005156:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800515a:	2b15      	cmp	r3, #21
 800515c:	d8f6      	bhi.n	800514c <_printf_i+0x28>
 800515e:	a101      	add	r1, pc, #4	; (adr r1, 8005164 <_printf_i+0x40>)
 8005160:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005164:	080051bd 	.word	0x080051bd
 8005168:	080051d1 	.word	0x080051d1
 800516c:	0800514d 	.word	0x0800514d
 8005170:	0800514d 	.word	0x0800514d
 8005174:	0800514d 	.word	0x0800514d
 8005178:	0800514d 	.word	0x0800514d
 800517c:	080051d1 	.word	0x080051d1
 8005180:	0800514d 	.word	0x0800514d
 8005184:	0800514d 	.word	0x0800514d
 8005188:	0800514d 	.word	0x0800514d
 800518c:	0800514d 	.word	0x0800514d
 8005190:	080052d5 	.word	0x080052d5
 8005194:	080051fd 	.word	0x080051fd
 8005198:	0800528f 	.word	0x0800528f
 800519c:	0800514d 	.word	0x0800514d
 80051a0:	0800514d 	.word	0x0800514d
 80051a4:	080052f7 	.word	0x080052f7
 80051a8:	0800514d 	.word	0x0800514d
 80051ac:	080051fd 	.word	0x080051fd
 80051b0:	0800514d 	.word	0x0800514d
 80051b4:	0800514d 	.word	0x0800514d
 80051b8:	08005297 	.word	0x08005297
 80051bc:	682b      	ldr	r3, [r5, #0]
 80051be:	1d1a      	adds	r2, r3, #4
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	602a      	str	r2, [r5, #0]
 80051c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051cc:	2301      	movs	r3, #1
 80051ce:	e09f      	b.n	8005310 <_printf_i+0x1ec>
 80051d0:	6820      	ldr	r0, [r4, #0]
 80051d2:	682b      	ldr	r3, [r5, #0]
 80051d4:	0607      	lsls	r7, r0, #24
 80051d6:	f103 0104 	add.w	r1, r3, #4
 80051da:	6029      	str	r1, [r5, #0]
 80051dc:	d501      	bpl.n	80051e2 <_printf_i+0xbe>
 80051de:	681e      	ldr	r6, [r3, #0]
 80051e0:	e003      	b.n	80051ea <_printf_i+0xc6>
 80051e2:	0646      	lsls	r6, r0, #25
 80051e4:	d5fb      	bpl.n	80051de <_printf_i+0xba>
 80051e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80051ea:	2e00      	cmp	r6, #0
 80051ec:	da03      	bge.n	80051f6 <_printf_i+0xd2>
 80051ee:	232d      	movs	r3, #45	; 0x2d
 80051f0:	4276      	negs	r6, r6
 80051f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051f6:	485a      	ldr	r0, [pc, #360]	; (8005360 <_printf_i+0x23c>)
 80051f8:	230a      	movs	r3, #10
 80051fa:	e012      	b.n	8005222 <_printf_i+0xfe>
 80051fc:	682b      	ldr	r3, [r5, #0]
 80051fe:	6820      	ldr	r0, [r4, #0]
 8005200:	1d19      	adds	r1, r3, #4
 8005202:	6029      	str	r1, [r5, #0]
 8005204:	0605      	lsls	r5, r0, #24
 8005206:	d501      	bpl.n	800520c <_printf_i+0xe8>
 8005208:	681e      	ldr	r6, [r3, #0]
 800520a:	e002      	b.n	8005212 <_printf_i+0xee>
 800520c:	0641      	lsls	r1, r0, #25
 800520e:	d5fb      	bpl.n	8005208 <_printf_i+0xe4>
 8005210:	881e      	ldrh	r6, [r3, #0]
 8005212:	4853      	ldr	r0, [pc, #332]	; (8005360 <_printf_i+0x23c>)
 8005214:	2f6f      	cmp	r7, #111	; 0x6f
 8005216:	bf0c      	ite	eq
 8005218:	2308      	moveq	r3, #8
 800521a:	230a      	movne	r3, #10
 800521c:	2100      	movs	r1, #0
 800521e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005222:	6865      	ldr	r5, [r4, #4]
 8005224:	60a5      	str	r5, [r4, #8]
 8005226:	2d00      	cmp	r5, #0
 8005228:	bfa2      	ittt	ge
 800522a:	6821      	ldrge	r1, [r4, #0]
 800522c:	f021 0104 	bicge.w	r1, r1, #4
 8005230:	6021      	strge	r1, [r4, #0]
 8005232:	b90e      	cbnz	r6, 8005238 <_printf_i+0x114>
 8005234:	2d00      	cmp	r5, #0
 8005236:	d04b      	beq.n	80052d0 <_printf_i+0x1ac>
 8005238:	4615      	mov	r5, r2
 800523a:	fbb6 f1f3 	udiv	r1, r6, r3
 800523e:	fb03 6711 	mls	r7, r3, r1, r6
 8005242:	5dc7      	ldrb	r7, [r0, r7]
 8005244:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005248:	4637      	mov	r7, r6
 800524a:	42bb      	cmp	r3, r7
 800524c:	460e      	mov	r6, r1
 800524e:	d9f4      	bls.n	800523a <_printf_i+0x116>
 8005250:	2b08      	cmp	r3, #8
 8005252:	d10b      	bne.n	800526c <_printf_i+0x148>
 8005254:	6823      	ldr	r3, [r4, #0]
 8005256:	07de      	lsls	r6, r3, #31
 8005258:	d508      	bpl.n	800526c <_printf_i+0x148>
 800525a:	6923      	ldr	r3, [r4, #16]
 800525c:	6861      	ldr	r1, [r4, #4]
 800525e:	4299      	cmp	r1, r3
 8005260:	bfde      	ittt	le
 8005262:	2330      	movle	r3, #48	; 0x30
 8005264:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005268:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800526c:	1b52      	subs	r2, r2, r5
 800526e:	6122      	str	r2, [r4, #16]
 8005270:	f8cd a000 	str.w	sl, [sp]
 8005274:	464b      	mov	r3, r9
 8005276:	aa03      	add	r2, sp, #12
 8005278:	4621      	mov	r1, r4
 800527a:	4640      	mov	r0, r8
 800527c:	f7ff fee4 	bl	8005048 <_printf_common>
 8005280:	3001      	adds	r0, #1
 8005282:	d14a      	bne.n	800531a <_printf_i+0x1f6>
 8005284:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005288:	b004      	add	sp, #16
 800528a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800528e:	6823      	ldr	r3, [r4, #0]
 8005290:	f043 0320 	orr.w	r3, r3, #32
 8005294:	6023      	str	r3, [r4, #0]
 8005296:	4833      	ldr	r0, [pc, #204]	; (8005364 <_printf_i+0x240>)
 8005298:	2778      	movs	r7, #120	; 0x78
 800529a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800529e:	6823      	ldr	r3, [r4, #0]
 80052a0:	6829      	ldr	r1, [r5, #0]
 80052a2:	061f      	lsls	r7, r3, #24
 80052a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80052a8:	d402      	bmi.n	80052b0 <_printf_i+0x18c>
 80052aa:	065f      	lsls	r7, r3, #25
 80052ac:	bf48      	it	mi
 80052ae:	b2b6      	uxthmi	r6, r6
 80052b0:	07df      	lsls	r7, r3, #31
 80052b2:	bf48      	it	mi
 80052b4:	f043 0320 	orrmi.w	r3, r3, #32
 80052b8:	6029      	str	r1, [r5, #0]
 80052ba:	bf48      	it	mi
 80052bc:	6023      	strmi	r3, [r4, #0]
 80052be:	b91e      	cbnz	r6, 80052c8 <_printf_i+0x1a4>
 80052c0:	6823      	ldr	r3, [r4, #0]
 80052c2:	f023 0320 	bic.w	r3, r3, #32
 80052c6:	6023      	str	r3, [r4, #0]
 80052c8:	2310      	movs	r3, #16
 80052ca:	e7a7      	b.n	800521c <_printf_i+0xf8>
 80052cc:	4824      	ldr	r0, [pc, #144]	; (8005360 <_printf_i+0x23c>)
 80052ce:	e7e4      	b.n	800529a <_printf_i+0x176>
 80052d0:	4615      	mov	r5, r2
 80052d2:	e7bd      	b.n	8005250 <_printf_i+0x12c>
 80052d4:	682b      	ldr	r3, [r5, #0]
 80052d6:	6826      	ldr	r6, [r4, #0]
 80052d8:	6961      	ldr	r1, [r4, #20]
 80052da:	1d18      	adds	r0, r3, #4
 80052dc:	6028      	str	r0, [r5, #0]
 80052de:	0635      	lsls	r5, r6, #24
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	d501      	bpl.n	80052e8 <_printf_i+0x1c4>
 80052e4:	6019      	str	r1, [r3, #0]
 80052e6:	e002      	b.n	80052ee <_printf_i+0x1ca>
 80052e8:	0670      	lsls	r0, r6, #25
 80052ea:	d5fb      	bpl.n	80052e4 <_printf_i+0x1c0>
 80052ec:	8019      	strh	r1, [r3, #0]
 80052ee:	2300      	movs	r3, #0
 80052f0:	6123      	str	r3, [r4, #16]
 80052f2:	4615      	mov	r5, r2
 80052f4:	e7bc      	b.n	8005270 <_printf_i+0x14c>
 80052f6:	682b      	ldr	r3, [r5, #0]
 80052f8:	1d1a      	adds	r2, r3, #4
 80052fa:	602a      	str	r2, [r5, #0]
 80052fc:	681d      	ldr	r5, [r3, #0]
 80052fe:	6862      	ldr	r2, [r4, #4]
 8005300:	2100      	movs	r1, #0
 8005302:	4628      	mov	r0, r5
 8005304:	f7fa ff6c 	bl	80001e0 <memchr>
 8005308:	b108      	cbz	r0, 800530e <_printf_i+0x1ea>
 800530a:	1b40      	subs	r0, r0, r5
 800530c:	6060      	str	r0, [r4, #4]
 800530e:	6863      	ldr	r3, [r4, #4]
 8005310:	6123      	str	r3, [r4, #16]
 8005312:	2300      	movs	r3, #0
 8005314:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005318:	e7aa      	b.n	8005270 <_printf_i+0x14c>
 800531a:	6923      	ldr	r3, [r4, #16]
 800531c:	462a      	mov	r2, r5
 800531e:	4649      	mov	r1, r9
 8005320:	4640      	mov	r0, r8
 8005322:	47d0      	blx	sl
 8005324:	3001      	adds	r0, #1
 8005326:	d0ad      	beq.n	8005284 <_printf_i+0x160>
 8005328:	6823      	ldr	r3, [r4, #0]
 800532a:	079b      	lsls	r3, r3, #30
 800532c:	d413      	bmi.n	8005356 <_printf_i+0x232>
 800532e:	68e0      	ldr	r0, [r4, #12]
 8005330:	9b03      	ldr	r3, [sp, #12]
 8005332:	4298      	cmp	r0, r3
 8005334:	bfb8      	it	lt
 8005336:	4618      	movlt	r0, r3
 8005338:	e7a6      	b.n	8005288 <_printf_i+0x164>
 800533a:	2301      	movs	r3, #1
 800533c:	4632      	mov	r2, r6
 800533e:	4649      	mov	r1, r9
 8005340:	4640      	mov	r0, r8
 8005342:	47d0      	blx	sl
 8005344:	3001      	adds	r0, #1
 8005346:	d09d      	beq.n	8005284 <_printf_i+0x160>
 8005348:	3501      	adds	r5, #1
 800534a:	68e3      	ldr	r3, [r4, #12]
 800534c:	9903      	ldr	r1, [sp, #12]
 800534e:	1a5b      	subs	r3, r3, r1
 8005350:	42ab      	cmp	r3, r5
 8005352:	dcf2      	bgt.n	800533a <_printf_i+0x216>
 8005354:	e7eb      	b.n	800532e <_printf_i+0x20a>
 8005356:	2500      	movs	r5, #0
 8005358:	f104 0619 	add.w	r6, r4, #25
 800535c:	e7f5      	b.n	800534a <_printf_i+0x226>
 800535e:	bf00      	nop
 8005360:	080058c9 	.word	0x080058c9
 8005364:	080058da 	.word	0x080058da

08005368 <__malloc_lock>:
 8005368:	4801      	ldr	r0, [pc, #4]	; (8005370 <__malloc_lock+0x8>)
 800536a:	f7ff bc73 	b.w	8004c54 <__retarget_lock_acquire_recursive>
 800536e:	bf00      	nop
 8005370:	2000063c 	.word	0x2000063c

08005374 <__malloc_unlock>:
 8005374:	4801      	ldr	r0, [pc, #4]	; (800537c <__malloc_unlock+0x8>)
 8005376:	f7ff bc6e 	b.w	8004c56 <__retarget_lock_release_recursive>
 800537a:	bf00      	nop
 800537c:	2000063c 	.word	0x2000063c

08005380 <_realloc_r>:
 8005380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005384:	4680      	mov	r8, r0
 8005386:	4614      	mov	r4, r2
 8005388:	460e      	mov	r6, r1
 800538a:	b921      	cbnz	r1, 8005396 <_realloc_r+0x16>
 800538c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005390:	4611      	mov	r1, r2
 8005392:	f7ff bdd9 	b.w	8004f48 <_malloc_r>
 8005396:	b92a      	cbnz	r2, 80053a4 <_realloc_r+0x24>
 8005398:	f000 f85a 	bl	8005450 <_free_r>
 800539c:	4625      	mov	r5, r4
 800539e:	4628      	mov	r0, r5
 80053a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053a4:	f000 f8a0 	bl	80054e8 <_malloc_usable_size_r>
 80053a8:	4284      	cmp	r4, r0
 80053aa:	4607      	mov	r7, r0
 80053ac:	d802      	bhi.n	80053b4 <_realloc_r+0x34>
 80053ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80053b2:	d812      	bhi.n	80053da <_realloc_r+0x5a>
 80053b4:	4621      	mov	r1, r4
 80053b6:	4640      	mov	r0, r8
 80053b8:	f7ff fdc6 	bl	8004f48 <_malloc_r>
 80053bc:	4605      	mov	r5, r0
 80053be:	2800      	cmp	r0, #0
 80053c0:	d0ed      	beq.n	800539e <_realloc_r+0x1e>
 80053c2:	42bc      	cmp	r4, r7
 80053c4:	4622      	mov	r2, r4
 80053c6:	4631      	mov	r1, r6
 80053c8:	bf28      	it	cs
 80053ca:	463a      	movcs	r2, r7
 80053cc:	f000 f832 	bl	8005434 <memcpy>
 80053d0:	4631      	mov	r1, r6
 80053d2:	4640      	mov	r0, r8
 80053d4:	f000 f83c 	bl	8005450 <_free_r>
 80053d8:	e7e1      	b.n	800539e <_realloc_r+0x1e>
 80053da:	4635      	mov	r5, r6
 80053dc:	e7df      	b.n	800539e <_realloc_r+0x1e>

080053de <memmove>:
 80053de:	4288      	cmp	r0, r1
 80053e0:	b510      	push	{r4, lr}
 80053e2:	eb01 0402 	add.w	r4, r1, r2
 80053e6:	d902      	bls.n	80053ee <memmove+0x10>
 80053e8:	4284      	cmp	r4, r0
 80053ea:	4623      	mov	r3, r4
 80053ec:	d807      	bhi.n	80053fe <memmove+0x20>
 80053ee:	1e43      	subs	r3, r0, #1
 80053f0:	42a1      	cmp	r1, r4
 80053f2:	d008      	beq.n	8005406 <memmove+0x28>
 80053f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053f8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80053fc:	e7f8      	b.n	80053f0 <memmove+0x12>
 80053fe:	4402      	add	r2, r0
 8005400:	4601      	mov	r1, r0
 8005402:	428a      	cmp	r2, r1
 8005404:	d100      	bne.n	8005408 <memmove+0x2a>
 8005406:	bd10      	pop	{r4, pc}
 8005408:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800540c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005410:	e7f7      	b.n	8005402 <memmove+0x24>
	...

08005414 <_sbrk_r>:
 8005414:	b538      	push	{r3, r4, r5, lr}
 8005416:	4d06      	ldr	r5, [pc, #24]	; (8005430 <_sbrk_r+0x1c>)
 8005418:	2300      	movs	r3, #0
 800541a:	4604      	mov	r4, r0
 800541c:	4608      	mov	r0, r1
 800541e:	602b      	str	r3, [r5, #0]
 8005420:	f7fc f962 	bl	80016e8 <_sbrk>
 8005424:	1c43      	adds	r3, r0, #1
 8005426:	d102      	bne.n	800542e <_sbrk_r+0x1a>
 8005428:	682b      	ldr	r3, [r5, #0]
 800542a:	b103      	cbz	r3, 800542e <_sbrk_r+0x1a>
 800542c:	6023      	str	r3, [r4, #0]
 800542e:	bd38      	pop	{r3, r4, r5, pc}
 8005430:	20000648 	.word	0x20000648

08005434 <memcpy>:
 8005434:	440a      	add	r2, r1
 8005436:	4291      	cmp	r1, r2
 8005438:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800543c:	d100      	bne.n	8005440 <memcpy+0xc>
 800543e:	4770      	bx	lr
 8005440:	b510      	push	{r4, lr}
 8005442:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005446:	f803 4f01 	strb.w	r4, [r3, #1]!
 800544a:	4291      	cmp	r1, r2
 800544c:	d1f9      	bne.n	8005442 <memcpy+0xe>
 800544e:	bd10      	pop	{r4, pc}

08005450 <_free_r>:
 8005450:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005452:	2900      	cmp	r1, #0
 8005454:	d044      	beq.n	80054e0 <_free_r+0x90>
 8005456:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800545a:	9001      	str	r0, [sp, #4]
 800545c:	2b00      	cmp	r3, #0
 800545e:	f1a1 0404 	sub.w	r4, r1, #4
 8005462:	bfb8      	it	lt
 8005464:	18e4      	addlt	r4, r4, r3
 8005466:	f7ff ff7f 	bl	8005368 <__malloc_lock>
 800546a:	4a1e      	ldr	r2, [pc, #120]	; (80054e4 <_free_r+0x94>)
 800546c:	9801      	ldr	r0, [sp, #4]
 800546e:	6813      	ldr	r3, [r2, #0]
 8005470:	b933      	cbnz	r3, 8005480 <_free_r+0x30>
 8005472:	6063      	str	r3, [r4, #4]
 8005474:	6014      	str	r4, [r2, #0]
 8005476:	b003      	add	sp, #12
 8005478:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800547c:	f7ff bf7a 	b.w	8005374 <__malloc_unlock>
 8005480:	42a3      	cmp	r3, r4
 8005482:	d908      	bls.n	8005496 <_free_r+0x46>
 8005484:	6825      	ldr	r5, [r4, #0]
 8005486:	1961      	adds	r1, r4, r5
 8005488:	428b      	cmp	r3, r1
 800548a:	bf01      	itttt	eq
 800548c:	6819      	ldreq	r1, [r3, #0]
 800548e:	685b      	ldreq	r3, [r3, #4]
 8005490:	1949      	addeq	r1, r1, r5
 8005492:	6021      	streq	r1, [r4, #0]
 8005494:	e7ed      	b.n	8005472 <_free_r+0x22>
 8005496:	461a      	mov	r2, r3
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	b10b      	cbz	r3, 80054a0 <_free_r+0x50>
 800549c:	42a3      	cmp	r3, r4
 800549e:	d9fa      	bls.n	8005496 <_free_r+0x46>
 80054a0:	6811      	ldr	r1, [r2, #0]
 80054a2:	1855      	adds	r5, r2, r1
 80054a4:	42a5      	cmp	r5, r4
 80054a6:	d10b      	bne.n	80054c0 <_free_r+0x70>
 80054a8:	6824      	ldr	r4, [r4, #0]
 80054aa:	4421      	add	r1, r4
 80054ac:	1854      	adds	r4, r2, r1
 80054ae:	42a3      	cmp	r3, r4
 80054b0:	6011      	str	r1, [r2, #0]
 80054b2:	d1e0      	bne.n	8005476 <_free_r+0x26>
 80054b4:	681c      	ldr	r4, [r3, #0]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	6053      	str	r3, [r2, #4]
 80054ba:	440c      	add	r4, r1
 80054bc:	6014      	str	r4, [r2, #0]
 80054be:	e7da      	b.n	8005476 <_free_r+0x26>
 80054c0:	d902      	bls.n	80054c8 <_free_r+0x78>
 80054c2:	230c      	movs	r3, #12
 80054c4:	6003      	str	r3, [r0, #0]
 80054c6:	e7d6      	b.n	8005476 <_free_r+0x26>
 80054c8:	6825      	ldr	r5, [r4, #0]
 80054ca:	1961      	adds	r1, r4, r5
 80054cc:	428b      	cmp	r3, r1
 80054ce:	bf04      	itt	eq
 80054d0:	6819      	ldreq	r1, [r3, #0]
 80054d2:	685b      	ldreq	r3, [r3, #4]
 80054d4:	6063      	str	r3, [r4, #4]
 80054d6:	bf04      	itt	eq
 80054d8:	1949      	addeq	r1, r1, r5
 80054da:	6021      	streq	r1, [r4, #0]
 80054dc:	6054      	str	r4, [r2, #4]
 80054de:	e7ca      	b.n	8005476 <_free_r+0x26>
 80054e0:	b003      	add	sp, #12
 80054e2:	bd30      	pop	{r4, r5, pc}
 80054e4:	20000640 	.word	0x20000640

080054e8 <_malloc_usable_size_r>:
 80054e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054ec:	1f18      	subs	r0, r3, #4
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	bfbc      	itt	lt
 80054f2:	580b      	ldrlt	r3, [r1, r0]
 80054f4:	18c0      	addlt	r0, r0, r3
 80054f6:	4770      	bx	lr

080054f8 <_init>:
 80054f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054fa:	bf00      	nop
 80054fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054fe:	bc08      	pop	{r3}
 8005500:	469e      	mov	lr, r3
 8005502:	4770      	bx	lr

08005504 <_fini>:
 8005504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005506:	bf00      	nop
 8005508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800550a:	bc08      	pop	{r3}
 800550c:	469e      	mov	lr, r3
 800550e:	4770      	bx	lr
