# Define common environment variables using an anchor.
x-common-variables: &common-variables
  # kafka and mqtt env
  KAFKA_BOOTSTRAP_SERVERS: kafka:29092
  TOPIC_MQTT_SENSOR: topic/sensor
  TOPIC_KAFKA_SENSOR: topic-sensor
  TOPIC_MQTT_CMD: topic/cmd
  TOPIC_KAFKA_CMD: topic-cmd

  # DB env
  POSTGRES_DB_URL: jdbc:postgresql://timescaledb:5432/gps
  POSTGRES_DB: gps
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: password
  POSTGRES_PORT: 5432
  POSTGRES_HOST: timescaledb

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-data:/var/lib/zookeeper
    restart: always

  # Kafka broker
  # 29092: This port is used to expose Kafka within the Docker network. 
  # Containers in the same Docker Compose network can access Kafka using this port.
  # 9092: This port is mapped to the host, allowing you to access Kafka from your host machine.
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    expose:
      - '29092'
    environment:
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      ALLOW_PLAINTEXT_LISTENER: 'yes'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '1'
      KAFKA_MIN_INSYNC_REPLICAS: '1'
    volumes:
      - kafka-data:/var/lib/kafka
    restart: always
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 3

  # Initialize Kafka topic.
  init-kafka:
    container_name: init-kafka
    image: confluentinc/cp-kafka:latest
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic topic-sensor --replication-factor 1 --partitions 3
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic topic-cmd --replication-factor 1 --partitions 3

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "

  timescaledb:
    image: timescale/timescaledb-ha:pg16
    container_name: timescaledb
    ports:
      - "5432:5432"
    environment:
      <<: *common-variables
    volumes:
      - timescaledb-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Initialize gps db in timescale
  init-timescaledb:
    image: postgres:latest
    container_name: init-timescaledb
    environment:
      <<: *common-variables
    depends_on:
      timescaledb:
        condition: service_healthy
    volumes:
      - ./scripts:/scripts
    entrypoint: [ "/bin/bash", "/scripts/init_timescaledb.sh" ]

  bridge:
    build: ./bridge
    container_name: bridge
    ports:
      - "8080:8080"
    environment:
      <<: *common-variables
      JAVA_HOME: /docker-java-home
    depends_on:
      kafka:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
    # Run the application with the lib directory added to class path.
    command: java -cp target/bridge-app-1.0-SNAPSHOT.jar:target/lib/\* bridge.Bridge

  gps-processing:
    build: ./gpsProcessing
    container_name: gps-processing
    ports:
      - "8081:8081"
    environment:
      <<: *common-variables
      JAVA_HOME: /docker-java-home
    depends_on:
      kafka:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
    command: java -cp target/gpsProcessing-1.0-SNAPSHOT.jar:target/lib/\* gpsProcessing.Main
    
  command-sender:
    build: ./commandSender
    container_name: command-sender
    ports:
      - "8082:8082"
    environment:
      <<: *common-variables
      JAVA_HOME: /docker-java-home
    depends_on:
      kafka:
        condition: service_healthy
    # Run the application with the lib directory added to class path.
    command: java -cp target/commandSender-1.0-SNAPSHOT.jar:target/lib/\* commandSender.CommandSenderApplication
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      timescaledb:
        condition: service_healthy
    networks:
      - default
volumes:
  zookeeper-data:
  kafka-data:
  timescaledb-data: